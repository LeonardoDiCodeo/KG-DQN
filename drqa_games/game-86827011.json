{"version": 1, "world": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_11", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_10", "type": "c"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_11", "type": "c"}, {"name": "r_6", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_12", "type": "c"}, {"name": "r_8", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_2", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_3", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_4", "type": "c"}, {"name": "r_13", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_5", "type": "c"}, {"name": "r_11", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_6", "type": "c"}, {"name": "r_16", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_7", "type": "c"}, {"name": "r_15", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_8", "type": "c"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_9", "type": "c"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_1", "type": "f"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_2", "type": "f"}, {"name": "r_13", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_4", "type": "f"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "k_1", "type": "k"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "k_3", "type": "k"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_0", "type": "o"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_2", "type": "o"}, {"name": "r_12", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_3", "type": "o"}, {"name": "r_14", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_4", "type": "o"}, {"name": "r_14", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_7", "type": "o"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_9", "type": "o"}, {"name": "r_6", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_0", "type": "s"}, {"name": "r_16", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_1", "type": "s"}, {"name": "r_17", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_2", "type": "s"}, {"name": "r_18", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_3", "type": "s"}, {"name": "r_4", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_10", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_2", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_5", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_6", "type": "c"}]}, {"name": "east_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_19", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "edible", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_3", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_4", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_5", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_6", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_7", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_8", "type": "f"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_19", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_19", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "in", "arguments": [{"name": "f_0", "type": "f"}, {"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "f_3", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "f_5", "type": "f"}, {"name": "c_9", "type": "c"}]}, {"name": "in", "arguments": [{"name": "f_6", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "f_7", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "f_8", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_1", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_4", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "o_1", "type": "o"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "o_5", "type": "o"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "o_6", "type": "o"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "o_8", "type": "o"}, {"name": "I", "type": "I"}]}, {"name": "locked", "arguments": [{"name": "c_12", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_4", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_7", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_0", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_1", "type": "k"}, {"name": "c_2", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_3", "type": "k"}, {"name": "c_3", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_4", "type": "k"}, {"name": "c_11", "type": "c"}]}, {"name": "north_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_11", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_3", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_8", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_9", "type": "c"}]}, {"name": "south_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_19", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_7", "type": "r"}]}], "grammar": {"theme": "house", "names_to_exclude": [], "include_adj": false, "blend_descriptions": false, "ambiguous_instructions": false, "only_last_action": false, "blend_instructions": false, "allowed_variables_numbering": false, "unique_expansion": false}, "quests": [{"desc": "Welcome to TextWorld! First off, if it's not too much trouble, I need you to head south. Then, go to the east. Then, make an attempt to go to the south. That done, make an attempt to go south. Then, move south. And then, head east. After that, attempt to take a trip north. And then, recover the key from the basket inside the salon. And then, make an effort to venture west. Then, Put the key into the box to lock it. And once you've done that, you win!", "reward": 1, "commands": ["go south", "go east", "go south", "go south", "go south", "go east", "go north", "take key from basket", "go west", "lock box with key"], "win_events": [{"commands": ["go south", "go east", "go south", "go south", "go south", "go east", "go north", "take key from basket", "go west", "lock box with key"], "actions": [{"name": "go/south", "preconditions": [{"name": "north_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_11", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_10", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_10", "type": "r"}]}], "command_template": "go south", "reverse_name": null, "reverse_command_template": "go north"}, {"name": "go/east", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_10", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_9", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}], "command_template": "go east", "reverse_name": null, "reverse_command_template": "go west"}, {"name": "go/south", "preconditions": [{"name": "north_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_9", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_2", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_2", "type": "r"}]}], "command_template": "go south", "reverse_name": null, "reverse_command_template": "go north"}, {"name": "go/south", "preconditions": [{"name": "north_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_2", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}], "command_template": "go south", "reverse_name": null, "reverse_command_template": "go north"}, {"name": "go/south", "preconditions": [{"name": "north_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_6", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_6", "type": "r"}]}], "command_template": "go south", "reverse_name": null, "reverse_command_template": "go north"}, {"name": "go/east", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_6", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_5", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_5", "type": "r"}]}], "command_template": "go east", "reverse_name": null, "reverse_command_template": "go west"}, {"name": "go/north", "preconditions": [{"name": "north_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_5", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_4", "type": "r"}]}], "command_template": "go north", "reverse_name": null, "reverse_command_template": "go south"}, {"name": "take/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_1", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "I", "type": "I"}]}], "command_template": "take {k_0} from {c_1}", "reverse_name": null, "reverse_command_template": "insert {k_0} into {c_1}"}, {"name": "go/west", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_1", "type": "r"}]}], "command_template": "go west", "reverse_name": null, "reverse_command_template": "go east"}, {"name": "lock/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_0", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_0", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_0", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_0", "type": "c"}]}], "command_template": "lock {c_0} with {k_0}", "reverse_name": null, "reverse_command_template": "unlock {c_0} with {k_0}"}], "condition": {"name": "trigger", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_0", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_0", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_0", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "event", "arguments": [{"name": "I", "type": "I"}, {"name": "P", "type": "P"}, {"name": "c_0", "type": "c"}, {"name": "k_0", "type": "k"}, {"name": "r_1", "type": "r"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [], "optional": false, "repeatable": false}], "infos": [["P", {"id": "P", "type": "P", "name": null, "noun": null, "adj": null, "desc": null, "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["I", {"id": "I", "type": "I", "name": null, "noun": null, "adj": null, "desc": null, "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["r_1", {"id": "r_1", "type": "r", "name": "cubicle", "noun": "cubicle", "adj": null, "desc": "You've just walked into a cubicle.\n\n You can see a box.[if c_0 is open and there is something in the c_0] The box contains [a list of things in the c_0].[end if][if c_0 is open and the c_0 contains nothing] Empty! What kind of nightmare TextWorld is this?[end if] You make out [if c_2 is locked]a locked[else if c_2 is open]an opened[otherwise]a closed[end if] formless safe in the room.[if c_2 is open and there is something in the c_2] The formless safe contains [a list of things in the c_2]. You shudder, but continue examining the room.[end if][if c_2 is open and the c_2 contains nothing] The formless safe is empty, what a horrible day![end if]\n\nThere is an unblocked exit to the east. There is an exit to the north. Don't worry, it is unblocked. There is an unblocked exit to the south. You need an unblocked exit? You should try going west.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_0", {"id": "r_0", "type": "r", "name": "dish-pit", "noun": "dish-pit", "adj": null, "desc": "You find yourself in a dish-pit. You can barely contain your excitement.\n\n You can see [if c_3 is locked]a locked[else if c_3 is open]an opened[otherwise]a closed[end if] safe right there by you.[if c_3 is open and there is something in the c_3] The safe contains [a list of things in the c_3]. You check the price tag glued to the safe. 25 bucks? What a deal! You'll have to ask where they got this![end if][if c_3 is open and the c_3 contains nothing] What a letdown! The safe is empty![end if]\n\nYou don't like doors? Why not try going east, that entranceway is unblocked.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_10", {"id": "r_10", "type": "r", "name": "kitchenette", "noun": "kitchenette", "adj": null, "desc": "You arrive in a kitchenette. An usual one.\n\n\n\nYou need an unblocked exit? You should try going east. There is an unguarded exit to the north. You need an unguarded exit? You should try going west.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_13", {"id": "r_13", "type": "r", "name": "shower", "noun": "shower", "adj": null, "desc": "You have come into the most normal of all possible showers. You begin to take stock of what's in the room.\n\n [if c_4 is locked]A locked[else if c_4 is open]An open[otherwise]A closed[end if] cabinet is close by.[if c_4 is open and there is something in the c_4] The cabinet contains [a list of things in the c_4].[end if][if c_4 is open and the c_4 contains nothing] The cabinet is empty! What a waste of a day![end if]\n\nYou don't like doors? Why not try going east, that entranceway is unblocked. You need an unblocked exit? You should try going north. You don't like doors? Why not try going south, that entranceway is unblocked.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_11", {"id": "r_11", "type": "r", "name": "lounge", "noun": "lounge", "adj": null, "desc": "Well, here we are in a lounge.\n\n You rest your hand against a wall, but you miss the wall and fall onto a trunk.[if c_5 is open and there is something in the c_5] The trunk contains [a list of things in the c_5].[end if][if c_5 is open and the c_5 contains nothing] What a letdown! The trunk is empty![end if]\n\nYou don't like doors? Why not try going south, that entranceway is unguarded. You don't like doors? Why not try going west, that entranceway is unguarded.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_12", {"id": "r_12", "type": "r", "name": "workshop", "noun": "workshop", "adj": null, "desc": "Well, here we are in a workshop.\n\n\n\nThere is an unguarded exit to the east. There is an unguarded exit to the south. There is an unblocked exit to the west.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_19", {"id": "r_19", "type": "r", "name": "cellar", "noun": "cellar", "adj": null, "desc": "You are in a cellar. It seems to be pretty normal here. You decide to just list off a complete list of everything you see in the room, because hey, why not?\n\n\n\nThere is an unguarded exit to the east.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_14", {"id": "r_14", "type": "r", "name": "steam room", "noun": "steam room", "adj": null, "desc": "You are in a steam room. A typical kind of place.\n\n\n\nYou don't like doors? Why not try going east, that entranceway is unguarded. There is an unguarded exit to the north. You need an unblocked exit? You should try going south. There is an exit to the west. Don't worry, it is unblocked.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_16", {"id": "r_16", "type": "r", "name": "cookhouse", "noun": "cookhouse", "adj": null, "desc": "You've entered a cookhouse. The room seems oddly familiar, as though it were only superficially different from the other rooms in the building.\n\n You smell a wretched smell, and follow it to a chest.[if c_6 is open and there is something in the c_6] The chest contains [a list of things in the c_6].[end if][if c_6 is open and the c_6 contains nothing] The chest is empty! What a waste of a day![end if] You see a table. Make a note of this, you might have to put stuff on or in it later on. The table is usual.[if there is something on the s_0] On the table you make out [a list of things on the s_0].[end if][if there is nothing on the s_0] But the thing is empty.[end if]\n\nThere is an exit to the east. Don't worry, it is unblocked. You need an unguarded exit? You should try going south.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_15", {"id": "r_15", "type": "r", "name": "canteen", "noun": "canteen", "adj": null, "desc": "You are in a canteen. A standard one.\n\n You can see a freezer.[if c_7 is open and there is something in the c_7] The freezer contains [a list of things in the c_7].[end if][if c_7 is open and the c_7 contains nothing] What a letdown! The freezer is empty![end if]\n\nThere is an unguarded exit to the east. There is an exit to the west. Don't worry, it is unguarded.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_17", {"id": "r_17", "type": "r", "name": "recreation zone", "noun": "recreation zone", "adj": null, "desc": "You've entered a recreation zone.\n\n Were you looking for a shelf? Because look over there, it's a shelf. The shelf is usual.[if there is something on the s_1] On the shelf you see [a list of things on the s_1].[end if][if there is nothing on the s_1] But the thing hasn't got anything on it.[end if]\n\nYou don't like doors? Why not try going north, that entranceway is unblocked. You don't like doors? Why not try going west, that entranceway is unguarded.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_18", {"id": "r_18", "type": "r", "name": "chamber", "noun": "chamber", "adj": null, "desc": "You've just walked into a chamber.\n\n As if things weren't amazing enough already, you can even see a bed. [if there is something on the s_2]On the bed you make out [a list of things on the s_2]. Something scurries by right in the corner of your eye. Probably nothing.[end if][if there is nothing on the s_2]Looks like someone's already been here and taken everything off it, though.[end if]\n\nYou don't like doors? Why not try going east, that entranceway is unblocked. You need an unguarded exit? You should try going north.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_2", {"id": "r_2", "type": "r", "name": "study", "noun": "study", "adj": null, "desc": "Well, here we are in the study. You can barely contain your excitement.\n\n\n\nYou need an unblocked exit? You should try going east. You need an unblocked exit? You should try going north. There is an exit to the south. Don't worry, it is unguarded. You don't like doors? Why not try going west, that entranceway is unguarded.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_3", {"id": "r_3", "type": "r", "name": "laundry place", "noun": "laundry place", "adj": null, "desc": "You've entered a laundry place.\n\n\n\nYou don't like doors? Why not try going north, that entranceway is unguarded. There is an exit to the south. Don't worry, it is unblocked. You need an unguarded exit? You should try going west.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_4", {"id": "r_4", "type": "r", "name": "salon", "noun": "salon", "adj": null, "desc": "You arrive in a salon. An ordinary kind of place.\n\n You see a gleam over in a corner, where you can see a basket.[if c_1 is open and there is something in the c_1] The basket contains [a list of things in the c_1].[end if][if c_1 is open and the c_1 contains nothing] The basket is empty! This is the worst thing that could possibly happen, ever![end if] As if things weren't amazing enough already, you can even see a bench. The bench is usual.[if there is something on the s_3] On the bench you can see [a list of things on the s_3], so there's that.[end if][if there is nothing on the s_3] Unfortunately, there isn't a thing on it. What's the point of an empty bench?[end if]\n\nYou need an unblocked exit? You should try going north. You don't like doors? Why not try going south, that entranceway is unblocked. You don't like doors? Why not try going west, that entranceway is unguarded.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_5", {"id": "r_5", "type": "r", "name": "bar", "noun": "bar", "adj": null, "desc": "You find yourself in a bar. A standard kind of place.\n\n You see a gleam over in a corner, where you can see a locker.[if c_10 is open and there is something in the c_10] The locker contains [a list of things in the c_10].[end if][if c_10 is open and the c_10 contains nothing] The locker is empty! This is the worst thing that could possibly happen, ever![end if] You can make out [if c_8 is locked]a locked[else if c_8 is open]an opened[otherwise]a closed[end if] coffer close by.[if c_8 is open and there is something in the c_8] The coffer contains [a list of things in the c_8].[end if][if c_8 is open and the c_8 contains nothing] The coffer is empty, what a horrible day![end if] You make out [if c_9 is locked]a locked[else if c_9 is open]an opened[otherwise]a closed[end if] suitcase.[if c_9 is open and there is something in the c_9] The suitcase contains [a list of things in the c_9].[end if][if c_9 is open and the c_9 contains nothing] What a letdown! The suitcase is empty![end if]\n\nYou don't like doors? Why not try going north, that entranceway is unguarded. You don't like doors? Why not try going west, that entranceway is unguarded.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_6", {"id": "r_6", "type": "r", "name": "bathroom", "noun": "bathroom", "adj": null, "desc": "You've entered a bathroom.\n\n You can make out a Microsoft box![if c_11 is open and there is something in the c_11] The Microsoft box contains [a list of things in the c_11].[end if][if c_11 is open and the c_11 contains nothing] The Microsoft box is empty, what a horrible day![end if]\n\nThere is an unguarded exit to the east. There is an exit to the north. Don't worry, it is unguarded.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_7", {"id": "r_7", "type": "r", "name": "studio", "noun": "studio", "adj": null, "desc": "You've entered a studio. You begin to take stock of what's here.\n\n\n\nYou don't like doors? Why not try going north, that entranceway is unguarded. There is an unblocked exit to the south. You don't like doors? Why not try going west, that entranceway is unguarded.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_9", {"id": "r_9", "type": "r", "name": "office", "noun": "office", "adj": null, "desc": "I am sorry to announce that you are now in the office.\n\n\n\nThere is an exit to the east. Don't worry, it is unguarded. There is an unguarded exit to the south. There is an unblocked exit to the west.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_8", {"id": "r_8", "type": "r", "name": "sauna", "noun": "sauna", "adj": null, "desc": "Well I'll be, you are in the place we're calling the sauna.\n\n You can see [if c_12 is locked]a locked[else if c_12 is open]an opened[otherwise]a closed[end if] dresser, which looks standard, in the corner.[if c_12 is open and there is something in the c_12] The dresser contains [a list of things in the c_12].[end if][if c_12 is open and the c_12 contains nothing] What a letdown! The dresser is empty![end if]\n\nYou don't like doors? Why not try going south, that entranceway is unblocked.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["c_0", {"id": "c_0", "type": "c", "name": "box", "noun": "box", "adj": null, "desc": "The box looks strong, and impossible to break. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_1", {"id": "c_1", "type": "c", "name": "basket", "noun": "basket", "adj": null, "desc": "The basket looks strong, and impossible to crack. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["c_10", {"id": "c_10", "type": "c", "name": "locker", "noun": "locker", "adj": null, "desc": "The locker looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["c_11", {"id": "c_11", "type": "c", "name": "Microsoft box", "noun": "Microsoft box", "adj": null, "desc": "The Microsoft box looks strong, and impossible to crack. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["c_12", {"id": "c_12", "type": "c", "name": "dresser", "noun": "dresser", "adj": null, "desc": "The dresser looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["c_2", {"id": "c_2", "type": "c", "name": "formless safe", "noun": "formless safe", "adj": null, "desc": "The formless safe looks strong, and impossible to destroy. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_3", {"id": "c_3", "type": "c", "name": "safe", "noun": "safe", "adj": null, "desc": "The safe looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_4", {"id": "c_4", "type": "c", "name": "cabinet", "noun": "cabinet", "adj": null, "desc": "The cabinet looks strong, and impossible to break. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["c_5", {"id": "c_5", "type": "c", "name": "trunk", "noun": "trunk", "adj": null, "desc": "The trunk looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["c_6", {"id": "c_6", "type": "c", "name": "chest", "noun": "chest", "adj": null, "desc": "The chest looks strong, and impossible to destroy. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_7", {"id": "c_7", "type": "c", "name": "freezer", "noun": "freezer", "adj": null, "desc": "The freezer looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_8", {"id": "c_8", "type": "c", "name": "coffer", "noun": "coffer", "adj": null, "desc": "The coffer looks strong, and impossible to destroy. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["c_9", {"id": "c_9", "type": "c", "name": "suitcase", "noun": "suitcase", "adj": null, "desc": "The suitcase looks strong, and impossible to crack. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["f_1", {"id": "f_1", "type": "f", "name": "sandwich", "noun": "sandwich", "adj": null, "desc": "that's a typical sandwich!", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["f_2", {"id": "f_2", "type": "f", "name": "berry", "noun": "berry", "adj": null, "desc": "The berry looks inviting.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["f_4", {"id": "f_4", "type": "f", "name": "stick of butter", "noun": "stick of butter", "adj": null, "desc": "that's a normal stick of butter!", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["k_1", {"id": "k_1", "type": "k", "name": "formless latchkey", "noun": "formless latchkey", "adj": null, "desc": "The metal of the formless latchkey is hammered.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["k_3", {"id": "k_3", "type": "k", "name": "latchkey", "noun": "latchkey", "adj": null, "desc": "The latchkey is heavier than it looks.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["o_0", {"id": "o_0", "type": "o", "name": "teapot", "noun": "teapot", "adj": null, "desc": "The teapot appears to fit in here", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["o_2", {"id": "o_2", "type": "o", "name": "pencil", "noun": "pencil", "adj": null, "desc": "The pencil is brand new.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["o_3", {"id": "o_3", "type": "o", "name": "nest of beetles", "noun": "nest of beetles", "adj": null, "desc": "The nest of beetles is antiquated.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["o_4", {"id": "o_4", "type": "o", "name": "mop", "noun": "mop", "adj": null, "desc": "The mop seems to fit in here", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["o_7", {"id": "o_7", "type": "o", "name": "paper towel", "noun": "paper towel", "adj": null, "desc": "The paper towel appears well matched to everything else here", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["o_9", {"id": "o_9", "type": "o", "name": "fly larva", "noun": "fly larva", "adj": null, "desc": "The fly larva is brand new.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["s_0", {"id": "s_0", "type": "s", "name": "table", "noun": "table", "adj": null, "desc": "The table is undependable.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["s_1", {"id": "s_1", "type": "s", "name": "shelf", "noun": "shelf", "adj": null, "desc": "The shelf is wobbly.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["s_2", {"id": "s_2", "type": "s", "name": "bed", "noun": "bed", "adj": null, "desc": "The bed is stable.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["s_3", {"id": "s_3", "type": "s", "name": "bench", "noun": "bench", "adj": null, "desc": "The bench is solidly built.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["f_0", {"id": "f_0", "type": "f", "name": "chocolate bar", "noun": "chocolate bar", "adj": null, "desc": "You couldn't pay me to eat that usual thing.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["f_3", {"id": "f_3", "type": "f", "name": "loaf of bread", "noun": "loaf of bread", "adj": null, "desc": "that's a normal loaf of bread!", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["f_5", {"id": "f_5", "type": "f", "name": "peanut", "noun": "peanut", "adj": null, "desc": "You couldn't pay me to eat that ordinary thing.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["f_6", {"id": "f_6", "type": "f", "name": "cabbage", "noun": "cabbage", "adj": null, "desc": "The cabbage looks tantalizing.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["f_7", {"id": "f_7", "type": "f", "name": "fondue", "noun": "fondue", "adj": null, "desc": "You couldn't pay me to eat that typical thing.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["f_8", {"id": "f_8", "type": "f", "name": "licorice strip", "noun": "licorice strip", "adj": null, "desc": "You couldn't pay me to eat that ordinary thing.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["k_0", {"id": "k_0", "type": "k", "name": "key", "noun": "key", "adj": null, "desc": "The key is cold to the touch", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["k_4", {"id": "k_4", "type": "k", "name": "Microsoft keycard", "noun": "Microsoft keycard", "adj": null, "desc": "The metal of the Microsoft keycard is satin.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["o_1", {"id": "o_1", "type": "o", "name": "blanket", "noun": "blanket", "adj": null, "desc": "The blanket appears to be well matched to everything else here", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["o_5", {"id": "o_5", "type": "o", "name": "coffee cup", "noun": "coffee cup", "adj": null, "desc": "The coffee cup is unremarkable.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["o_6", {"id": "o_6", "type": "o", "name": "mouse", "noun": "mouse", "adj": null, "desc": "The mouse appears out of place here", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["o_8", {"id": "o_8", "type": "o", "name": "plant", "noun": "plant", "adj": null, "desc": "The plant is antiquated.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}]], "KB": {"logic": "# object\ntype o : t {\n    constraints {\n        obj1 :: in(o, I) & in(o, c) -> fail();\n        obj2 :: in(o, I) & on(o, s) -> fail();\n        obj3 :: in(o, I) & at(o, r) -> fail();\n        obj4 :: in(o, c) & on(o, s) -> fail();\n        obj5 :: in(o, c) & at(o, r) -> fail();\n        obj6 :: on(o, s) & at(o, r) -> fail();\n        obj7 :: at(o, r) & at(o, r') -> fail();\n        obj8 :: in(o, c) & in(o, c') -> fail();\n        obj9 :: on(o, s) & on(o, s') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"object-like\";\n            definition :: \"object-like is portable.\";\n        }\n    }\n}\n\n# Inventory\ntype I {\n    predicates {\n        in(o, I);\n    }\n\n    rules {\n        inventory :: at(P, r) -> at(P, r);  # Nothing changes.\n\n        take :: $at(P, r) & at(o, r) -> in(o, I);\n        drop :: $at(P, r) & in(o, I) -> at(o, r);\n\n        take/c :: $at(P, r) & $at(c, r) & $open(c) & in(o, c) -> in(o, I);\n        insert :: $at(P, r) & $at(c, r) & $open(c) & in(o, I) -> in(o, c);\n\n        take/s :: $at(P, r) & $at(s, r) & on(o, s) -> in(o, I);\n        put    :: $at(P, r) & $at(s, r) & in(o, I) -> on(o, s);\n\n        examine/I :: in(o, I) -> in(o, I);  # Nothing changes.\n        examine/s :: at(P, r) & $at(s, r) & $on(o, s) -> at(P, r);  # Nothing changes.\n        examine/c :: at(P, r) & $at(c, r) & $open(c) & $in(o, c) -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        inventory :: inventory;\n\n        take :: drop;\n        take/c :: insert;\n        take/s :: put;\n\n        examine/I :: examine/I;\n        examine/s :: examine/s;\n        examine/c :: examine/c;\n    }\n\n    inform7 {\n        predicates {\n            in(o, I) :: \"The player carries the {o}\";\n        }\n\n        commands {\n            take :: \"take {o}\" :: \"taking the {o}\";\n            drop :: \"drop {o}\" :: \"dropping the {o}\";\n\n            take/c :: \"take {o} from {c}\" :: \"removing the {o} from the {c}\";\n            insert :: \"insert {o} into {c}\" :: \"inserting the {o} into the {c}\";\n\n            take/s :: \"take {o} from {s}\" :: \"removing the {o} from the {s}\";\n            put :: \"put {o} on {s}\" :: \"putting the {o} on the {s}\";\n\n            inventory :: \"inventory\" :: \"taking inventory\";\n\n            examine/I :: \"examine {o}\" :: \"examining the {o}\";\n            examine/s :: \"examine {o}\" :: \"examining the {o}\";\n            examine/c :: \"examine {o}\" :: \"examining the {o}\";\n        }\n    }\n}\n\n# thing\ntype t {\n    rules {\n        examine/t :: at(P, r) & $at(t, r) -> at(P, r);\n    }\n\n    reverse_rules {\n        examine/t :: examine/t;\n    }\n\n    inform7 {\n        type {\n            kind :: \"thing\";\n        }\n\n        commands {\n            examine/t :: \"examine {t}\" :: \"examining the {t}\";\n        }\n    }\n}\n\n# door\ntype d : t {\n    predicates {\n        open(d);\n        closed(d);\n        locked(d);\n\n        link(r, d, r);\n    }\n\n    rules {\n        lock/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & closed(d) -> locked(d);\n        unlock/d :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & locked(d) -> closed(d);\n\n        open/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & closed(d) -> open(d) & free(r, r') & free(r', r);\n        close/d  :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & open(d) & free(r, r') & free(r', r) -> closed(d);\n\n        examine/d :: at(P, r) & $link(r, d, r') -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        lock/d :: unlock/d;\n        open/d :: close/d;\n\n        examine/d :: examine/d;\n    }\n\n    constraints {\n        d1 :: open(d)   & closed(d) -> fail();\n        d2 :: open(d)   & locked(d) -> fail();\n        d3 :: closed(d) & locked(d) -> fail();\n\n        # A door can't be used to link more than two rooms.\n        link1 :: link(r, d, r') & link(r, d, r'') -> fail();\n        link2 :: link(r, d, r') & link(r'', d, r''') -> fail();\n\n        # There's already a door linking two rooms.\n        link3 :: link(r, d, r') & link(r, d', r') -> fail();\n\n        # There cannot be more than four doors in a room.\n        too_many_doors :: link(r, d1: d, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        # There cannot be more than four doors in a room.\n        dr1 :: free(r, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr2 :: free(r, r1: r) & free(r, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr3 :: free(r, r1: r) & free(r, r2: r) & free(r, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr4 :: free(r, r1: r) & free(r, r2: r) & free(r, r3: r) & free(r, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        free1 :: link(r, d, r') & free(r, r') & closed(d) -> fail();\n        free2 :: link(r, d, r') & free(r, r') & locked(d) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"door\";\n            definition :: \"door is openable and lockable.\";\n        }\n\n        predicates {\n            open(d) :: \"The {d} is open\";\n            closed(d) :: \"The {d} is closed\";\n            locked(d) :: \"The {d} is locked\";\n            link(r, d, r') :: \"\";  # No equivalent in Inform7.\n        }\n\n        commands {\n            open/d :: \"open {d}\" :: \"opening {d}\";\n            close/d :: \"close {d}\" :: \"closing {d}\";\n\n            unlock/d :: \"unlock {d} with {k}\" :: \"unlocking {d} with the {k}\";\n            lock/d :: \"lock {d} with {k}\" :: \"locking {d} with the {k}\";\n\n            examine/d :: \"examine {d}\" :: \"examining {d}\";\n        }\n    }\n}\n\n# container\ntype c : t {\n    predicates {\n        open(c);\n        closed(c);\n        locked(c);\n\n        in(o, c);\n    }\n\n    rules {\n        lock/c   :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & closed(c) -> locked(c);\n        unlock/c :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & locked(c) -> closed(c);\n\n        open/c  :: $at(P, r) & $at(c, r) & closed(c) -> open(c);\n        close/c :: $at(P, r) & $at(c, r) & open(c) -> closed(c);\n    }\n\n    reverse_rules {\n        lock/c :: unlock/c;\n        open/c :: close/c;\n    }\n\n    constraints {\n        c1 :: open(c)   & closed(c) -> fail();\n        c2 :: open(c)   & locked(c) -> fail();\n        c3 :: closed(c) & locked(c) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"container\";\n            definition :: \"containers are openable, lockable and fixed in place. containers are usually closed.\";\n        }\n\n        predicates {\n            open(c) :: \"The {c} is open\";\n            closed(c) :: \"The {c} is closed\";\n            locked(c) :: \"The {c} is locked\";\n\n            in(o, c) :: \"The {o} is in the {c}\";\n        }\n\n        commands {\n            open/c :: \"open {c}\" :: \"opening the {c}\";\n            close/c :: \"close {c}\" :: \"closing the {c}\";\n\n            lock/c :: \"lock {c} with {k}\" :: \"locking the {c} with the {k}\";\n            unlock/c :: \"unlock {c} with {k}\" :: \"unlocking the {c} with the {k}\";\n        }\n    }\n}\n\n# key\ntype k : o {\n    predicates {\n        match(k, c);\n        match(k, d);\n    }\n\n    constraints {\n        k1 :: match(k, c) & match(k', c) -> fail();\n        k2 :: match(k, c) & match(k, c') -> fail();\n        k3 :: match(k, d) & match(k', d) -> fail();\n        k4 :: match(k, d) & match(k, d') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"key\";\n        }\n\n        predicates {\n            match(k, c) :: \"The matching key of the {c} is the {k}\";\n            match(k, d) :: \"The matching key of the {d} is the {k}\";\n        }\n    }\n}\n\n# food\ntype f : o {\n    predicates {\n        edible(f);\n        eaten(f);\n    }\n\n    rules {\n        eat :: in(f, I) -> eaten(f);\n    }\n\n    constraints {\n        eaten1 :: eaten(f) & in(f, I) -> fail();\n        eaten2 :: eaten(f) & in(f, c) -> fail();\n        eaten3 :: eaten(f) & on(f, s) -> fail();\n        eaten4 :: eaten(f) & at(f, r) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"food\";\n            definition :: \"food is edible.\";\n        }\n\n        predicates {\n            edible(f) :: \"The {f} is edible\";\n            eaten(f) :: \"The {f} is nowhere\";\n        }\n\n        commands {\n            eat :: \"eat {f}\" :: \"eating the {f}\";\n        }\n    }\n}\n\n# Player\ntype P {\n    rules {\n        look :: at(P, r) -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        look :: look;\n    }\n\n    inform7 {\n        commands {\n            look :: \"look\" :: \"looking\";\n        }\n    }\n}\n\n# supporter\ntype s : t {\n    predicates {\n        on(o, s);\n    }\n\n    inform7 {\n        type {\n            kind :: \"supporter\";\n            definition :: \"supporters are fixed in place.\";\n        }\n\n        predicates {\n            on(o, s) :: \"The {o} is on the {s}\";\n        }\n    }\n}\n\n# room\ntype r {\n    predicates {\n        at(P, r);\n        at(t, r);\n\n        north_of(r, r);\n        west_of(r, r);\n\n        north_of/d(r, d, r);\n        west_of/d(r, d, r);\n\n        free(r, r);\n\n        south_of(r, r') = north_of(r', r);\n        east_of(r, r') = west_of(r', r);\n\n        south_of/d(r, d, r') = north_of/d(r', d, r);\n        east_of/d(r, d, r') = west_of/d(r', d, r);\n    }\n\n    rules {\n        go/north :: at(P, r) & $north_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/south :: at(P, r) & $south_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/east  :: at(P, r) & $east_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/west  :: at(P, r) & $west_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n    }\n\n    reverse_rules {\n        go/north :: go/south;\n        go/west :: go/east;\n    }\n\n    constraints {\n        r1 :: at(P, r) & at(P, r') -> fail();\n        r2 :: at(s, r) & at(s, r') -> fail();\n        r3 :: at(c, r) & at(c, r') -> fail();\n\n        # An exit direction can only lead to one room.\n        nav_rr1 :: north_of(r, r') & north_of(r'', r') -> fail();\n        nav_rr2 :: south_of(r, r') & south_of(r'', r') -> fail();\n        nav_rr3 :: east_of(r, r') & east_of(r'', r') -> fail();\n        nav_rr4 :: west_of(r, r') & west_of(r'', r') -> fail();\n\n        # Two rooms can only be connected once with each other.\n        nav_rrA :: north_of(r, r') & south_of(r, r') -> fail();\n        nav_rrB :: north_of(r, r') & west_of(r, r') -> fail();\n        nav_rrC :: north_of(r, r') & east_of(r, r') -> fail();\n        nav_rrD :: south_of(r, r') & west_of(r, r') -> fail();\n        nav_rrE :: south_of(r, r') & east_of(r, r') -> fail();\n        nav_rrF :: west_of(r, r')  & east_of(r, r') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"room\";\n        }\n\n        predicates {\n            at(P, r) :: \"The player is in {r}\";\n            at(t, r) :: \"The {t} is in {r}\";\n            free(r, r') :: \"\";  # No equivalent in Inform7.\n\n            north_of(r, r') :: \"The {r} is mapped north of {r'}\";\n            south_of(r, r') :: \"The {r} is mapped south of {r'}\";\n            east_of(r, r') :: \"The {r} is mapped east of {r'}\";\n            west_of(r, r') :: \"The {r} is mapped west of {r'}\";\n\n            north_of/d(r, d, r') :: \"South of {r} and north of {r'} is a door called {d}\";\n            south_of/d(r, d, r') :: \"North of {r} and south of {r'} is a door called {d}\";\n            east_of/d(r, d, r') :: \"West of {r} and east of {r'} is a door called {d}\";\n            west_of/d(r, d, r') :: \"East of {r} and west of {r'} is a door called {d}\";\n        }\n\n        commands {\n            go/north :: \"go north\" :: \"going north\";\n            go/south :: \"go south\" :: \"going south\";\n            go/east :: \"go east\" :: \"going east\";\n            go/west :: \"go west\" :: \"going west\";\n        }\n    }\n}\n\n", "text_grammars_path": "/home/lennard/miniconda3/envs/env/lib/python3.12/site-packages/textworld/generator/data/text_grammars"}, "metadata": {"walkthrough": ["go south", "go east", "go south", "go south", "go south", "go east", "go north", "take key from basket", "go west", "lock box with key"], "uuid": "tw-mlhnSDF0cDcOFZc8Fy-house-GP-2dPOfp8WSGNNinxE"}, "objective": "Welcome to another fast paced game of TextWorld! First of all, you could, like, make an attempt to move south. With that over with, attempt to head east. And then, make an attempt to move south. Then, try to go to the south. After that, make an effort to head south. Following that, travel east. Then, go to the north. If you can get around to doing that, pick up the key from the basket in the salon. After that, go to the west. Okay, and then, lock the box. Once that's all handled, you can stop!"}