{"version": 1, "world": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_2", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_3", "type": "c"}, {"name": "r_10", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_4", "type": "c"}, {"name": "r_12", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_5", "type": "c"}, {"name": "r_13", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_6", "type": "c"}, {"name": "r_13", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_7", "type": "c"}, {"name": "r_7", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_8", "type": "c"}, {"name": "r_16", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_0", "type": "f"}, {"name": "r_12", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_1", "type": "f"}, {"name": "r_15", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_2", "type": "f"}, {"name": "r_18", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_3", "type": "f"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_5", "type": "f"}, {"name": "r_16", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_6", "type": "f"}, {"name": "r_16", "type": "r"}]}, {"name": "at", "arguments": [{"name": "k_7", "type": "k"}, {"name": "r_13", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_2", "type": "o"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_5", "type": "o"}, {"name": "r_13", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_6", "type": "o"}, {"name": "r_14", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_9", "type": "o"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_0", "type": "s"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_1", "type": "s"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_2", "type": "s"}, {"name": "r_11", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_3", "type": "s"}, {"name": "r_15", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_4", "type": "s"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_5", "type": "s"}, {"name": "r_19", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_6", "type": "s"}, {"name": "r_19", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "c_4", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_7", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_8", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "d_1", "type": "d"}]}, {"name": "closed", "arguments": [{"name": "d_2", "type": "d"}]}, {"name": "closed", "arguments": [{"name": "d_4", "type": "d"}]}, {"name": "closed", "arguments": [{"name": "d_5", "type": "d"}]}, {"name": "east_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "edible", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_3", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_4", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_5", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_6", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_7", "type": "f"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_19", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_19", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "in", "arguments": [{"name": "f_4", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "f_7", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_1", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_1", "type": "k"}, {"name": "c_2", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_10", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "k_2", "type": "k"}, {"name": "c_2", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_10", "type": "o"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "o_3", "type": "o"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "o_4", "type": "o"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "o_7", "type": "o"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "o_8", "type": "o"}, {"name": "I", "type": "I"}]}, {"name": "link", "arguments": [{"name": "r_1", "type": "r"}, {"name": "d_7", "type": "d"}, {"name": "r_2", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_14", "type": "r"}, {"name": "d_3", "type": "d"}, {"name": "r_15", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_15", "type": "r"}, {"name": "d_2", "type": "d"}, {"name": "r_16", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_15", "type": "r"}, {"name": "d_3", "type": "d"}, {"name": "r_14", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_16", "type": "r"}, {"name": "d_1", "type": "d"}, {"name": "r_17", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_16", "type": "r"}, {"name": "d_2", "type": "d"}, {"name": "r_15", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_17", "type": "r"}, {"name": "d_0", "type": "d"}, {"name": "r_18", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_17", "type": "r"}, {"name": "d_1", "type": "d"}, {"name": "r_16", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_18", "type": "r"}, {"name": "d_0", "type": "d"}, {"name": "r_17", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_2", "type": "r"}, {"name": "d_6", "type": "d"}, {"name": "r_3", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_2", "type": "r"}, {"name": "d_7", "type": "d"}, {"name": "r_1", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_3", "type": "r"}, {"name": "d_5", "type": "d"}, {"name": "r_4", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_3", "type": "r"}, {"name": "d_6", "type": "d"}, {"name": "r_2", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_4", "type": "r"}, {"name": "d_4", "type": "d"}, {"name": "r_5", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_4", "type": "r"}, {"name": "d_5", "type": "d"}, {"name": "r_3", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_5", "type": "r"}, {"name": "d_4", "type": "d"}, {"name": "r_4", "type": "r"}]}, {"name": "locked", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_5", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_6", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "d_6", "type": "d"}]}, {"name": "locked", "arguments": [{"name": "d_7", "type": "d"}]}, {"name": "match", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_0", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_1", "type": "k"}, {"name": "c_1", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_10", "type": "k"}, {"name": "c_8", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_2", "type": "k"}, {"name": "c_2", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_7", "type": "k"}, {"name": "c_5", "type": "c"}]}, {"name": "north_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_19", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "on", "arguments": [{"name": "o_1", "type": "o"}, {"name": "s_0", "type": "s"}]}, {"name": "open", "arguments": [{"name": "c_2", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_3", "type": "c"}]}, {"name": "open", "arguments": [{"name": "d_0", "type": "d"}]}, {"name": "open", "arguments": [{"name": "d_3", "type": "d"}]}, {"name": "south_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_19", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_13", "type": "r"}]}], "grammar": {"theme": "house", "names_to_exclude": [], "include_adj": false, "blend_descriptions": false, "ambiguous_instructions": false, "only_last_action": false, "blend_instructions": false, "allowed_variables_numbering": false, "unique_expansion": false}, "quests": [{"desc": "Hey, thanks for coming over to the TextWorld today, there is something I need you to do for me. First step, make an effort to travel west. And then, recover the spherical key from the Henderson's limited edition safe in the shower. Then, unlock the spherical chest within the shower with the spherical key. After that, open the spherical chest inside the shower. After pulling open the spherical chest, recover the keycard from the spherical chest. And then, attempt to go east. And then, assure that the box is unlocked. And then, doublecheck that the box within the studio is opened. After that, take the folder from the box within the studio. After that, ditch the folder on the floor of the studio. And if you do that, you're the winner!", "reward": 1, "commands": ["go west", "take spherical key from Henderson's limited edition safe", "unlock spherical chest with spherical key", "open spherical chest", "take keycard from spherical chest", "go east", "unlock box with keycard", "open box", "take folder from box", "drop folder"], "win_events": [{"commands": ["go west", "take spherical key from Henderson's limited edition safe", "unlock spherical chest with spherical key", "open spherical chest", "take keycard from spherical chest", "go east", "unlock box with keycard", "open box", "take folder from box", "drop folder"], "actions": [{"name": "go/west", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}], "command_template": "go west", "reverse_name": null, "reverse_command_template": "go east"}, {"name": "take/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_2", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_2", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_1", "type": "k"}, {"name": "c_2", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_2", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_2", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_1", "type": "k"}, {"name": "I", "type": "I"}]}], "command_template": "take {k_1} from {c_2}", "reverse_name": null, "reverse_command_template": "insert {k_1} into {c_2}"}, {"name": "unlock/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_1", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_1", "type": "k"}, {"name": "c_1", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_1", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_1", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_1", "type": "k"}, {"name": "c_1", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_1", "type": "c"}]}], "command_template": "unlock {c_1} with {k_1}", "reverse_name": null, "reverse_command_template": "lock {c_1} with {k_1}"}, {"name": "open/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "c_1", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_1", "type": "c"}]}], "command_template": "open {c_1}", "reverse_name": null, "reverse_command_template": "close {c_1}"}, {"name": "take/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_1", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "I", "type": "I"}]}], "command_template": "take {k_0} from {c_1}", "reverse_name": null, "reverse_command_template": "insert {k_0} into {c_1}"}, {"name": "go/east", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}], "command_template": "go east", "reverse_name": null, "reverse_command_template": "go west"}, {"name": "unlock/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_0", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_0", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_0", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_0", "type": "c"}]}], "command_template": "unlock {c_0} with {k_0}", "reverse_name": null, "reverse_command_template": "lock {c_0} with {k_0}"}, {"name": "open/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "c_0", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}], "command_template": "open {c_0}", "reverse_name": null, "reverse_command_template": "close {c_0}"}, {"name": "take/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "c_0", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "I", "type": "I"}]}], "command_template": "take {o_0} from {c_0}", "reverse_name": null, "reverse_command_template": "insert {o_0} into {c_0}"}, {"name": "drop", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "I", "type": "I"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_0", "type": "o"}, {"name": "r_0", "type": "r"}]}], "command_template": "drop {o_0}", "reverse_name": null, "reverse_command_template": "take {o_0}"}], "condition": {"name": "trigger", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_0", "type": "o"}, {"name": "r_0", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_0", "type": "o"}, {"name": "r_0", "type": "r"}]}, {"name": "event", "arguments": [{"name": "P", "type": "P"}, {"name": "o_0", "type": "o"}, {"name": "r_0", "type": "r"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [], "optional": false, "repeatable": false}], "infos": [["P", {"id": "P", "type": "P", "name": null, "noun": null, "adj": null, "desc": null, "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["I", {"id": "I", "type": "I", "name": null, "noun": null, "adj": null, "desc": null, "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["r_0", {"id": "r_0", "type": "r", "name": "studio", "noun": "studio", "adj": null, "desc": "You have entered a studio. Not the studio you'd expect. No, this is a studio. I guess you better just go and list everything you see here.\n\n You make out [if c_0 is locked]a locked[else if c_0 is open]an opened[otherwise]a closed[end if] normal looking box in the room.[if c_0 is open and there is something in the c_0] The box contains [a list of things in the c_0].[end if][if c_0 is open and the c_0 contains nothing] The box is empty! What a waste of a day![end if] Oh wow! Is that what I think it is? It is! It's a shelf. The shelf is typical.[if there is something on the s_0] On the shelf you see [a list of things on the s_0].[end if][if there is nothing on the s_0] But the thing hasn't got anything on it. Oh! Why couldn't there just be stuff on it?[end if] You lean against the wall, inadvertently pressing a secret button. The wall opens up to reveal a chair. [if there is something on the s_1]You see [a list of things on the s_1] on the chair.[end if][if there is nothing on the s_1]However, the chair, like an empty chair, has nothing on it.[end if]\n\nYou need an unguarded exit? You should try going west.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_1", {"id": "r_1", "type": "r", "name": "shower", "noun": "shower", "adj": null, "desc": "You find yourself in a shower. A typical kind of place.\n\n You scan the room for a spherical chest, and you find a spherical chest.[if c_1 is open and there is something in the c_1] The spherical chest contains [a list of things in the c_1]. You shudder, but continue examining the room.[end if][if c_1 is open and the c_1 contains nothing] The spherical chest is empty! What a waste of a day![end if] As if things weren't amazing enough already, you can even see a Henderson's limited edition safe.[if c_2 is open and there is something in the c_2] The Henderson's limited edition safe contains [a list of things in the c_2].[end if][if c_2 is open and the c_2 contains nothing] The Henderson's limited edition safe is empty! What a waste of a day![end if]\n\n There is [if d_7 is open]an open[otherwise]a closed[end if] gateway leading north. You don't like doors? Why not try going east, that entranceway is unguarded.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_10", {"id": "r_10", "type": "r", "name": "garage", "noun": "garage", "adj": null, "desc": "You've entered a garage.\n\n You make out a display.[if c_3 is open and there is something in the c_3] The display contains [a list of things in the c_3].[end if][if c_3 is open and the c_3 contains nothing] Empty! What kind of nightmare TextWorld is this?[end if]\n\nThere is an exit to the south. Don't worry, it is unguarded. You don't like doors? Why not try going west, that entranceway is unblocked.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_5", {"id": "r_5", "type": "r", "name": "pantry", "noun": "pantry", "adj": null, "desc": "You arrive in a pantry. A typical kind of place.\n\n\n\n There is [if d_4 is open]an open[otherwise]a closed[end if] cedar hatch leading north. There is an exit to the east. Don't worry, it is unblocked. You don't like doors? Why not try going south, that entranceway is unguarded.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_11", {"id": "r_11", "type": "r", "name": "office", "noun": "office", "adj": null, "desc": "You've just shown up in an office.\n\n You can make out a bookshelf. [if there is something on the s_2]On the bookshelf you see [a list of things on the s_2].[end if][if there is nothing on the s_2]Unfortunately, there isn't a thing on it.[end if]\n\nThere is an exit to the east. Don't worry, it is unguarded. You need an unguarded exit? You should try going north. You need an unguarded exit? You should try going west.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_8", {"id": "r_8", "type": "r", "name": "chamber", "noun": "chamber", "adj": null, "desc": "You are in a chamber. An ordinary kind of place. You start to take note of what's in the room.\n\n\n\nThere is an unblocked exit to the east. There is an exit to the north. Don't worry, it is unblocked. There is an unblocked exit to the west.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_12", {"id": "r_12", "type": "r", "name": "launderette", "noun": "launderette", "adj": null, "desc": "You arrive in a launderette. A normal kind of place. I guess you better just go and list everything you see here.\n\n You make out a trunk. Classic TextWorld.[if c_4 is open and there is something in the c_4] The trunk contains [a list of things in the c_4].[end if][if c_4 is open and the c_4 contains nothing] The trunk is empty! What a waste of a day![end if]\n\nThere is an exit to the north. Don't worry, it is unguarded. You don't like doors? Why not try going west, that entranceway is unguarded.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_13", {"id": "r_13", "type": "r", "name": "study", "noun": "study", "adj": null, "desc": "You find yourself in a study. A typical one.\n\n You can see [if c_5 is locked]a locked[else if c_5 is open]an opened[otherwise]a closed[end if] locker.[if c_5 is open and there is something in the c_5] The locker contains [a list of things in the c_5].[end if][if c_5 is open and the c_5 contains nothing] The locker is empty, what a horrible day![end if] You can see [if c_6 is locked]a locked[else if c_6 is open]an opened[otherwise]a closed[end if] coffer, which looks standard, here.[if c_6 is open and there is something in the c_6] The coffer contains [a list of things in the c_6].[end if][if c_6 is open and the c_6 contains nothing] What a letdown! The coffer is empty![end if]\n\nThere is an exit to the east. Don't worry, it is unblocked. You don't like doors? Why not try going south, that entranceway is unblocked. You need an unblocked exit? You should try going west.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_9", {"id": "r_9", "type": "r", "name": "salon", "noun": "salon", "adj": null, "desc": "You've entered a salon. You start to take note of what's in the room.\n\n\n\nYou don't like doors? Why not try going east, that entranceway is unguarded. You don't like doors? Why not try going north, that entranceway is unguarded. There is an exit to the south. Don't worry, it is unblocked. You don't like doors? Why not try going west, that entranceway is unguarded.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_14", {"id": "r_14", "type": "r", "name": "cookery", "noun": "cookery", "adj": null, "desc": "Look at you, bigshot, walking into a cookery like it isn't some huge deal.\n\n\n\n There is [if d_3 is open]an open[otherwise]a closed[end if] hatch leading east. There is an exit to the south. Don't worry, it is unguarded. There is an exit to the west. Don't worry, it is unguarded.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_15", {"id": "r_15", "type": "r", "name": "cookhouse", "noun": "cookhouse", "adj": null, "desc": "Ah, the cookhouse. This is some kind of cookhouse, really great ordinary vibes in this place, a wonderful ordinary atmosphere. And now, well, you're in it.\n\n You can see a rack. The rack is normal.[if there is something on the s_3] On the rack you can see [a list of things on the s_3].[end if][if there is nothing on the s_3] However, the rack, like an empty rack, has nothing on it. Oh! Why couldn't there just be stuff on it?[end if]\n\n There is [if d_2 is open]an open[otherwise]a closed[end if] passageway leading north. There is [if d_3 is open]an open[otherwise]a closed[end if] hatch leading west.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_17", {"id": "r_17", "type": "r", "name": "workshop", "noun": "workshop", "adj": null, "desc": "This is going to sound unbelievable, but you've just entered a workshop.\n\n\n\n There is [if d_1 is open]an open[otherwise]a closed[end if] gate leading south. There is [if d_0 is open]an open[otherwise]a closed[end if] door leading west.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_18", {"id": "r_18", "type": "r", "name": "dish-pit", "noun": "dish-pit", "adj": null, "desc": "You have come into the most standard of all possible dish-pits. Okay, just remember what you're here to do, and everything will go great.\n\n\n\n There is [if d_0 is open]an open[otherwise]a closed[end if] door leading east. There is an unblocked exit to the north.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_2", {"id": "r_2", "type": "r", "name": "kitchenette", "noun": "kitchenette", "adj": null, "desc": "You arrive in a kitchenette. A typical kind of place.\n\n\n\n There is [if d_7 is open]an open[otherwise]a closed[end if] gateway leading south. There is [if d_6 is open]an open[otherwise]a closed[end if] portal leading west.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_3", {"id": "r_3", "type": "r", "name": "cubicle", "noun": "cubicle", "adj": null, "desc": "You've just shown up in a cubicle.\n\n You hear a noise behind you and spin around, but you can't see anything other than a mantle. [if there is something on the s_4]On the mantle you can make out [a list of things on the s_4].[end if][if there is nothing on the s_4]The mantle appears to be empty.[end if]\n\n There is [if d_6 is open]an open[otherwise]a closed[end if] portal leading east. There is [if d_5 is open]an open[otherwise]a closed[end if] birch portal leading south.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_7", {"id": "r_7", "type": "r", "name": "scullery", "noun": "scullery", "adj": null, "desc": "Well, here we are in a scullery.\n\n [if c_7 is locked]A locked[else if c_7 is open]An open[otherwise]A closed[end if] fridge is in the corner.[if c_7 is open and there is something in the c_7] The fridge contains [a list of things in the c_7]. You shudder, but continue examining the room.[end if][if c_7 is open and the c_7 contains nothing] The fridge is empty! This is the worst thing that could possibly happen, ever![end if]\n\nThere is an exit to the east. Don't worry, it is unblocked. You need an unblocked exit? You should try going north.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_6", {"id": "r_6", "type": "r", "name": "canteen", "noun": "canteen", "adj": null, "desc": "You are in a canteen. It seems to be pretty typical here. You decide to just list off a complete list of everything you see in the room, because hey, why not?\n\n\n\nYou don't like doors? Why not try going east, that entranceway is unblocked. There is an exit to the north. Don't worry, it is unguarded. You don't like doors? Why not try going south, that entranceway is unguarded.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_19", {"id": "r_19", "type": "r", "name": "sauna", "noun": "sauna", "adj": null, "desc": "You find yourself in a sauna. An ordinary one.\n\n Oh wow! Is that what I think it is? It is! It's a table. The table is ordinary.[if there is something on the s_5] On the table you can see [a list of things on the s_5]. You idly wonder how they came up with the name TextWorld for this place. It's pretty fitting.[end if][if there is nothing on the s_5] Looks like someone's already been here and taken everything off it, though. What, you think everything in TextWorld should have stuff on it?[end if] You can make out a bench. I guess it's true what they say, if you're looking for a bench, go to TextWorld. The bench is usual.[if there is something on the s_6] On the bench you make out [a list of things on the s_6]. There's something strange about this thing being here, but you don't have time to worry about that now.[end if][if there is nothing on the s_6] But there isn't a thing on it.[end if]\n\nYou need an unblocked exit? You should try going south.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_16", {"id": "r_16", "type": "r", "name": "laundry place", "noun": "laundry place", "adj": null, "desc": "You arrive in a laundry place. An usual one.\n\n You can make out a TextWorld style box.[if c_8 is open and there is something in the c_8] The TextWorld style box contains [a list of things in the c_8].[end if][if c_8 is open and the c_8 contains nothing] The TextWorld style box is empty, what a horrible day![end if]\n\n There is [if d_1 is open]an open[otherwise]a closed[end if] gate leading north. There is [if d_2 is open]an open[otherwise]a closed[end if] passageway leading south.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_4", {"id": "r_4", "type": "r", "name": "attic", "noun": "attic", "adj": null, "desc": "A well framed board tells you that you are now in the attic. You begin looking for stuff.\n\n\n\n There is [if d_5 is open]an open[otherwise]a closed[end if] birch portal leading north. There is [if d_4 is open]an open[otherwise]a closed[end if] cedar hatch leading south.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["d_7", {"id": "d_7", "type": "d", "name": "gateway", "noun": "gateway", "adj": null, "desc": "The gateway looks imposing. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["d_3", {"id": "d_3", "type": "d", "name": "hatch", "noun": "hatch", "adj": null, "desc": "it is what it is, a hatch [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["d_2", {"id": "d_2", "type": "d", "name": "passageway", "noun": "passageway", "adj": null, "desc": "it is what it is, a passageway [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["d_1", {"id": "d_1", "type": "d", "name": "gate", "noun": "gate", "adj": null, "desc": "it is what it is, a gate [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["d_0", {"id": "d_0", "type": "d", "name": "door", "noun": "door", "adj": null, "desc": "it's a sturdy door [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["d_6", {"id": "d_6", "type": "d", "name": "portal", "noun": "portal", "adj": null, "desc": "it's a robust portal [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["d_5", {"id": "d_5", "type": "d", "name": "birch portal", "noun": "portal", "adj": "birch", "desc": "The birch portal looks sturdy. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["d_4", {"id": "d_4", "type": "d", "name": "cedar hatch", "noun": "hatch", "adj": "cedar", "desc": "The cedar hatch looks noble. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["c_0", {"id": "c_0", "type": "c", "name": "box", "noun": "box", "adj": null, "desc": "The box looks strong, and impossible to destroy. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_1", {"id": "c_1", "type": "c", "name": "spherical chest", "noun": "spherical chest", "adj": null, "desc": "The spherical chest looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["c_2", {"id": "c_2", "type": "c", "name": "Henderson's limited edition safe", "noun": "Henderson's limited edition safe", "adj": null, "desc": "The Henderson's limited edition safe looks strong, and impossible to crack. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["c_3", {"id": "c_3", "type": "c", "name": "display", "noun": "display", "adj": null, "desc": "The display looks strong, and impossible to destroy. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["c_4", {"id": "c_4", "type": "c", "name": "trunk", "noun": "trunk", "adj": null, "desc": "The trunk looks strong, and impossible to destroy. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["c_5", {"id": "c_5", "type": "c", "name": "locker", "noun": "locker", "adj": null, "desc": "The locker looks strong, and impossible to destroy. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_6", {"id": "c_6", "type": "c", "name": "coffer", "noun": "coffer", "adj": null, "desc": "The coffer looks strong, and impossible to destroy. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_7", {"id": "c_7", "type": "c", "name": "fridge", "noun": "fridge", "adj": null, "desc": "The fridge looks strong, and impossible to crack. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_8", {"id": "c_8", "type": "c", "name": "TextWorld style box", "noun": "TextWorld style box", "adj": null, "desc": "The TextWorld style box looks strong, and impossible to destroy. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["f_0", {"id": "f_0", "type": "f", "name": "loaf of bread", "noun": "loaf of bread", "adj": null, "desc": "that's a typical loaf of bread!", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["f_1", {"id": "f_1", "type": "f", "name": "chocolate bar", "noun": "chocolate bar", "adj": null, "desc": "that's a normal chocolate bar!", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["f_2", {"id": "f_2", "type": "f", "name": "gummy bear", "noun": "gummy bear", "adj": null, "desc": "that's an usual gummy bear!", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["f_3", {"id": "f_3", "type": "f", "name": "cookie", "noun": "cookie", "adj": null, "desc": "that's a typical cookie!", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["f_5", {"id": "f_5", "type": "f", "name": "potato", "noun": "potato", "adj": null, "desc": "that's a standard potato!", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["f_6", {"id": "f_6", "type": "f", "name": "peanut", "noun": "peanut", "adj": null, "desc": "The peanut looks tempting.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["k_7", {"id": "k_7", "type": "k", "name": "key", "noun": "key", "adj": null, "desc": "The metal of the key is hammered.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["o_2", {"id": "o_2", "type": "o", "name": "sock", "noun": "sock", "adj": null, "desc": "The sock is unremarkable.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["o_5", {"id": "o_5", "type": "o", "name": "shadfly", "noun": "shadfly", "adj": null, "desc": "The shadfly is expensive looking.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["o_6", {"id": "o_6", "type": "o", "name": "butterfly", "noun": "butterfly", "adj": null, "desc": "The butterfly is dirty.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["o_9", {"id": "o_9", "type": "o", "name": "worm", "noun": "worm", "adj": null, "desc": "The worm would seem to be to fit in here", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["s_0", {"id": "s_0", "type": "s", "name": "shelf", "noun": "shelf", "adj": null, "desc": "The shelf is undependable.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_1", {"id": "s_1", "type": "s", "name": "chair", "noun": "chair", "adj": null, "desc": "The chair is solidly built.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_2", {"id": "s_2", "type": "s", "name": "bookshelf", "noun": "bookshelf", "adj": null, "desc": "The bookshelf is reliable.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_3", {"id": "s_3", "type": "s", "name": "rack", "noun": "rack", "adj": null, "desc": "The rack is reliable.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["s_4", {"id": "s_4", "type": "s", "name": "mantle", "noun": "mantle", "adj": null, "desc": "The mantle is solid.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_5", {"id": "s_5", "type": "s", "name": "table", "noun": "table", "adj": null, "desc": "The table is shaky.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["s_6", {"id": "s_6", "type": "s", "name": "bench", "noun": "bench", "adj": null, "desc": "The bench is solidly built.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["f_4", {"id": "f_4", "type": "f", "name": "stick of butter", "noun": "stick of butter", "adj": null, "desc": "that's a typical stick of butter!", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["f_7", {"id": "f_7", "type": "f", "name": "fondue", "noun": "fondue", "adj": null, "desc": "that's an ordinary fondue!", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["k_0", {"id": "k_0", "type": "k", "name": "keycard", "noun": "keycard", "adj": null, "desc": "The keycard is heavy.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["k_1", {"id": "k_1", "type": "k", "name": "spherical key", "noun": "spherical key", "adj": null, "desc": "The spherical key is heavy.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["k_10", {"id": "k_10", "type": "k", "name": "TextWorld style keycard", "noun": "TextWorld style keycard", "adj": null, "desc": "The TextWorld style keycard is cold to the touch", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["k_2", {"id": "k_2", "type": "k", "name": "Henderson's limited edition key", "noun": "Henderson's limited edition key", "adj": null, "desc": "The Henderson's limited edition key is heavy.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["o_0", {"id": "o_0", "type": "o", "name": "folder", "noun": "folder", "adj": null, "desc": "The folder is expensive looking.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["o_10", {"id": "o_10", "type": "o", "name": "cushion", "noun": "cushion", "adj": null, "desc": "The cushion seems well matched to everything else here", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["o_3", {"id": "o_3", "type": "o", "name": "tv", "noun": "tv", "adj": null, "desc": "The tv would seem to be to fit in here", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["o_4", {"id": "o_4", "type": "o", "name": "nest of bugs", "noun": "nest of bugs", "adj": null, "desc": "The nest of bugs is dirty.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["o_7", {"id": "o_7", "type": "o", "name": "coffee cup", "noun": "coffee cup", "adj": null, "desc": "The coffee cup is dirty.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["o_8", {"id": "o_8", "type": "o", "name": "spork", "noun": "spork", "adj": null, "desc": "The spork is unremarkable.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["o_1", {"id": "o_1", "type": "o", "name": "Advent Calendar", "noun": "Advent Calendar", "adj": null, "desc": "The Advent Calendar appears to be to fit in here", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}]], "KB": {"logic": "# object\ntype o : t {\n    constraints {\n        obj1 :: in(o, I) & in(o, c) -> fail();\n        obj2 :: in(o, I) & on(o, s) -> fail();\n        obj3 :: in(o, I) & at(o, r) -> fail();\n        obj4 :: in(o, c) & on(o, s) -> fail();\n        obj5 :: in(o, c) & at(o, r) -> fail();\n        obj6 :: on(o, s) & at(o, r) -> fail();\n        obj7 :: at(o, r) & at(o, r') -> fail();\n        obj8 :: in(o, c) & in(o, c') -> fail();\n        obj9 :: on(o, s) & on(o, s') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"object-like\";\n            definition :: \"object-like is portable.\";\n        }\n    }\n}\n\n# Inventory\ntype I {\n    predicates {\n        in(o, I);\n    }\n\n    rules {\n        inventory :: at(P, r) -> at(P, r);  # Nothing changes.\n\n        take :: $at(P, r) & at(o, r) -> in(o, I);\n        drop :: $at(P, r) & in(o, I) -> at(o, r);\n\n        take/c :: $at(P, r) & $at(c, r) & $open(c) & in(o, c) -> in(o, I);\n        insert :: $at(P, r) & $at(c, r) & $open(c) & in(o, I) -> in(o, c);\n\n        take/s :: $at(P, r) & $at(s, r) & on(o, s) -> in(o, I);\n        put    :: $at(P, r) & $at(s, r) & in(o, I) -> on(o, s);\n\n        examine/I :: in(o, I) -> in(o, I);  # Nothing changes.\n        examine/s :: at(P, r) & $at(s, r) & $on(o, s) -> at(P, r);  # Nothing changes.\n        examine/c :: at(P, r) & $at(c, r) & $open(c) & $in(o, c) -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        inventory :: inventory;\n\n        take :: drop;\n        take/c :: insert;\n        take/s :: put;\n\n        examine/I :: examine/I;\n        examine/s :: examine/s;\n        examine/c :: examine/c;\n    }\n\n    inform7 {\n        predicates {\n            in(o, I) :: \"The player carries the {o}\";\n        }\n\n        commands {\n            take :: \"take {o}\" :: \"taking the {o}\";\n            drop :: \"drop {o}\" :: \"dropping the {o}\";\n\n            take/c :: \"take {o} from {c}\" :: \"removing the {o} from the {c}\";\n            insert :: \"insert {o} into {c}\" :: \"inserting the {o} into the {c}\";\n\n            take/s :: \"take {o} from {s}\" :: \"removing the {o} from the {s}\";\n            put :: \"put {o} on {s}\" :: \"putting the {o} on the {s}\";\n\n            inventory :: \"inventory\" :: \"taking inventory\";\n\n            examine/I :: \"examine {o}\" :: \"examining the {o}\";\n            examine/s :: \"examine {o}\" :: \"examining the {o}\";\n            examine/c :: \"examine {o}\" :: \"examining the {o}\";\n        }\n    }\n}\n\n# thing\ntype t {\n    rules {\n        examine/t :: at(P, r) & $at(t, r) -> at(P, r);\n    }\n\n    reverse_rules {\n        examine/t :: examine/t;\n    }\n\n    inform7 {\n        type {\n            kind :: \"thing\";\n        }\n\n        commands {\n            examine/t :: \"examine {t}\" :: \"examining the {t}\";\n        }\n    }\n}\n\n# door\ntype d : t {\n    predicates {\n        open(d);\n        closed(d);\n        locked(d);\n\n        link(r, d, r);\n    }\n\n    rules {\n        lock/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & closed(d) -> locked(d);\n        unlock/d :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & locked(d) -> closed(d);\n\n        open/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & closed(d) -> open(d) & free(r, r') & free(r', r);\n        close/d  :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & open(d) & free(r, r') & free(r', r) -> closed(d);\n\n        examine/d :: at(P, r) & $link(r, d, r') -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        lock/d :: unlock/d;\n        open/d :: close/d;\n\n        examine/d :: examine/d;\n    }\n\n    constraints {\n        d1 :: open(d)   & closed(d) -> fail();\n        d2 :: open(d)   & locked(d) -> fail();\n        d3 :: closed(d) & locked(d) -> fail();\n\n        # A door can't be used to link more than two rooms.\n        link1 :: link(r, d, r') & link(r, d, r'') -> fail();\n        link2 :: link(r, d, r') & link(r'', d, r''') -> fail();\n\n        # There's already a door linking two rooms.\n        link3 :: link(r, d, r') & link(r, d', r') -> fail();\n\n        # There cannot be more than four doors in a room.\n        too_many_doors :: link(r, d1: d, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        # There cannot be more than four doors in a room.\n        dr1 :: free(r, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr2 :: free(r, r1: r) & free(r, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr3 :: free(r, r1: r) & free(r, r2: r) & free(r, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr4 :: free(r, r1: r) & free(r, r2: r) & free(r, r3: r) & free(r, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        free1 :: link(r, d, r') & free(r, r') & closed(d) -> fail();\n        free2 :: link(r, d, r') & free(r, r') & locked(d) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"door\";\n            definition :: \"door is openable and lockable.\";\n        }\n\n        predicates {\n            open(d) :: \"The {d} is open\";\n            closed(d) :: \"The {d} is closed\";\n            locked(d) :: \"The {d} is locked\";\n            link(r, d, r') :: \"\";  # No equivalent in Inform7.\n        }\n\n        commands {\n            open/d :: \"open {d}\" :: \"opening {d}\";\n            close/d :: \"close {d}\" :: \"closing {d}\";\n\n            unlock/d :: \"unlock {d} with {k}\" :: \"unlocking {d} with the {k}\";\n            lock/d :: \"lock {d} with {k}\" :: \"locking {d} with the {k}\";\n\n            examine/d :: \"examine {d}\" :: \"examining {d}\";\n        }\n    }\n}\n\n# container\ntype c : t {\n    predicates {\n        open(c);\n        closed(c);\n        locked(c);\n\n        in(o, c);\n    }\n\n    rules {\n        lock/c   :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & closed(c) -> locked(c);\n        unlock/c :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & locked(c) -> closed(c);\n\n        open/c  :: $at(P, r) & $at(c, r) & closed(c) -> open(c);\n        close/c :: $at(P, r) & $at(c, r) & open(c) -> closed(c);\n    }\n\n    reverse_rules {\n        lock/c :: unlock/c;\n        open/c :: close/c;\n    }\n\n    constraints {\n        c1 :: open(c)   & closed(c) -> fail();\n        c2 :: open(c)   & locked(c) -> fail();\n        c3 :: closed(c) & locked(c) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"container\";\n            definition :: \"containers are openable, lockable and fixed in place. containers are usually closed.\";\n        }\n\n        predicates {\n            open(c) :: \"The {c} is open\";\n            closed(c) :: \"The {c} is closed\";\n            locked(c) :: \"The {c} is locked\";\n\n            in(o, c) :: \"The {o} is in the {c}\";\n        }\n\n        commands {\n            open/c :: \"open {c}\" :: \"opening the {c}\";\n            close/c :: \"close {c}\" :: \"closing the {c}\";\n\n            lock/c :: \"lock {c} with {k}\" :: \"locking the {c} with the {k}\";\n            unlock/c :: \"unlock {c} with {k}\" :: \"unlocking the {c} with the {k}\";\n        }\n    }\n}\n\n# key\ntype k : o {\n    predicates {\n        match(k, c);\n        match(k, d);\n    }\n\n    constraints {\n        k1 :: match(k, c) & match(k', c) -> fail();\n        k2 :: match(k, c) & match(k, c') -> fail();\n        k3 :: match(k, d) & match(k', d) -> fail();\n        k4 :: match(k, d) & match(k, d') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"key\";\n        }\n\n        predicates {\n            match(k, c) :: \"The matching key of the {c} is the {k}\";\n            match(k, d) :: \"The matching key of the {d} is the {k}\";\n        }\n    }\n}\n\n# food\ntype f : o {\n    predicates {\n        edible(f);\n        eaten(f);\n    }\n\n    rules {\n        eat :: in(f, I) -> eaten(f);\n    }\n\n    constraints {\n        eaten1 :: eaten(f) & in(f, I) -> fail();\n        eaten2 :: eaten(f) & in(f, c) -> fail();\n        eaten3 :: eaten(f) & on(f, s) -> fail();\n        eaten4 :: eaten(f) & at(f, r) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"food\";\n            definition :: \"food is edible.\";\n        }\n\n        predicates {\n            edible(f) :: \"The {f} is edible\";\n            eaten(f) :: \"The {f} is nowhere\";\n        }\n\n        commands {\n            eat :: \"eat {f}\" :: \"eating the {f}\";\n        }\n    }\n}\n\n# Player\ntype P {\n    rules {\n        look :: at(P, r) -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        look :: look;\n    }\n\n    inform7 {\n        commands {\n            look :: \"look\" :: \"looking\";\n        }\n    }\n}\n\n# supporter\ntype s : t {\n    predicates {\n        on(o, s);\n    }\n\n    inform7 {\n        type {\n            kind :: \"supporter\";\n            definition :: \"supporters are fixed in place.\";\n        }\n\n        predicates {\n            on(o, s) :: \"The {o} is on the {s}\";\n        }\n    }\n}\n\n# room\ntype r {\n    predicates {\n        at(P, r);\n        at(t, r);\n\n        north_of(r, r);\n        west_of(r, r);\n\n        north_of/d(r, d, r);\n        west_of/d(r, d, r);\n\n        free(r, r);\n\n        south_of(r, r') = north_of(r', r);\n        east_of(r, r') = west_of(r', r);\n\n        south_of/d(r, d, r') = north_of/d(r', d, r);\n        east_of/d(r, d, r') = west_of/d(r', d, r);\n    }\n\n    rules {\n        go/north :: at(P, r) & $north_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/south :: at(P, r) & $south_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/east  :: at(P, r) & $east_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/west  :: at(P, r) & $west_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n    }\n\n    reverse_rules {\n        go/north :: go/south;\n        go/west :: go/east;\n    }\n\n    constraints {\n        r1 :: at(P, r) & at(P, r') -> fail();\n        r2 :: at(s, r) & at(s, r') -> fail();\n        r3 :: at(c, r) & at(c, r') -> fail();\n\n        # An exit direction can only lead to one room.\n        nav_rr1 :: north_of(r, r') & north_of(r'', r') -> fail();\n        nav_rr2 :: south_of(r, r') & south_of(r'', r') -> fail();\n        nav_rr3 :: east_of(r, r') & east_of(r'', r') -> fail();\n        nav_rr4 :: west_of(r, r') & west_of(r'', r') -> fail();\n\n        # Two rooms can only be connected once with each other.\n        nav_rrA :: north_of(r, r') & south_of(r, r') -> fail();\n        nav_rrB :: north_of(r, r') & west_of(r, r') -> fail();\n        nav_rrC :: north_of(r, r') & east_of(r, r') -> fail();\n        nav_rrD :: south_of(r, r') & west_of(r, r') -> fail();\n        nav_rrE :: south_of(r, r') & east_of(r, r') -> fail();\n        nav_rrF :: west_of(r, r')  & east_of(r, r') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"room\";\n        }\n\n        predicates {\n            at(P, r) :: \"The player is in {r}\";\n            at(t, r) :: \"The {t} is in {r}\";\n            free(r, r') :: \"\";  # No equivalent in Inform7.\n\n            north_of(r, r') :: \"The {r} is mapped north of {r'}\";\n            south_of(r, r') :: \"The {r} is mapped south of {r'}\";\n            east_of(r, r') :: \"The {r} is mapped east of {r'}\";\n            west_of(r, r') :: \"The {r} is mapped west of {r'}\";\n\n            north_of/d(r, d, r') :: \"South of {r} and north of {r'} is a door called {d}\";\n            south_of/d(r, d, r') :: \"North of {r} and south of {r'} is a door called {d}\";\n            east_of/d(r, d, r') :: \"West of {r} and east of {r'} is a door called {d}\";\n            west_of/d(r, d, r') :: \"East of {r} and west of {r'} is a door called {d}\";\n        }\n\n        commands {\n            go/north :: \"go north\" :: \"going north\";\n            go/south :: \"go south\" :: \"going south\";\n            go/east :: \"go east\" :: \"going east\";\n            go/west :: \"go west\" :: \"going west\";\n        }\n    }\n}\n\n", "text_grammars_path": "/home/lennard/miniconda3/envs/env/lib/python3.12/site-packages/textworld/generator/data/text_grammars"}, "metadata": {"walkthrough": ["go west", "take spherical key from Henderson's limited edition safe", "unlock spherical chest with spherical key", "open spherical chest", "take keycard from spherical chest", "go east", "unlock box with keycard", "open box", "take folder from box", "drop folder"], "uuid": "tw-mlhnSDF0cDcOFZc8Fy-house-GP-N3MBSWvlHy6ohRq0"}, "objective": "It's time to explore the amazing world of TextWorld! First, it would be fantastic if you could make an effort to move west. Next, take the spherical key from the Henderson's limited edition safe within the shower. Having taken the spherical key, make absolutely sure that the spherical chest is unlocked with the spherical key. And then, ensure that the spherical chest is open. After that, pick up the keycard from the spherical chest in the shower. Then, try to venture east. After that, unlock the box. After that, doublecheck that the box is wide open. After that, take the folder from the box in the studio. And then, place the folder on the floor of the studio. Once that's all handled, you can stop!"}