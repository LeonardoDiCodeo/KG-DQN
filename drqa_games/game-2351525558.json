{"version": 1, "world": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_7", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_10", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_10", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_10", "type": "c"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_11", "type": "c"}, {"name": "r_7", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_2", "type": "c"}, {"name": "r_9", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_3", "type": "c"}, {"name": "r_13", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_4", "type": "c"}, {"name": "r_12", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_5", "type": "c"}, {"name": "r_12", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_6", "type": "c"}, {"name": "r_15", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_7", "type": "c"}, {"name": "r_17", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_8", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_9", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "k_3", "type": "k"}, {"name": "r_9", "type": "r"}]}, {"name": "at", "arguments": [{"name": "k_7", "type": "k"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "k_8", "type": "k"}, {"name": "r_7", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_10", "type": "o"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_2", "type": "o"}, {"name": "r_12", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_4", "type": "o"}, {"name": "r_8", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_7", "type": "o"}, {"name": "r_19", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_9", "type": "o"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_0", "type": "s"}, {"name": "r_10", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_1", "type": "s"}, {"name": "r_10", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_2", "type": "s"}, {"name": "r_14", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_3", "type": "s"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_4", "type": "s"}, {"name": "r_17", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_5", "type": "s"}, {"name": "r_18", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_6", "type": "s"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_7", "type": "s"}, {"name": "r_2", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_10", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_8", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_9", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "d_1", "type": "d"}]}, {"name": "east_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_19", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "edible", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_19", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_19", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "in", "arguments": [{"name": "f_0", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "f_1", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "k_4", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "k_6", "type": "k"}, {"name": "c_6", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_1", "type": "o"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "o_5", "type": "o"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "o_6", "type": "o"}, {"name": "c_7", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_8", "type": "o"}, {"name": "I", "type": "I"}]}, {"name": "link", "arguments": [{"name": "r_0", "type": "r"}, {"name": "d_2", "type": "d"}, {"name": "r_12", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_12", "type": "r"}, {"name": "d_2", "type": "d"}, {"name": "r_0", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_15", "type": "r"}, {"name": "d_0", "type": "d"}, {"name": "r_17", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_17", "type": "r"}, {"name": "d_0", "type": "d"}, {"name": "r_15", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_17", "type": "r"}, {"name": "d_1", "type": "d"}, {"name": "r_18", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_18", "type": "r"}, {"name": "d_1", "type": "d"}, {"name": "r_17", "type": "r"}]}, {"name": "locked", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_11", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_4", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_5", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "d_2", "type": "d"}]}, {"name": "match", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_0", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_1", "type": "k"}, {"name": "c_1", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_3", "type": "k"}, {"name": "c_2", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_4", "type": "k"}, {"name": "c_4", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_6", "type": "k"}, {"name": "c_6", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_7", "type": "k"}, {"name": "c_9", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_8", "type": "k"}, {"name": "c_11", "type": "c"}]}, {"name": "north_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "on", "arguments": [{"name": "k_0", "type": "k"}, {"name": "s_1", "type": "s"}]}, {"name": "on", "arguments": [{"name": "k_1", "type": "k"}, {"name": "s_0", "type": "s"}]}, {"name": "on", "arguments": [{"name": "o_3", "type": "o"}, {"name": "s_2", "type": "s"}]}, {"name": "open", "arguments": [{"name": "c_2", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_3", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_6", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_7", "type": "c"}]}, {"name": "open", "arguments": [{"name": "d_0", "type": "d"}]}, {"name": "south_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_19", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_11", "type": "r"}]}], "grammar": {"theme": "house", "names_to_exclude": [], "include_adj": false, "blend_descriptions": false, "ambiguous_instructions": false, "only_last_action": false, "blend_instructions": false, "allowed_variables_numbering": false, "unique_expansion": false}, "quests": [{"desc": "Hey, thanks for coming over to the TextWorld today, there is something I need you to do for me. First of all, you could, like, go east. And then, take a trip east. Once you get through with that, make an attempt to go to the south. And then, move east. Following that, make an attempt to go north. With that accomplished, retrieve the type 4 latchkey from the recliner within the bedchamber. And then, check that the type 4 chest is unlocked with the type 4 latchkey. After unlocking the type 4 chest, ensure that the type 4 chest within the bedchamber is open. Then, retrieve the novel from the type 4 chest inside the bedchamber. Then, put the novel on the mantelpiece. That's it!", "reward": 1, "commands": ["go east", "go east", "go south", "go east", "go north", "take type 4 latchkey from recliner", "unlock type 4 chest with type 4 latchkey", "open type 4 chest", "take novel from type 4 chest", "put novel on mantelpiece"], "win_events": [{"commands": ["go east", "go east", "go south", "go east", "go north", "take type 4 latchkey from recliner", "unlock type 4 chest with type 4 latchkey", "open type 4 chest", "take novel from type 4 chest", "put novel on mantelpiece"], "actions": [{"name": "go/east", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_7", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_5", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_5", "type": "r"}]}], "command_template": "go east", "reverse_name": null, "reverse_command_template": "go west"}, {"name": "go/east", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_5", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_6", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_6", "type": "r"}]}], "command_template": "go east", "reverse_name": null, "reverse_command_template": "go west"}, {"name": "go/south", "preconditions": [{"name": "north_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_6", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_9", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_9", "type": "r"}]}], "command_template": "go south", "reverse_name": null, "reverse_command_template": "go north"}, {"name": "go/east", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_9", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_11", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_11", "type": "r"}]}], "command_template": "go east", "reverse_name": null, "reverse_command_template": "go west"}, {"name": "go/north", "preconditions": [{"name": "north_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_11", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_10", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_10", "type": "r"}]}], "command_template": "go north", "reverse_name": null, "reverse_command_template": "go south"}, {"name": "take/s", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_10", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_1", "type": "s"}, {"name": "r_10", "type": "r"}]}, {"name": "on", "arguments": [{"name": "k_0", "type": "k"}, {"name": "s_1", "type": "s"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_10", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_1", "type": "s"}, {"name": "r_10", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "I", "type": "I"}]}], "command_template": "take {k_0} from {s_1}", "reverse_name": null, "reverse_command_template": "put {k_0} on {s_1}"}, {"name": "unlock/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_10", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_10", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_0", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_0", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_10", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_10", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_0", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_0", "type": "c"}]}], "command_template": "unlock {c_0} with {k_0}", "reverse_name": null, "reverse_command_template": "lock {c_0} with {k_0}"}, {"name": "open/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_10", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_10", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "c_0", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_10", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_10", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}], "command_template": "open {c_0}", "reverse_name": null, "reverse_command_template": "close {c_0}"}, {"name": "take/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_10", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_10", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "c_0", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_10", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_10", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "I", "type": "I"}]}], "command_template": "take {o_0} from {c_0}", "reverse_name": null, "reverse_command_template": "insert {o_0} into {c_0}"}, {"name": "put", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_10", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_0", "type": "s"}, {"name": "r_10", "type": "r"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "I", "type": "I"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_10", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_0", "type": "s"}, {"name": "r_10", "type": "r"}]}, {"name": "on", "arguments": [{"name": "o_0", "type": "o"}, {"name": "s_0", "type": "s"}]}], "command_template": "put {o_0} on {s_0}", "reverse_name": null, "reverse_command_template": "take {o_0} from {s_0}"}], "condition": {"name": "trigger", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_10", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_0", "type": "s"}, {"name": "r_10", "type": "r"}]}, {"name": "on", "arguments": [{"name": "o_0", "type": "o"}, {"name": "s_0", "type": "s"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_10", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_0", "type": "s"}, {"name": "r_10", "type": "r"}]}, {"name": "on", "arguments": [{"name": "o_0", "type": "o"}, {"name": "s_0", "type": "s"}]}, {"name": "event", "arguments": [{"name": "P", "type": "P"}, {"name": "o_0", "type": "o"}, {"name": "r_10", "type": "r"}, {"name": "s_0", "type": "s"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [], "optional": false, "repeatable": false}], "infos": [["P", {"id": "P", "type": "P", "name": null, "noun": null, "adj": null, "desc": null, "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["I", {"id": "I", "type": "I", "name": null, "noun": null, "adj": null, "desc": null, "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["r_10", {"id": "r_10", "type": "r", "name": "bedchamber", "noun": "bedchamber", "adj": null, "desc": "You arrive in a bedchamber. A normal one.\n\n If you haven't noticed it already, there seems to be something there by the wall, it's a type 4 chest. Now that's what I call TextWorld![if c_0 is open and there is something in the c_0] The type 4 chest contains [a list of things in the c_0].[end if][if c_0 is open and the c_0 contains nothing] The type 4 chest is empty, what a horrible day![end if] You can see a box.[if c_1 is open and there is something in the c_1] The box contains [a list of things in the c_1].[end if][if c_1 is open and the c_1 contains nothing] The box is empty, what a horrible day![end if] You can see a mantelpiece. You shudder, but continue examining the mantelpiece. The mantelpiece is usual.[if there is something on the s_0] On the mantelpiece you can make out [a list of things on the s_0].[end if][if there is nothing on the s_0] However, the mantelpiece, like an empty mantelpiece, has nothing on it.[end if] You can see a recliner. [if there is something on the s_1]You see [a list of things on the s_1] on the recliner.[end if][if there is nothing on the s_1]But the thing is empty, unfortunately. It would have been so cool if there was stuff on the recliner.[end if]\n\nYou don't like doors? Why not try going south, that entranceway is unblocked. You need an unblocked exit? You should try going west.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_6", {"id": "r_6", "type": "r", "name": "cookery", "noun": "cookery", "adj": null, "desc": "You're now in the cookery.\n\n\n\nYou need an unguarded exit? You should try going east. There is an exit to the south. Don't worry, it is unblocked. You need an unguarded exit? You should try going west.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_11", {"id": "r_11", "type": "r", "name": "scullery", "noun": "scullery", "adj": null, "desc": "You arrive in a scullery. An ordinary one.\n\n\n\nThere is an unguarded exit to the north. You need an unguarded exit? You should try going west.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_9", {"id": "r_9", "type": "r", "name": "study", "noun": "study", "adj": null, "desc": "You arrive in a study. An ordinary one.\n\n You can see a spherical locker.[if c_2 is open and there is something in the c_2] The spherical locker contains [a list of things in the c_2]. You idly wonder how they came up with the name TextWorld for this place. It's pretty fitting.[end if][if c_2 is open and the c_2 contains nothing] What a letdown! The spherical locker is empty![end if]\n\nThere is an exit to the east. Don't worry, it is unblocked. You don't like doors? Why not try going north, that entranceway is unblocked. You need an unguarded exit? You should try going west.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_13", {"id": "r_13", "type": "r", "name": "shower", "noun": "shower", "adj": null, "desc": "You make another one of your grand eccentric entrances into a shower. You decide to just list off a complete list of everything you see in the room, because hey, why not?\n\n You make out a dresser![if c_3 is open and there is something in the c_3] The dresser contains [a list of things in the c_3].[end if][if c_3 is open and the c_3 contains nothing] Empty! What kind of nightmare TextWorld is this?[end if]\n\nThere is an exit to the west. Don't worry, it is unguarded.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_12", {"id": "r_12", "type": "r", "name": "cubicle", "noun": "cubicle", "adj": null, "desc": "Well, here we are in a cubicle.\n\n You can see a locker.[if c_4 is open and there is something in the c_4] The locker contains [a list of things in the c_4].[end if][if c_4 is open and the c_4 contains nothing] What a letdown! The locker is empty![end if] You see a cabinet.[if c_5 is open and there is something in the c_5] The cabinet contains [a list of things in the c_5]. Hmmm... what else, what else?[end if][if c_5 is open and the c_5 contains nothing] The cabinet is empty! This is the worst thing that could possibly happen, ever![end if]\n\n There is [if d_2 is open]an open[otherwise]a closed[end if] hatch leading north. You don't like doors? Why not try going east, that entranceway is unguarded.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_14", {"id": "r_14", "type": "r", "name": "workshop", "noun": "workshop", "adj": null, "desc": "You arrive in a workshop. An ordinary kind of place.\n\n You can make out a shelf. [if there is something on the s_2]You see [a list of things on the s_2] on the shelf.[end if][if there is nothing on the s_2]But there isn't a thing on it.[end if]\n\nThere is an exit to the south. Don't worry, it is unguarded. You need an unguarded exit? You should try going west.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_3", {"id": "r_3", "type": "r", "name": "closet", "noun": "closet", "adj": null, "desc": "You've entered a closet. You begin to take stock of what's here.\n\n Look over there! a table. [if there is something on the s_3]On the table you see [a list of things on the s_3].[end if][if there is nothing on the s_3]But the thing is empty, unfortunately.[end if]\n\nThere is an exit to the east. Don't worry, it is unblocked. There is an exit to the north. Don't worry, it is unguarded. There is an unguarded exit to the south. You need an unblocked exit? You should try going west.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_15", {"id": "r_15", "type": "r", "name": "steam room", "noun": "steam room", "adj": null, "desc": "You have moved into a steam room. Not the steam room you'd expect. No, this is a steam room. You decide to just list off a complete list of everything you see in the room, because hey, why not?\n\n You can see a type 6 locker.[if c_6 is open and there is something in the c_6] The type 6 locker contains [a list of things in the c_6].[end if][if c_6 is open and the c_6 contains nothing] Empty! What kind of nightmare TextWorld is this?[end if]\n\n There is [if d_0 is open]an open[otherwise]a closed[end if] passageway leading east. There is an exit to the north. Don't worry, it is unguarded. You need an unblocked exit? You should try going south. You don't like doors? Why not try going west, that entranceway is unblocked.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_8", {"id": "r_8", "type": "r", "name": "vault", "noun": "vault", "adj": null, "desc": "You arrive in a vault. An usual kind of place. Okay, just remember what you're here to do, and everything will go great.\n\n\n\nThere is an unblocked exit to the east. You don't like doors? Why not try going north, that entranceway is unblocked. There is an unguarded exit to the west.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_17", {"id": "r_17", "type": "r", "name": "canteen", "noun": "canteen", "adj": null, "desc": "You have entered a canteen. Not the canteen you'd expect. No, this is a canteen. You can barely contain your excitement.\n\n You smell an intriguing smell, and follow it to a case. The light flickers for a second, but nothing else happens.[if c_7 is open and there is something in the c_7] The case contains [a list of things in the c_7]. You check the price tag glued to the case. Thirty bucks?! That's ridiculous! You know what, I've got a person, their roommate works for the mayor, who could get you one of those for 60 bucks![end if][if c_7 is open and the c_7 contains nothing] The case is empty! What a waste of a day![end if] You scan the room for a counter, and you find a counter. Make a note of this, you might have to put stuff on or in it later on. [if there is something on the s_4]You see [a list of things on the s_4] on the counter.[end if][if there is nothing on the s_4]The counter appears to be empty.[end if]\n\n There is [if d_1 is open]an open[otherwise]a closed[end if] door leading south. There is [if d_0 is open]an open[otherwise]a closed[end if] passageway leading west.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_19", {"id": "r_19", "type": "r", "name": "basement", "noun": "basement", "adj": null, "desc": "You are in a basement. An usual kind of place.\n\n\n\nThere is an unblocked exit to the west.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_18", {"id": "r_18", "type": "r", "name": "attic", "noun": "attic", "adj": null, "desc": "This is going to sound unbelievable, but you've just entered an attic.\n\n You see a rack. The rack is usual.[if there is something on the s_5] On the rack you see [a list of things on the s_5].[end if][if there is nothing on the s_5] But oh no! there's nothing on this piece of junk.[end if]\n\n There is [if d_1 is open]an open[otherwise]a closed[end if] door leading north. You need an unblocked exit? You should try going east.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_1", {"id": "r_1", "type": "r", "name": "cookhouse", "noun": "cookhouse", "adj": null, "desc": "You arrive in a cookhouse. A standard kind of place. You can barely contain your excitement.\n\n Look out! It's a- oh, never mind, it's just a chest.[if c_8 is open and there is something in the c_8] The chest contains [a list of things in the c_8]. You idly wonder how they came up with the name TextWorld for this place. It's pretty fitting.[end if][if c_8 is open and the c_8 contains nothing] The chest is empty! This is the worst thing that could possibly happen, ever![end if] You see a gleam over in a corner, where you can see a chair. [if there is something on the s_6]On the chair you can see [a list of things on the s_6].[end if][if there is nothing on the s_6]But the thing is empty, unfortunately.[end if]\n\nYou need an unblocked exit? You should try going east. There is an exit to the north. Don't worry, it is unguarded. There is an unguarded exit to the south.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_4", {"id": "r_4", "type": "r", "name": "pantry", "noun": "pantry", "adj": null, "desc": "You arrive in a pantry. A typical kind of place. You begin to take stock of what's in the room.\n\n You can make out [if c_9 is locked]a locked[else if c_9 is open]an opened[otherwise]a closed[end if] American style safe, which looks normal, in the room.[if c_9 is open and there is something in the c_9] The American style safe contains [a list of things in the c_9].[end if][if c_9 is open and the c_9 contains nothing] The American style safe is empty, what a horrible day![end if]\n\nYou don't like doors? Why not try going east, that entranceway is unblocked. You need an unblocked exit? You should try going north. There is an exit to the south. Don't worry, it is unguarded. You need an unguarded exit? You should try going west.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_2", {"id": "r_2", "type": "r", "name": "office", "noun": "office", "adj": null, "desc": "You are in an office. A typical kind of place.\n\n You rest your hand against a wall, but you miss the wall and fall onto a bookshelf. I guess it's true what they say, if you're looking for a bookshelf, go to TextWorld. [if there is something on the s_7]On the bookshelf you make out [a list of things on the s_7]. Suddenly, you bump your head on the ceiling, but it's not such a bad bump that it's going to prevent you from looking at objects and even things.[end if][if there is nothing on the s_7]But the thing is empty.[end if]\n\nYou don't like doors? Why not try going east, that entranceway is unblocked. There is an unblocked exit to the north. You don't like doors? Why not try going south, that entranceway is unguarded.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_5", {"id": "r_5", "type": "r", "name": "kitchen", "noun": "kitchen", "adj": null, "desc": "This might come as a shock to you, but you've just come into a kitchen. Let's see what's in here.\n\n You hear a noise behind you and spin around, but you can't see anything other than a refrigerator.[if c_10 is open and there is something in the c_10] The refrigerator contains [a list of things in the c_10].[end if][if c_10 is open and the c_10 contains nothing] The refrigerator is empty! What a waste of a day![end if]\n\nThere is an exit to the east. Don't worry, it is unblocked. You need an unblocked exit? You should try going south. There is an unblocked exit to the west.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_7", {"id": "r_7", "type": "r", "name": "launderette", "noun": "launderette", "adj": null, "desc": "You have walked into a launderette. Not the launderette you'd expect. No, this is a launderette. You decide to start listing off everything you see in the room, as if you were in a text adventure.\n\n You can make out a Microsoft style chest.[if c_11 is open and there is something in the c_11] The Microsoft style chest contains [a list of things in the c_11].[end if][if c_11 is open and the c_11 contains nothing] The Microsoft style chest is empty, what a horrible day![end if]\n\nYou need an unguarded exit? You should try going east. You need an unguarded exit? You should try going south.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_0", {"id": "r_0", "type": "r", "name": "sauna", "noun": "sauna", "adj": null, "desc": "You've entered a sauna. The room is well lit.\n\n\n\n There is [if d_2 is open]an open[otherwise]a closed[end if] hatch leading south. There is an exit to the east. Don't worry, it is unblocked. You don't like doors? Why not try going north, that entranceway is unblocked.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_16", {"id": "r_16", "type": "r", "name": "laundromat", "noun": "laundromat", "adj": null, "desc": "You've just walked into a laundromat.\n\n\n\nThere is an unblocked exit to the north.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["d_2", {"id": "d_2", "type": "d", "name": "hatch", "noun": "hatch", "adj": null, "desc": "it's a noble hatch [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["d_0", {"id": "d_0", "type": "d", "name": "passageway", "noun": "passageway", "adj": null, "desc": "it's a well-built passageway [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["d_1", {"id": "d_1", "type": "d", "name": "door", "noun": "door", "adj": null, "desc": "it's a towering door [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_0", {"id": "c_0", "type": "c", "name": "type 4 chest", "noun": "type 4 chest", "adj": null, "desc": "The type 4 chest looks strong, and impossible to crack. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["c_1", {"id": "c_1", "type": "c", "name": "box", "noun": "box", "adj": null, "desc": "The box looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["c_10", {"id": "c_10", "type": "c", "name": "refrigerator", "noun": "refrigerator", "adj": null, "desc": "The refrigerator looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_11", {"id": "c_11", "type": "c", "name": "Microsoft style chest", "noun": "Microsoft style chest", "adj": null, "desc": "The Microsoft style chest looks strong, and impossible to crack. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["c_2", {"id": "c_2", "type": "c", "name": "spherical locker", "noun": "spherical locker", "adj": null, "desc": "The spherical locker looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_3", {"id": "c_3", "type": "c", "name": "dresser", "noun": "dresser", "adj": null, "desc": "The dresser looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["c_4", {"id": "c_4", "type": "c", "name": "locker", "noun": "locker", "adj": null, "desc": "The locker looks strong, and impossible to crack. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_5", {"id": "c_5", "type": "c", "name": "cabinet", "noun": "cabinet", "adj": null, "desc": "The cabinet looks strong, and impossible to destroy. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_6", {"id": "c_6", "type": "c", "name": "type 6 locker", "noun": "type 6 locker", "adj": null, "desc": "The type 6 locker looks strong, and impossible to destroy. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["c_7", {"id": "c_7", "type": "c", "name": "case", "noun": "case", "adj": null, "desc": "The case looks strong, and impossible to destroy. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_8", {"id": "c_8", "type": "c", "name": "chest", "noun": "chest", "adj": null, "desc": "The chest looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_9", {"id": "c_9", "type": "c", "name": "American style safe", "noun": "American style safe", "adj": null, "desc": "The American style safe looks strong, and impossible to crack. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["k_3", {"id": "k_3", "type": "k", "name": "spherical keycard", "noun": "spherical keycard", "adj": null, "desc": "The spherical keycard is weighty.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["k_7", {"id": "k_7", "type": "k", "name": "American style passkey", "noun": "American style passkey", "adj": null, "desc": "The American style passkey looks useful", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["k_8", {"id": "k_8", "type": "k", "name": "Microsoft style key", "noun": "Microsoft style key", "adj": null, "desc": "The metal of the Microsoft style key is rusty.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["o_10", {"id": "o_10", "type": "o", "name": "worm", "noun": "worm", "adj": null, "desc": "The worm is brand new.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["o_2", {"id": "o_2", "type": "o", "name": "mug", "noun": "mug", "adj": null, "desc": "The mug is dirty.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["o_4", {"id": "o_4", "type": "o", "name": "sock", "noun": "sock", "adj": null, "desc": "The sock would seem to be to fit in here", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["o_7", {"id": "o_7", "type": "o", "name": "nest of shrimp", "noun": "nest of shrimp", "adj": null, "desc": "The nest of shrimp appears to be to fit in here", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["o_9", {"id": "o_9", "type": "o", "name": "bug", "noun": "bug", "adj": null, "desc": "The bug seems to fit in here", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["s_0", {"id": "s_0", "type": "s", "name": "mantelpiece", "noun": "mantelpiece", "adj": null, "desc": "The mantelpiece is reliable.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["s_1", {"id": "s_1", "type": "s", "name": "recliner", "noun": "recliner", "adj": null, "desc": "The recliner is shaky.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["s_2", {"id": "s_2", "type": "s", "name": "shelf", "noun": "shelf", "adj": null, "desc": "The shelf is unstable.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_3", {"id": "s_3", "type": "s", "name": "table", "noun": "table", "adj": null, "desc": "The table is unstable.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["s_4", {"id": "s_4", "type": "s", "name": "counter", "noun": "counter", "adj": null, "desc": "The counter is durable.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["s_5", {"id": "s_5", "type": "s", "name": "rack", "noun": "rack", "adj": null, "desc": "The rack is reliable.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["s_6", {"id": "s_6", "type": "s", "name": "chair", "noun": "chair", "adj": null, "desc": "The chair is solid.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["s_7", {"id": "s_7", "type": "s", "name": "bookshelf", "noun": "bookshelf", "adj": null, "desc": "The bookshelf is shaky.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["f_0", {"id": "f_0", "type": "f", "name": "cucumber", "noun": "cucumber", "adj": null, "desc": "You couldn't pay me to eat that normal thing.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["f_1", {"id": "f_1", "type": "f", "name": "stick of butter", "noun": "stick of butter", "adj": null, "desc": "that's an usual stick of butter!", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["k_4", {"id": "k_4", "type": "k", "name": "passkey", "noun": "passkey", "adj": null, "desc": "The metal of the passkey is brushed.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["k_6", {"id": "k_6", "type": "k", "name": "type 6 key", "noun": "type 6 key", "adj": null, "desc": "The type 6 key looks useful", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["o_0", {"id": "o_0", "type": "o", "name": "novel", "noun": "novel", "adj": null, "desc": "The novel is dirty.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["o_1", {"id": "o_1", "type": "o", "name": "fly larva", "noun": "fly larva", "adj": null, "desc": "The fly larva is cheap looking.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["o_5", {"id": "o_5", "type": "o", "name": "binder", "noun": "binder", "adj": null, "desc": "The binder is expensive looking.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["o_6", {"id": "o_6", "type": "o", "name": "coffee cup", "noun": "coffee cup", "adj": null, "desc": "The coffee cup would seem to be to fit in here", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["o_8", {"id": "o_8", "type": "o", "name": "laptop", "noun": "laptop", "adj": null, "desc": "The laptop seems well matched to everything else here", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["k_0", {"id": "k_0", "type": "k", "name": "type 4 latchkey", "noun": "type 4 latchkey", "adj": null, "desc": "The type 4 latchkey is surprisingly heavy.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["k_1", {"id": "k_1", "type": "k", "name": "latchkey", "noun": "latchkey", "adj": null, "desc": "The metal of the latchkey is antiqued.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["o_3", {"id": "o_3", "type": "o", "name": "Quote of the Day Calendar", "noun": "Quote of the Day Calendar", "adj": null, "desc": "The Quote of the Day Calendar looks to fit in here", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}]], "KB": {"logic": "# object\ntype o : t {\n    constraints {\n        obj1 :: in(o, I) & in(o, c) -> fail();\n        obj2 :: in(o, I) & on(o, s) -> fail();\n        obj3 :: in(o, I) & at(o, r) -> fail();\n        obj4 :: in(o, c) & on(o, s) -> fail();\n        obj5 :: in(o, c) & at(o, r) -> fail();\n        obj6 :: on(o, s) & at(o, r) -> fail();\n        obj7 :: at(o, r) & at(o, r') -> fail();\n        obj8 :: in(o, c) & in(o, c') -> fail();\n        obj9 :: on(o, s) & on(o, s') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"object-like\";\n            definition :: \"object-like is portable.\";\n        }\n    }\n}\n\n# Inventory\ntype I {\n    predicates {\n        in(o, I);\n    }\n\n    rules {\n        inventory :: at(P, r) -> at(P, r);  # Nothing changes.\n\n        take :: $at(P, r) & at(o, r) -> in(o, I);\n        drop :: $at(P, r) & in(o, I) -> at(o, r);\n\n        take/c :: $at(P, r) & $at(c, r) & $open(c) & in(o, c) -> in(o, I);\n        insert :: $at(P, r) & $at(c, r) & $open(c) & in(o, I) -> in(o, c);\n\n        take/s :: $at(P, r) & $at(s, r) & on(o, s) -> in(o, I);\n        put    :: $at(P, r) & $at(s, r) & in(o, I) -> on(o, s);\n\n        examine/I :: in(o, I) -> in(o, I);  # Nothing changes.\n        examine/s :: at(P, r) & $at(s, r) & $on(o, s) -> at(P, r);  # Nothing changes.\n        examine/c :: at(P, r) & $at(c, r) & $open(c) & $in(o, c) -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        inventory :: inventory;\n\n        take :: drop;\n        take/c :: insert;\n        take/s :: put;\n\n        examine/I :: examine/I;\n        examine/s :: examine/s;\n        examine/c :: examine/c;\n    }\n\n    inform7 {\n        predicates {\n            in(o, I) :: \"The player carries the {o}\";\n        }\n\n        commands {\n            take :: \"take {o}\" :: \"taking the {o}\";\n            drop :: \"drop {o}\" :: \"dropping the {o}\";\n\n            take/c :: \"take {o} from {c}\" :: \"removing the {o} from the {c}\";\n            insert :: \"insert {o} into {c}\" :: \"inserting the {o} into the {c}\";\n\n            take/s :: \"take {o} from {s}\" :: \"removing the {o} from the {s}\";\n            put :: \"put {o} on {s}\" :: \"putting the {o} on the {s}\";\n\n            inventory :: \"inventory\" :: \"taking inventory\";\n\n            examine/I :: \"examine {o}\" :: \"examining the {o}\";\n            examine/s :: \"examine {o}\" :: \"examining the {o}\";\n            examine/c :: \"examine {o}\" :: \"examining the {o}\";\n        }\n    }\n}\n\n# thing\ntype t {\n    rules {\n        examine/t :: at(P, r) & $at(t, r) -> at(P, r);\n    }\n\n    reverse_rules {\n        examine/t :: examine/t;\n    }\n\n    inform7 {\n        type {\n            kind :: \"thing\";\n        }\n\n        commands {\n            examine/t :: \"examine {t}\" :: \"examining the {t}\";\n        }\n    }\n}\n\n# door\ntype d : t {\n    predicates {\n        open(d);\n        closed(d);\n        locked(d);\n\n        link(r, d, r);\n    }\n\n    rules {\n        lock/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & closed(d) -> locked(d);\n        unlock/d :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & locked(d) -> closed(d);\n\n        open/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & closed(d) -> open(d) & free(r, r') & free(r', r);\n        close/d  :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & open(d) & free(r, r') & free(r', r) -> closed(d);\n\n        examine/d :: at(P, r) & $link(r, d, r') -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        lock/d :: unlock/d;\n        open/d :: close/d;\n\n        examine/d :: examine/d;\n    }\n\n    constraints {\n        d1 :: open(d)   & closed(d) -> fail();\n        d2 :: open(d)   & locked(d) -> fail();\n        d3 :: closed(d) & locked(d) -> fail();\n\n        # A door can't be used to link more than two rooms.\n        link1 :: link(r, d, r') & link(r, d, r'') -> fail();\n        link2 :: link(r, d, r') & link(r'', d, r''') -> fail();\n\n        # There's already a door linking two rooms.\n        link3 :: link(r, d, r') & link(r, d', r') -> fail();\n\n        # There cannot be more than four doors in a room.\n        too_many_doors :: link(r, d1: d, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        # There cannot be more than four doors in a room.\n        dr1 :: free(r, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr2 :: free(r, r1: r) & free(r, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr3 :: free(r, r1: r) & free(r, r2: r) & free(r, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr4 :: free(r, r1: r) & free(r, r2: r) & free(r, r3: r) & free(r, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        free1 :: link(r, d, r') & free(r, r') & closed(d) -> fail();\n        free2 :: link(r, d, r') & free(r, r') & locked(d) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"door\";\n            definition :: \"door is openable and lockable.\";\n        }\n\n        predicates {\n            open(d) :: \"The {d} is open\";\n            closed(d) :: \"The {d} is closed\";\n            locked(d) :: \"The {d} is locked\";\n            link(r, d, r') :: \"\";  # No equivalent in Inform7.\n        }\n\n        commands {\n            open/d :: \"open {d}\" :: \"opening {d}\";\n            close/d :: \"close {d}\" :: \"closing {d}\";\n\n            unlock/d :: \"unlock {d} with {k}\" :: \"unlocking {d} with the {k}\";\n            lock/d :: \"lock {d} with {k}\" :: \"locking {d} with the {k}\";\n\n            examine/d :: \"examine {d}\" :: \"examining {d}\";\n        }\n    }\n}\n\n# container\ntype c : t {\n    predicates {\n        open(c);\n        closed(c);\n        locked(c);\n\n        in(o, c);\n    }\n\n    rules {\n        lock/c   :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & closed(c) -> locked(c);\n        unlock/c :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & locked(c) -> closed(c);\n\n        open/c  :: $at(P, r) & $at(c, r) & closed(c) -> open(c);\n        close/c :: $at(P, r) & $at(c, r) & open(c) -> closed(c);\n    }\n\n    reverse_rules {\n        lock/c :: unlock/c;\n        open/c :: close/c;\n    }\n\n    constraints {\n        c1 :: open(c)   & closed(c) -> fail();\n        c2 :: open(c)   & locked(c) -> fail();\n        c3 :: closed(c) & locked(c) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"container\";\n            definition :: \"containers are openable, lockable and fixed in place. containers are usually closed.\";\n        }\n\n        predicates {\n            open(c) :: \"The {c} is open\";\n            closed(c) :: \"The {c} is closed\";\n            locked(c) :: \"The {c} is locked\";\n\n            in(o, c) :: \"The {o} is in the {c}\";\n        }\n\n        commands {\n            open/c :: \"open {c}\" :: \"opening the {c}\";\n            close/c :: \"close {c}\" :: \"closing the {c}\";\n\n            lock/c :: \"lock {c} with {k}\" :: \"locking the {c} with the {k}\";\n            unlock/c :: \"unlock {c} with {k}\" :: \"unlocking the {c} with the {k}\";\n        }\n    }\n}\n\n# key\ntype k : o {\n    predicates {\n        match(k, c);\n        match(k, d);\n    }\n\n    constraints {\n        k1 :: match(k, c) & match(k', c) -> fail();\n        k2 :: match(k, c) & match(k, c') -> fail();\n        k3 :: match(k, d) & match(k', d) -> fail();\n        k4 :: match(k, d) & match(k, d') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"key\";\n        }\n\n        predicates {\n            match(k, c) :: \"The matching key of the {c} is the {k}\";\n            match(k, d) :: \"The matching key of the {d} is the {k}\";\n        }\n    }\n}\n\n# food\ntype f : o {\n    predicates {\n        edible(f);\n        eaten(f);\n    }\n\n    rules {\n        eat :: in(f, I) -> eaten(f);\n    }\n\n    constraints {\n        eaten1 :: eaten(f) & in(f, I) -> fail();\n        eaten2 :: eaten(f) & in(f, c) -> fail();\n        eaten3 :: eaten(f) & on(f, s) -> fail();\n        eaten4 :: eaten(f) & at(f, r) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"food\";\n            definition :: \"food is edible.\";\n        }\n\n        predicates {\n            edible(f) :: \"The {f} is edible\";\n            eaten(f) :: \"The {f} is nowhere\";\n        }\n\n        commands {\n            eat :: \"eat {f}\" :: \"eating the {f}\";\n        }\n    }\n}\n\n# Player\ntype P {\n    rules {\n        look :: at(P, r) -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        look :: look;\n    }\n\n    inform7 {\n        commands {\n            look :: \"look\" :: \"looking\";\n        }\n    }\n}\n\n# supporter\ntype s : t {\n    predicates {\n        on(o, s);\n    }\n\n    inform7 {\n        type {\n            kind :: \"supporter\";\n            definition :: \"supporters are fixed in place.\";\n        }\n\n        predicates {\n            on(o, s) :: \"The {o} is on the {s}\";\n        }\n    }\n}\n\n# room\ntype r {\n    predicates {\n        at(P, r);\n        at(t, r);\n\n        north_of(r, r);\n        west_of(r, r);\n\n        north_of/d(r, d, r);\n        west_of/d(r, d, r);\n\n        free(r, r);\n\n        south_of(r, r') = north_of(r', r);\n        east_of(r, r') = west_of(r', r);\n\n        south_of/d(r, d, r') = north_of/d(r', d, r);\n        east_of/d(r, d, r') = west_of/d(r', d, r);\n    }\n\n    rules {\n        go/north :: at(P, r) & $north_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/south :: at(P, r) & $south_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/east  :: at(P, r) & $east_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/west  :: at(P, r) & $west_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n    }\n\n    reverse_rules {\n        go/north :: go/south;\n        go/west :: go/east;\n    }\n\n    constraints {\n        r1 :: at(P, r) & at(P, r') -> fail();\n        r2 :: at(s, r) & at(s, r') -> fail();\n        r3 :: at(c, r) & at(c, r') -> fail();\n\n        # An exit direction can only lead to one room.\n        nav_rr1 :: north_of(r, r') & north_of(r'', r') -> fail();\n        nav_rr2 :: south_of(r, r') & south_of(r'', r') -> fail();\n        nav_rr3 :: east_of(r, r') & east_of(r'', r') -> fail();\n        nav_rr4 :: west_of(r, r') & west_of(r'', r') -> fail();\n\n        # Two rooms can only be connected once with each other.\n        nav_rrA :: north_of(r, r') & south_of(r, r') -> fail();\n        nav_rrB :: north_of(r, r') & west_of(r, r') -> fail();\n        nav_rrC :: north_of(r, r') & east_of(r, r') -> fail();\n        nav_rrD :: south_of(r, r') & west_of(r, r') -> fail();\n        nav_rrE :: south_of(r, r') & east_of(r, r') -> fail();\n        nav_rrF :: west_of(r, r')  & east_of(r, r') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"room\";\n        }\n\n        predicates {\n            at(P, r) :: \"The player is in {r}\";\n            at(t, r) :: \"The {t} is in {r}\";\n            free(r, r') :: \"\";  # No equivalent in Inform7.\n\n            north_of(r, r') :: \"The {r} is mapped north of {r'}\";\n            south_of(r, r') :: \"The {r} is mapped south of {r'}\";\n            east_of(r, r') :: \"The {r} is mapped east of {r'}\";\n            west_of(r, r') :: \"The {r} is mapped west of {r'}\";\n\n            north_of/d(r, d, r') :: \"South of {r} and north of {r'} is a door called {d}\";\n            south_of/d(r, d, r') :: \"North of {r} and south of {r'} is a door called {d}\";\n            east_of/d(r, d, r') :: \"West of {r} and east of {r'} is a door called {d}\";\n            west_of/d(r, d, r') :: \"East of {r} and west of {r'} is a door called {d}\";\n        }\n\n        commands {\n            go/north :: \"go north\" :: \"going north\";\n            go/south :: \"go south\" :: \"going south\";\n            go/east :: \"go east\" :: \"going east\";\n            go/west :: \"go west\" :: \"going west\";\n        }\n    }\n}\n\n", "text_grammars_path": "/home/lennard/miniconda3/envs/env/lib/python3.12/site-packages/textworld/generator/data/text_grammars"}, "metadata": {"walkthrough": ["go east", "go east", "go south", "go east", "go north", "take type 4 latchkey from recliner", "unlock type 4 chest with type 4 latchkey", "open type 4 chest", "take novel from type 4 chest", "put novel on mantelpiece"], "uuid": "tw-mlhnSDF0cDcOFZc8Fy-house-GP-NN3C6VPfKxQHxVQ"}, "objective": "I hope you're ready to go into rooms and interact with objects, because you've just entered TextWorld! Here is how to play! First of all, move east. That done, make an attempt to go east. Then, move south. And then, move east. After that, move north. Then, take the type 4 latchkey from the recliner inside the bedchamber. After that, make absolutely sure that the type 4 chest in the bedchamber is unlocked. And then, ensure that the type 4 chest inside the bedchamber is open. Then, retrieve the novel from the type 4 chest inside the bedchamber. If you have taken the novel, place the novel on the mantelpiece inside the bedchamber. And if you do that, you're the winner!"}