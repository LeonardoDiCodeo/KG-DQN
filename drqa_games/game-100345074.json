{"version": 1, "world": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_10", "type": "c"}, {"name": "r_9", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_11", "type": "c"}, {"name": "r_17", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_2", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_3", "type": "c"}, {"name": "r_12", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_4", "type": "c"}, {"name": "r_12", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_5", "type": "c"}, {"name": "r_12", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_6", "type": "c"}, {"name": "r_13", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_7", "type": "c"}, {"name": "r_19", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_8", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_9", "type": "c"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_2", "type": "f"}, {"name": "r_15", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_5", "type": "f"}, {"name": "r_18", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_7", "type": "f"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "k_2", "type": "k"}, {"name": "r_9", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_2", "type": "o"}, {"name": "r_6", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_4", "type": "o"}, {"name": "r_12", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_6", "type": "o"}, {"name": "r_18", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_0", "type": "s"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_1", "type": "s"}, {"name": "r_2", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_2", "type": "s"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_3", "type": "s"}, {"name": "r_6", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_4", "type": "s"}, {"name": "r_13", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_5", "type": "s"}, {"name": "r_16", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_6", "type": "s"}, {"name": "r_10", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "c_10", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "d_0", "type": "d"}]}, {"name": "closed", "arguments": [{"name": "d_1", "type": "d"}]}, {"name": "east_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_19", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "edible", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_3", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_4", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_5", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_6", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_7", "type": "f"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_19", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_19", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "in", "arguments": [{"name": "f_0", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "f_1", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "f_4", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "f_6", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_1", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_5", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_3", "type": "o"}, {"name": "c_3", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_5", "type": "o"}, {"name": "c_6", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_8", "type": "o"}, {"name": "I", "type": "I"}]}, {"name": "link", "arguments": [{"name": "r_1", "type": "r"}, {"name": "d_0", "type": "d"}, {"name": "r_3", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_15", "type": "r"}, {"name": "d_1", "type": "d"}, {"name": "r_16", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_16", "type": "r"}, {"name": "d_1", "type": "d"}, {"name": "r_15", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_3", "type": "r"}, {"name": "d_0", "type": "d"}, {"name": "r_1", "type": "r"}]}, {"name": "locked", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_11", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_2", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_8", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_0", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_1", "type": "k"}, {"name": "c_1", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_2", "type": "k"}, {"name": "c_10", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_5", "type": "k"}, {"name": "c_11", "type": "c"}]}, {"name": "north_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "on", "arguments": [{"name": "f_3", "type": "f"}, {"name": "s_5", "type": "s"}]}, {"name": "on", "arguments": [{"name": "k_1", "type": "k"}, {"name": "s_1", "type": "s"}]}, {"name": "on", "arguments": [{"name": "o_1", "type": "o"}, {"name": "s_3", "type": "s"}]}, {"name": "on", "arguments": [{"name": "o_7", "type": "o"}, {"name": "s_1", "type": "s"}]}, {"name": "open", "arguments": [{"name": "c_3", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_4", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_5", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_6", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_7", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_9", "type": "c"}]}, {"name": "south_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_19", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_8", "type": "r"}]}], "grammar": {"theme": "house", "names_to_exclude": [], "include_adj": false, "blend_descriptions": false, "ambiguous_instructions": false, "only_last_action": false, "blend_instructions": false, "allowed_variables_numbering": false, "unique_expansion": false}, "quests": [{"desc": "Hey, thanks for coming over to the TextWorld today, there is something I need you to do for me. First stop, make an attempt to head east. Following that, retrieve the type 9 keycard from the platter. And then, try to travel west. Next, make absolutely sure that the type 9 locker in the study is unlocked. Then, open the type 9 locker inside the study. And then, take the passkey from the type 9 locker inside the study. With the passkey, make absolutely sure that the box is unlocked. Then, ensure that the box in the study is open. And then, take the fly larva from the box inside the study. If you can get your hands on the fly larva, put the fly larva on the mantelpiece. And if you do that, you're the winner!", "reward": 1, "commands": ["go east", "take type 9 keycard from platter", "go west", "unlock type 9 locker with type 9 keycard", "open type 9 locker", "take passkey from type 9 locker", "unlock box with passkey", "open box", "take fly larva from box", "put fly larva on mantelpiece"], "win_events": [{"commands": ["go east", "take type 9 keycard from platter", "go west", "unlock type 9 locker with type 9 keycard", "open type 9 locker", "take passkey from type 9 locker", "unlock box with passkey", "open box", "take fly larva from box", "put fly larva on mantelpiece"], "actions": [{"name": "go/east", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_2", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}], "command_template": "go east", "reverse_name": null, "reverse_command_template": "go west"}, {"name": "take/s", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_2", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_1", "type": "s"}, {"name": "r_2", "type": "r"}]}, {"name": "on", "arguments": [{"name": "k_1", "type": "k"}, {"name": "s_1", "type": "s"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_2", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_1", "type": "s"}, {"name": "r_2", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_1", "type": "k"}, {"name": "I", "type": "I"}]}], "command_template": "take {k_1} from {s_1}", "reverse_name": null, "reverse_command_template": "put {k_1} on {s_1}"}, {"name": "go/west", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_2", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}], "command_template": "go west", "reverse_name": null, "reverse_command_template": "go east"}, {"name": "unlock/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_1", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_1", "type": "k"}, {"name": "c_1", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_1", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_1", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_1", "type": "k"}, {"name": "c_1", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_1", "type": "c"}]}], "command_template": "unlock {c_1} with {k_1}", "reverse_name": null, "reverse_command_template": "lock {c_1} with {k_1}"}, {"name": "open/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "c_1", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_1", "type": "c"}]}], "command_template": "open {c_1}", "reverse_name": null, "reverse_command_template": "close {c_1}"}, {"name": "take/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_1", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "I", "type": "I"}]}], "command_template": "take {k_0} from {c_1}", "reverse_name": null, "reverse_command_template": "insert {k_0} into {c_1}"}, {"name": "unlock/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_0", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_0", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_0", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_0", "type": "c"}]}], "command_template": "unlock {c_0} with {k_0}", "reverse_name": null, "reverse_command_template": "lock {c_0} with {k_0}"}, {"name": "open/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "c_0", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}], "command_template": "open {c_0}", "reverse_name": null, "reverse_command_template": "close {c_0}"}, {"name": "take/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "c_0", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "I", "type": "I"}]}], "command_template": "take {o_0} from {c_0}", "reverse_name": null, "reverse_command_template": "insert {o_0} into {c_0}"}, {"name": "put", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_0", "type": "s"}, {"name": "r_1", "type": "r"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "I", "type": "I"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_0", "type": "s"}, {"name": "r_1", "type": "r"}]}, {"name": "on", "arguments": [{"name": "o_0", "type": "o"}, {"name": "s_0", "type": "s"}]}], "command_template": "put {o_0} on {s_0}", "reverse_name": null, "reverse_command_template": "take {o_0} from {s_0}"}], "condition": {"name": "trigger", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_0", "type": "s"}, {"name": "r_1", "type": "r"}]}, {"name": "on", "arguments": [{"name": "o_0", "type": "o"}, {"name": "s_0", "type": "s"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_0", "type": "s"}, {"name": "r_1", "type": "r"}]}, {"name": "on", "arguments": [{"name": "o_0", "type": "o"}, {"name": "s_0", "type": "s"}]}, {"name": "event", "arguments": [{"name": "P", "type": "P"}, {"name": "o_0", "type": "o"}, {"name": "r_1", "type": "r"}, {"name": "s_0", "type": "s"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [], "optional": false, "repeatable": false}], "infos": [["P", {"id": "P", "type": "P", "name": null, "noun": null, "adj": null, "desc": null, "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["I", {"id": "I", "type": "I", "name": null, "noun": null, "adj": null, "desc": null, "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["r_1", {"id": "r_1", "type": "r", "name": "study", "noun": "study", "adj": null, "desc": "You are in a study. An usual kind of place.\n\n [if c_0 is locked]A locked[else if c_0 is open]An open[otherwise]A closed[end if] box, which looks usual, is right there by you.[if c_0 is open and there is something in the c_0] The box contains [a list of things in the c_0].[end if][if c_0 is open and the c_0 contains nothing] The box is empty! What a waste of a day![end if] You make out [if c_1 is locked]a locked[else if c_1 is open]an opened[otherwise]a closed[end if] type 9 locker.[if c_1 is open and there is something in the c_1] The type 9 locker contains [a list of things in the c_1].[end if][if c_1 is open and the c_1 contains nothing] The type 9 locker is empty, what a horrible day![end if] Were you looking for a locker? Because look over there, it's a locker.[if c_2 is open and there is something in the c_2] The locker contains [a list of things in the c_2]![end if][if c_2 is open and the c_2 contains nothing] The locker is empty, what a horrible day![end if] As if things weren't amazing enough already, you can even see a mantelpiece. The mantelpiece is standard.[if there is something on the s_0] On the mantelpiece you can see [a list of things on the s_0].[end if][if there is nothing on the s_0] Unfortunately, there isn't a thing on it. Hopefully, this discovery doesn't ruin your TextWorld experience![end if] You see a mantle. [if there is something on the s_2]On the mantle you see [a list of things on the s_2].[end if][if there is nothing on the s_2]Looks like someone's already been here and taken everything off it, though.[end if]\n\n There is [if d_0 is open]an open[otherwise]a closed[end if] portal leading north. You don't like doors? Why not try going east, that entranceway is unblocked. You need an unblocked exit? You should try going west.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_0", {"id": "r_0", "type": "r", "name": "canteen", "noun": "canteen", "adj": null, "desc": "Look at you, bigshot, walking into a canteen like it isn't some huge deal.\n\n\n\nYou don't like doors? Why not try going east, that entranceway is unguarded.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_11", {"id": "r_11", "type": "r", "name": "bedroom", "noun": "bedroom", "adj": null, "desc": "Fancy seeing you here. Here, by the way, being the bedroom.\n\n\n\nThere is an exit to the north. Don't worry, it is unblocked. There is an exit to the south. Don't worry, it is unguarded. There is an exit to the west. Don't worry, it is unblocked.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_6", {"id": "r_6", "type": "r", "name": "kitchen", "noun": "kitchen", "adj": null, "desc": "You've just shown up in a kitchen.\n\n You make out a bowl. [if there is something on the s_3]You see [a list of things on the s_3] on the bowl.[end if][if there is nothing on the s_3]But there isn't a thing on it.[end if]\n\nYou don't like doors? Why not try going east, that entranceway is unblocked. You need an unguarded exit? You should try going north. You don't like doors? Why not try going west, that entranceway is unblocked.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_12", {"id": "r_12", "type": "r", "name": "bedchamber", "noun": "bedchamber", "adj": null, "desc": "You find yourself in a bedchamber. A normal one. You try to gain information on your surroundings by using a technique you call 'looking.'\n\n You make out [if c_3 is locked]a locked[else if c_3 is open]an opened[otherwise]a closed[end if] trunk in the corner.[if c_3 is open and there is something in the c_3] The trunk contains [a list of things in the c_3].[end if][if c_3 is open and the c_3 contains nothing] What a letdown! The trunk is empty![end if] Hey, want to see a suitcase? Look over there, a suitcase. Huh, weird.[if c_4 is open and there is something in the c_4] The suitcase contains [a list of things in the c_4].[end if][if c_4 is open and the c_4 contains nothing] The suitcase is empty, what a horrible day![end if] You can make out a coffer.[if c_5 is open and there is something in the c_5] The coffer contains [a list of things in the c_5]. Now that's what I call TextWorld![end if][if c_5 is open and the c_5 contains nothing] The coffer is empty! This is the worst thing that could possibly happen, ever![end if]\n\nThere is an exit to the north. Don't worry, it is unblocked. There is an unblocked exit to the west.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_3", {"id": "r_3", "type": "r", "name": "office", "noun": "office", "adj": null, "desc": "Look at that board! What does it say? It says Welcome to the office? Well that's cool. You try to gain information on your surroundings by using a technique you call 'looking.'\n\n\n\n There is [if d_0 is open]an open[otherwise]a closed[end if] portal leading south. There is an exit to the east. Don't worry, it is unguarded. You don't like doors? Why not try going west, that entranceway is unguarded.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_13", {"id": "r_13", "type": "r", "name": "playroom", "noun": "playroom", "adj": null, "desc": "Ah, the playroom. This is some kind of playroom, really great normal vibes in this place, a wonderful normal atmosphere. And now, well, you're in it.\n\n You can see [if c_6 is locked]a locked[else if c_6 is open]an opened[otherwise]a closed[end if] ordinary looking portmanteau in the room.[if c_6 is open and there is something in the c_6] The portmanteau contains [a list of things in the c_6]![end if][if c_6 is open and the c_6 contains nothing] The portmanteau is empty, what a horrible day![end if] You make out a bar. [if there is something on the s_4]You see [a list of things on the s_4] on the bar.[end if][if there is nothing on the s_4]But the thing is empty.[end if]\n\nThere is an exit to the east. Don't worry, it is unblocked. There is an unguarded exit to the north. There is an exit to the south. Don't worry, it is unblocked. There is an exit to the west. Don't worry, it is unblocked.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_7", {"id": "r_7", "type": "r", "name": "spare room", "noun": "spare room", "adj": null, "desc": "You are in a spare room. A standard one. The room is well lit.\n\n\n\nYou don't like doors? Why not try going east, that entranceway is unblocked. You don't like doors? Why not try going north, that entranceway is unblocked. There is an exit to the south. Don't worry, it is unblocked. You need an unguarded exit? You should try going west.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_14", {"id": "r_14", "type": "r", "name": "cookery", "noun": "cookery", "adj": null, "desc": "You've entered a cookery.\n\n\n\nYou need an unblocked exit? You should try going east. There is an unguarded exit to the south. You don't like doors? Why not try going west, that entranceway is unguarded.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_8", {"id": "r_8", "type": "r", "name": "chamber", "noun": "chamber", "adj": null, "desc": "You are in a chamber. An ordinary one. You start to take note of what's in the room.\n\n\n\nYou don't like doors? Why not try going east, that entranceway is unblocked. You don't like doors? Why not try going south, that entranceway is unblocked. You need an unblocked exit? You should try going west.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_15", {"id": "r_15", "type": "r", "name": "workshop", "noun": "workshop", "adj": null, "desc": "You are in a workshop. A standard kind of place. The room seems oddly familiar, as though it were only superficially different from the other rooms in the building.\n\n\n\n There is [if d_1 is open]an open[otherwise]a closed[end if] gate leading south. You don't like doors? Why not try going east, that entranceway is unblocked. You don't like doors? Why not try going west, that entranceway is unblocked.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_16", {"id": "r_16", "type": "r", "name": "parlor", "noun": "parlor", "adj": null, "desc": "Well how about that, you are in the place we're calling the parlor.\n\n You bend down to tie your shoe. When you stand up, you notice a shelf. [if there is something on the s_5]You see [a list of things on the s_5] on the shelf. Huh, weird.[end if][if there is nothing on the s_5]But the thing is empty. Hopefully, this discovery doesn't ruin your TextWorld experience![end if]\n\n There is [if d_1 is open]an open[otherwise]a closed[end if] gate leading north. You need an unguarded exit? You should try going east. You don't like doors? Why not try going south, that entranceway is unblocked. You need an unblocked exit? You should try going west.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_18", {"id": "r_18", "type": "r", "name": "pantry", "noun": "pantry", "adj": null, "desc": "You are in a pantry.\n\n\n\nYou don't like doors? Why not try going west, that entranceway is unguarded.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_19", {"id": "r_19", "type": "r", "name": "studio", "noun": "studio", "adj": null, "desc": "You've just shown up in a studio.\n\n You can make out a cabinet.[if c_7 is open and there is something in the c_7] The cabinet contains [a list of things in the c_7].[end if][if c_7 is open and the c_7 contains nothing] Empty! What kind of nightmare TextWorld is this?[end if]\n\nThere is an exit to the west. Don't worry, it is unblocked.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_2", {"id": "r_2", "type": "r", "name": "cookhouse", "noun": "cookhouse", "adj": null, "desc": "You find yourself in a cookhouse. A standard kind of place. You can barely contain your excitement.\n\n You see a platter. [if there is something on the s_1]On the platter you see [a list of things on the s_1].[end if][if there is nothing on the s_1]However, the platter, like an empty platter, has nothing on it.[end if]\n\nYou need an unguarded exit? You should try going west.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_4", {"id": "r_4", "type": "r", "name": "recreation zone", "noun": "recreation zone", "adj": null, "desc": "You arrive in a recreation zone. A typical kind of place.\n\n You can make out [if c_8 is locked]a locked[else if c_8 is open]an opened[otherwise]a closed[end if] dresser.[if c_8 is open and there is something in the c_8] The dresser contains [a list of things in the c_8].[end if][if c_8 is open and the c_8 contains nothing] Empty! What kind of nightmare TextWorld is this?[end if]\n\nYou need an unguarded exit? You should try going east. There is an unblocked exit to the north.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_5", {"id": "r_5", "type": "r", "name": "lounge", "noun": "lounge", "adj": null, "desc": "You're now in a lounge. I guess you better just go and list everything you see here.\n\n You can make out [if c_9 is locked]a locked[else if c_9 is open]an opened[otherwise]a closed[end if] basket in the corner.[if c_9 is open and there is something in the c_9] The basket contains [a list of things in the c_9].[end if][if c_9 is open and the c_9 contains nothing] The basket is empty! What a waste of a day![end if]\n\nYou don't like doors? Why not try going east, that entranceway is unguarded. You don't like doors? Why not try going north, that entranceway is unblocked. You don't like doors? Why not try going south, that entranceway is unblocked.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_10", {"id": "r_10", "type": "r", "name": "launderette", "noun": "launderette", "adj": null, "desc": "You've just shown up in a launderette.\n\n You can see a counter. You wonder idly who left that here. [if there is something on the s_6]On the counter you can make out [a list of things on the s_6].[end if][if there is nothing on the s_6]Looks like someone's already been here and taken everything off it, though. What, you think everything in TextWorld should have stuff on it?[end if]\n\nYou need an unguarded exit? You should try going east. You need an unblocked exit? You should try going north. You need an unblocked exit? You should try going south.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_9", {"id": "r_9", "type": "r", "name": "basement", "noun": "basement", "adj": null, "desc": "You arrive in a basement.\n\n You see [if c_10 is locked]a locked[else if c_10 is open]an opened[otherwise]a closed[end if] chest right there by you.[if c_10 is open and there is something in the c_10] The chest contains [a list of things in the c_10].[end if][if c_10 is open and the c_10 contains nothing] Empty! What kind of nightmare TextWorld is this?[end if]\n\nYou don't like doors? Why not try going east, that entranceway is unblocked. There is an exit to the south. Don't worry, it is unblocked.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_17", {"id": "r_17", "type": "r", "name": "shower", "noun": "shower", "adj": null, "desc": "You're now in the shower. Let's see what's in here.\n\n You can see a safe. You can't wait to tell the folks at home about this![if c_11 is open and there is something in the c_11] The safe contains [a list of things in the c_11]. Is this it? Is this what you came to TextWorld to see? a safe?[end if][if c_11 is open and the c_11 contains nothing] The safe is empty! This is the worst thing that could possibly happen, ever![end if]\n\nYou don't like doors? Why not try going north, that entranceway is unguarded.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["d_0", {"id": "d_0", "type": "d", "name": "portal", "noun": "portal", "adj": null, "desc": "it is what it is, a portal [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["d_1", {"id": "d_1", "type": "d", "name": "gate", "noun": "gate", "adj": null, "desc": "it's a towering gate [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_0", {"id": "c_0", "type": "c", "name": "box", "noun": "box", "adj": null, "desc": "The box looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_1", {"id": "c_1", "type": "c", "name": "type 9 locker", "noun": "type 9 locker", "adj": null, "desc": "The type 9 locker looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_10", {"id": "c_10", "type": "c", "name": "chest", "noun": "chest", "adj": null, "desc": "The chest looks strong, and impossible to destroy. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["c_11", {"id": "c_11", "type": "c", "name": "safe", "noun": "safe", "adj": null, "desc": "The safe looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["c_2", {"id": "c_2", "type": "c", "name": "locker", "noun": "locker", "adj": null, "desc": "The locker looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_3", {"id": "c_3", "type": "c", "name": "trunk", "noun": "trunk", "adj": null, "desc": "The trunk looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["c_4", {"id": "c_4", "type": "c", "name": "suitcase", "noun": "suitcase", "adj": null, "desc": "The suitcase looks strong, and impossible to destroy. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["c_5", {"id": "c_5", "type": "c", "name": "coffer", "noun": "coffer", "adj": null, "desc": "The coffer looks strong, and impossible to destroy. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["c_6", {"id": "c_6", "type": "c", "name": "portmanteau", "noun": "portmanteau", "adj": null, "desc": "The portmanteau looks strong, and impossible to destroy. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["c_7", {"id": "c_7", "type": "c", "name": "cabinet", "noun": "cabinet", "adj": null, "desc": "The cabinet looks strong, and impossible to destroy. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_8", {"id": "c_8", "type": "c", "name": "dresser", "noun": "dresser", "adj": null, "desc": "The dresser looks strong, and impossible to crack. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["c_9", {"id": "c_9", "type": "c", "name": "basket", "noun": "basket", "adj": null, "desc": "The basket looks strong, and impossible to break. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["f_2", {"id": "f_2", "type": "f", "name": "sandwich", "noun": "sandwich", "adj": null, "desc": "The sandwich looks appealing.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["f_5", {"id": "f_5", "type": "f", "name": "gummy bear", "noun": "gummy bear", "adj": null, "desc": "You couldn't pay me to eat that ordinary thing.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["f_7", {"id": "f_7", "type": "f", "name": "fondue", "noun": "fondue", "adj": null, "desc": "that's an usual fondue!", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["k_2", {"id": "k_2", "type": "k", "name": "keycard", "noun": "keycard", "adj": null, "desc": "The metal of the keycard is polished.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["o_2", {"id": "o_2", "type": "o", "name": "spoon", "noun": "spoon", "adj": null, "desc": "The spoon is well-used.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["o_4", {"id": "o_4", "type": "o", "name": "nest of toads", "noun": "nest of toads", "adj": null, "desc": "The nest of toads appears to be out of place here", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["o_6", {"id": "o_6", "type": "o", "name": "shadfly", "noun": "shadfly", "adj": null, "desc": "The shadfly appears out of place here", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["s_0", {"id": "s_0", "type": "s", "name": "mantelpiece", "noun": "mantelpiece", "adj": null, "desc": "The mantelpiece is reliable.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_1", {"id": "s_1", "type": "s", "name": "platter", "noun": "platter", "adj": null, "desc": "The platter is balanced.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["s_2", {"id": "s_2", "type": "s", "name": "mantle", "noun": "mantle", "adj": null, "desc": "The mantle is undependable.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_3", {"id": "s_3", "type": "s", "name": "bowl", "noun": "bowl", "adj": null, "desc": "The bowl is durable.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["s_4", {"id": "s_4", "type": "s", "name": "bar", "noun": "bar", "adj": null, "desc": "The bar is stable.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["s_5", {"id": "s_5", "type": "s", "name": "shelf", "noun": "shelf", "adj": null, "desc": "The shelf is solidly built.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["s_6", {"id": "s_6", "type": "s", "name": "counter", "noun": "counter", "adj": null, "desc": "The counter is undependable.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["f_0", {"id": "f_0", "type": "f", "name": "candy bar", "noun": "candy bar", "adj": null, "desc": "that's a typical candy bar!", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["f_1", {"id": "f_1", "type": "f", "name": "peanut", "noun": "peanut", "adj": null, "desc": "The peanut looks savory.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["f_3", {"id": "f_3", "type": "f", "name": "pear", "noun": "pear", "adj": null, "desc": "You couldn't pay me to eat that usual thing.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["f_4", {"id": "f_4", "type": "f", "name": "loaf of bread", "noun": "loaf of bread", "adj": null, "desc": "You couldn't pay me to eat that normal thing.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["f_6", {"id": "f_6", "type": "f", "name": "cashew", "noun": "cashew", "adj": null, "desc": "that's a normal cashew!", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["k_0", {"id": "k_0", "type": "k", "name": "passkey", "noun": "passkey", "adj": null, "desc": "The passkey looks useful", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["k_5", {"id": "k_5", "type": "k", "name": "key", "noun": "key", "adj": null, "desc": "The key is weighty.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["o_0", {"id": "o_0", "type": "o", "name": "fly larva", "noun": "fly larva", "adj": null, "desc": "The fly larva seems to fit in here", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["o_3", {"id": "o_3", "type": "o", "name": "tablet", "noun": "tablet", "adj": null, "desc": "The tablet is antiquated.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["o_5", {"id": "o_5", "type": "o", "name": "dvd", "noun": "dvd", "adj": null, "desc": "The dvd looks out of place here", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["o_8", {"id": "o_8", "type": "o", "name": "pair of headphones", "noun": "pair of headphones", "adj": null, "desc": "The pair of headphones is dirty.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["k_1", {"id": "k_1", "type": "k", "name": "type 9 keycard", "noun": "type 9 keycard", "adj": null, "desc": "The metal of the type 9 keycard is brushed.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["o_1", {"id": "o_1", "type": "o", "name": "insect", "noun": "insect", "adj": null, "desc": "The insect is dirty.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["o_7", {"id": "o_7", "type": "o", "name": "ladle", "noun": "ladle", "adj": null, "desc": "The ladle appears to be out of place here", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}]], "KB": {"logic": "# object\ntype o : t {\n    constraints {\n        obj1 :: in(o, I) & in(o, c) -> fail();\n        obj2 :: in(o, I) & on(o, s) -> fail();\n        obj3 :: in(o, I) & at(o, r) -> fail();\n        obj4 :: in(o, c) & on(o, s) -> fail();\n        obj5 :: in(o, c) & at(o, r) -> fail();\n        obj6 :: on(o, s) & at(o, r) -> fail();\n        obj7 :: at(o, r) & at(o, r') -> fail();\n        obj8 :: in(o, c) & in(o, c') -> fail();\n        obj9 :: on(o, s) & on(o, s') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"object-like\";\n            definition :: \"object-like is portable.\";\n        }\n    }\n}\n\n# Inventory\ntype I {\n    predicates {\n        in(o, I);\n    }\n\n    rules {\n        inventory :: at(P, r) -> at(P, r);  # Nothing changes.\n\n        take :: $at(P, r) & at(o, r) -> in(o, I);\n        drop :: $at(P, r) & in(o, I) -> at(o, r);\n\n        take/c :: $at(P, r) & $at(c, r) & $open(c) & in(o, c) -> in(o, I);\n        insert :: $at(P, r) & $at(c, r) & $open(c) & in(o, I) -> in(o, c);\n\n        take/s :: $at(P, r) & $at(s, r) & on(o, s) -> in(o, I);\n        put    :: $at(P, r) & $at(s, r) & in(o, I) -> on(o, s);\n\n        examine/I :: in(o, I) -> in(o, I);  # Nothing changes.\n        examine/s :: at(P, r) & $at(s, r) & $on(o, s) -> at(P, r);  # Nothing changes.\n        examine/c :: at(P, r) & $at(c, r) & $open(c) & $in(o, c) -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        inventory :: inventory;\n\n        take :: drop;\n        take/c :: insert;\n        take/s :: put;\n\n        examine/I :: examine/I;\n        examine/s :: examine/s;\n        examine/c :: examine/c;\n    }\n\n    inform7 {\n        predicates {\n            in(o, I) :: \"The player carries the {o}\";\n        }\n\n        commands {\n            take :: \"take {o}\" :: \"taking the {o}\";\n            drop :: \"drop {o}\" :: \"dropping the {o}\";\n\n            take/c :: \"take {o} from {c}\" :: \"removing the {o} from the {c}\";\n            insert :: \"insert {o} into {c}\" :: \"inserting the {o} into the {c}\";\n\n            take/s :: \"take {o} from {s}\" :: \"removing the {o} from the {s}\";\n            put :: \"put {o} on {s}\" :: \"putting the {o} on the {s}\";\n\n            inventory :: \"inventory\" :: \"taking inventory\";\n\n            examine/I :: \"examine {o}\" :: \"examining the {o}\";\n            examine/s :: \"examine {o}\" :: \"examining the {o}\";\n            examine/c :: \"examine {o}\" :: \"examining the {o}\";\n        }\n    }\n}\n\n# thing\ntype t {\n    rules {\n        examine/t :: at(P, r) & $at(t, r) -> at(P, r);\n    }\n\n    reverse_rules {\n        examine/t :: examine/t;\n    }\n\n    inform7 {\n        type {\n            kind :: \"thing\";\n        }\n\n        commands {\n            examine/t :: \"examine {t}\" :: \"examining the {t}\";\n        }\n    }\n}\n\n# door\ntype d : t {\n    predicates {\n        open(d);\n        closed(d);\n        locked(d);\n\n        link(r, d, r);\n    }\n\n    rules {\n        lock/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & closed(d) -> locked(d);\n        unlock/d :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & locked(d) -> closed(d);\n\n        open/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & closed(d) -> open(d) & free(r, r') & free(r', r);\n        close/d  :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & open(d) & free(r, r') & free(r', r) -> closed(d);\n\n        examine/d :: at(P, r) & $link(r, d, r') -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        lock/d :: unlock/d;\n        open/d :: close/d;\n\n        examine/d :: examine/d;\n    }\n\n    constraints {\n        d1 :: open(d)   & closed(d) -> fail();\n        d2 :: open(d)   & locked(d) -> fail();\n        d3 :: closed(d) & locked(d) -> fail();\n\n        # A door can't be used to link more than two rooms.\n        link1 :: link(r, d, r') & link(r, d, r'') -> fail();\n        link2 :: link(r, d, r') & link(r'', d, r''') -> fail();\n\n        # There's already a door linking two rooms.\n        link3 :: link(r, d, r') & link(r, d', r') -> fail();\n\n        # There cannot be more than four doors in a room.\n        too_many_doors :: link(r, d1: d, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        # There cannot be more than four doors in a room.\n        dr1 :: free(r, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr2 :: free(r, r1: r) & free(r, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr3 :: free(r, r1: r) & free(r, r2: r) & free(r, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr4 :: free(r, r1: r) & free(r, r2: r) & free(r, r3: r) & free(r, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        free1 :: link(r, d, r') & free(r, r') & closed(d) -> fail();\n        free2 :: link(r, d, r') & free(r, r') & locked(d) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"door\";\n            definition :: \"door is openable and lockable.\";\n        }\n\n        predicates {\n            open(d) :: \"The {d} is open\";\n            closed(d) :: \"The {d} is closed\";\n            locked(d) :: \"The {d} is locked\";\n            link(r, d, r') :: \"\";  # No equivalent in Inform7.\n        }\n\n        commands {\n            open/d :: \"open {d}\" :: \"opening {d}\";\n            close/d :: \"close {d}\" :: \"closing {d}\";\n\n            unlock/d :: \"unlock {d} with {k}\" :: \"unlocking {d} with the {k}\";\n            lock/d :: \"lock {d} with {k}\" :: \"locking {d} with the {k}\";\n\n            examine/d :: \"examine {d}\" :: \"examining {d}\";\n        }\n    }\n}\n\n# container\ntype c : t {\n    predicates {\n        open(c);\n        closed(c);\n        locked(c);\n\n        in(o, c);\n    }\n\n    rules {\n        lock/c   :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & closed(c) -> locked(c);\n        unlock/c :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & locked(c) -> closed(c);\n\n        open/c  :: $at(P, r) & $at(c, r) & closed(c) -> open(c);\n        close/c :: $at(P, r) & $at(c, r) & open(c) -> closed(c);\n    }\n\n    reverse_rules {\n        lock/c :: unlock/c;\n        open/c :: close/c;\n    }\n\n    constraints {\n        c1 :: open(c)   & closed(c) -> fail();\n        c2 :: open(c)   & locked(c) -> fail();\n        c3 :: closed(c) & locked(c) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"container\";\n            definition :: \"containers are openable, lockable and fixed in place. containers are usually closed.\";\n        }\n\n        predicates {\n            open(c) :: \"The {c} is open\";\n            closed(c) :: \"The {c} is closed\";\n            locked(c) :: \"The {c} is locked\";\n\n            in(o, c) :: \"The {o} is in the {c}\";\n        }\n\n        commands {\n            open/c :: \"open {c}\" :: \"opening the {c}\";\n            close/c :: \"close {c}\" :: \"closing the {c}\";\n\n            lock/c :: \"lock {c} with {k}\" :: \"locking the {c} with the {k}\";\n            unlock/c :: \"unlock {c} with {k}\" :: \"unlocking the {c} with the {k}\";\n        }\n    }\n}\n\n# key\ntype k : o {\n    predicates {\n        match(k, c);\n        match(k, d);\n    }\n\n    constraints {\n        k1 :: match(k, c) & match(k', c) -> fail();\n        k2 :: match(k, c) & match(k, c') -> fail();\n        k3 :: match(k, d) & match(k', d) -> fail();\n        k4 :: match(k, d) & match(k, d') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"key\";\n        }\n\n        predicates {\n            match(k, c) :: \"The matching key of the {c} is the {k}\";\n            match(k, d) :: \"The matching key of the {d} is the {k}\";\n        }\n    }\n}\n\n# food\ntype f : o {\n    predicates {\n        edible(f);\n        eaten(f);\n    }\n\n    rules {\n        eat :: in(f, I) -> eaten(f);\n    }\n\n    constraints {\n        eaten1 :: eaten(f) & in(f, I) -> fail();\n        eaten2 :: eaten(f) & in(f, c) -> fail();\n        eaten3 :: eaten(f) & on(f, s) -> fail();\n        eaten4 :: eaten(f) & at(f, r) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"food\";\n            definition :: \"food is edible.\";\n        }\n\n        predicates {\n            edible(f) :: \"The {f} is edible\";\n            eaten(f) :: \"The {f} is nowhere\";\n        }\n\n        commands {\n            eat :: \"eat {f}\" :: \"eating the {f}\";\n        }\n    }\n}\n\n# Player\ntype P {\n    rules {\n        look :: at(P, r) -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        look :: look;\n    }\n\n    inform7 {\n        commands {\n            look :: \"look\" :: \"looking\";\n        }\n    }\n}\n\n# supporter\ntype s : t {\n    predicates {\n        on(o, s);\n    }\n\n    inform7 {\n        type {\n            kind :: \"supporter\";\n            definition :: \"supporters are fixed in place.\";\n        }\n\n        predicates {\n            on(o, s) :: \"The {o} is on the {s}\";\n        }\n    }\n}\n\n# room\ntype r {\n    predicates {\n        at(P, r);\n        at(t, r);\n\n        north_of(r, r);\n        west_of(r, r);\n\n        north_of/d(r, d, r);\n        west_of/d(r, d, r);\n\n        free(r, r);\n\n        south_of(r, r') = north_of(r', r);\n        east_of(r, r') = west_of(r', r);\n\n        south_of/d(r, d, r') = north_of/d(r', d, r);\n        east_of/d(r, d, r') = west_of/d(r', d, r);\n    }\n\n    rules {\n        go/north :: at(P, r) & $north_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/south :: at(P, r) & $south_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/east  :: at(P, r) & $east_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/west  :: at(P, r) & $west_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n    }\n\n    reverse_rules {\n        go/north :: go/south;\n        go/west :: go/east;\n    }\n\n    constraints {\n        r1 :: at(P, r) & at(P, r') -> fail();\n        r2 :: at(s, r) & at(s, r') -> fail();\n        r3 :: at(c, r) & at(c, r') -> fail();\n\n        # An exit direction can only lead to one room.\n        nav_rr1 :: north_of(r, r') & north_of(r'', r') -> fail();\n        nav_rr2 :: south_of(r, r') & south_of(r'', r') -> fail();\n        nav_rr3 :: east_of(r, r') & east_of(r'', r') -> fail();\n        nav_rr4 :: west_of(r, r') & west_of(r'', r') -> fail();\n\n        # Two rooms can only be connected once with each other.\n        nav_rrA :: north_of(r, r') & south_of(r, r') -> fail();\n        nav_rrB :: north_of(r, r') & west_of(r, r') -> fail();\n        nav_rrC :: north_of(r, r') & east_of(r, r') -> fail();\n        nav_rrD :: south_of(r, r') & west_of(r, r') -> fail();\n        nav_rrE :: south_of(r, r') & east_of(r, r') -> fail();\n        nav_rrF :: west_of(r, r')  & east_of(r, r') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"room\";\n        }\n\n        predicates {\n            at(P, r) :: \"The player is in {r}\";\n            at(t, r) :: \"The {t} is in {r}\";\n            free(r, r') :: \"\";  # No equivalent in Inform7.\n\n            north_of(r, r') :: \"The {r} is mapped north of {r'}\";\n            south_of(r, r') :: \"The {r} is mapped south of {r'}\";\n            east_of(r, r') :: \"The {r} is mapped east of {r'}\";\n            west_of(r, r') :: \"The {r} is mapped west of {r'}\";\n\n            north_of/d(r, d, r') :: \"South of {r} and north of {r'} is a door called {d}\";\n            south_of/d(r, d, r') :: \"North of {r} and south of {r'} is a door called {d}\";\n            east_of/d(r, d, r') :: \"West of {r} and east of {r'} is a door called {d}\";\n            west_of/d(r, d, r') :: \"East of {r} and west of {r'} is a door called {d}\";\n        }\n\n        commands {\n            go/north :: \"go north\" :: \"going north\";\n            go/south :: \"go south\" :: \"going south\";\n            go/east :: \"go east\" :: \"going east\";\n            go/west :: \"go west\" :: \"going west\";\n        }\n    }\n}\n\n", "text_grammars_path": "/home/lennard/miniconda3/envs/env/lib/python3.12/site-packages/textworld/generator/data/text_grammars"}, "metadata": {"walkthrough": ["go east", "take type 9 keycard from platter", "go west", "unlock type 9 locker with type 9 keycard", "open type 9 locker", "take passkey from type 9 locker", "unlock box with passkey", "open box", "take fly larva from box", "put fly larva on mantelpiece"], "uuid": "tw-mlhnSDF0cDcOFZc8Fy-house-GP-vE6NiDm6U7kVh5l"}, "objective": "You are now playing a exciting round of TextWorld! Here is how to play! First of all, head east. After that, pick up the type 9 keycard from the platter inside the cookhouse. And then, head west. And then, unlock the type 9 locker inside the study. Then, make sure that the type 9 locker within the study is wide open. And then, pick up the passkey from the type 9 locker. With the passkey, make absolutely sure that the box is unlocked. Then, ensure that the box is open. After pulling open the box, take the fly larva from the box. After getting the fly larva, rest the fly larva on the mantelpiece inside the study. Got that? Good!"}