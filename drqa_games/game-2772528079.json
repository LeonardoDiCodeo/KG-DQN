{"version": 1, "world": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_2", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_3", "type": "c"}, {"name": "r_13", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_4", "type": "c"}, {"name": "r_7", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_5", "type": "c"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_6", "type": "c"}, {"name": "r_17", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_7", "type": "c"}, {"name": "r_17", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_1", "type": "f"}, {"name": "r_8", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_2", "type": "f"}, {"name": "r_11", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_3", "type": "f"}, {"name": "r_16", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_5", "type": "f"}, {"name": "r_18", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_6", "type": "f"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_9", "type": "f"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "k_0", "type": "k"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_1", "type": "o"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_10", "type": "o"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_11", "type": "o"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_6", "type": "o"}, {"name": "r_14", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_7", "type": "o"}, {"name": "r_14", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_9", "type": "o"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_0", "type": "s"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_1", "type": "s"}, {"name": "r_16", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_2", "type": "s"}, {"name": "r_6", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_3", "type": "s"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_4", "type": "s"}, {"name": "r_9", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "c_3", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_4", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_7", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "d_0", "type": "d"}]}, {"name": "closed", "arguments": [{"name": "d_1", "type": "d"}]}, {"name": "east_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_19", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "edible", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_10", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_3", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_4", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_5", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_6", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_7", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_8", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_9", "type": "f"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_19", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_19", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "in", "arguments": [{"name": "f_0", "type": "f"}, {"name": "c_1", "type": "c"}]}, {"name": "in", "arguments": [{"name": "f_10", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "f_4", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "f_7", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "f_8", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "k_1", "type": "k"}, {"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "k_2", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "c_1", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_12", "type": "o"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "o_2", "type": "o"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "o_3", "type": "o"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "o_4", "type": "o"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "o_5", "type": "o"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "o_8", "type": "o"}, {"name": "I", "type": "I"}]}, {"name": "link", "arguments": [{"name": "r_1", "type": "r"}, {"name": "d_1", "type": "d"}, {"name": "r_2", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_12", "type": "r"}, {"name": "d_3", "type": "d"}, {"name": "r_16", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_16", "type": "r"}, {"name": "d_2", "type": "d"}, {"name": "r_18", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_16", "type": "r"}, {"name": "d_3", "type": "d"}, {"name": "r_12", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_18", "type": "r"}, {"name": "d_2", "type": "d"}, {"name": "r_16", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_2", "type": "r"}, {"name": "d_0", "type": "d"}, {"name": "r_3", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_2", "type": "r"}, {"name": "d_1", "type": "d"}, {"name": "r_1", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_3", "type": "r"}, {"name": "d_0", "type": "d"}, {"name": "r_2", "type": "r"}]}, {"name": "locked", "arguments": [{"name": "c_2", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "d_2", "type": "d"}]}, {"name": "locked", "arguments": [{"name": "d_3", "type": "d"}]}, {"name": "match", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_2", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_1", "type": "k"}, {"name": "c_0", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_2", "type": "k"}, {"name": "c_3", "type": "c"}]}, {"name": "north_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_5", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_6", "type": "c"}]}, {"name": "south_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_19", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_1", "type": "r"}]}], "grammar": {"theme": "house", "names_to_exclude": [], "include_adj": false, "blend_descriptions": false, "ambiguous_instructions": false, "only_last_action": false, "blend_instructions": false, "allowed_variables_numbering": false, "unique_expansion": false}, "quests": [{"desc": "I hope you're ready to go into rooms and interact with objects, because you've just entered TextWorld! Here is how to play! First, it would be good if you could make an effort to go east. With that over with, make absolutely sure that the door is wide open. Then, attempt to travel east. With that over with, make an attempt to go east. With that accomplished, go east. And then, move south. Then, head west. Then, make an effort to head west. That done, take the printer from the trunk inside the workshop. And then, insert the printer into the box inside the workshop. Alright, thanks!", "reward": 1, "commands": ["go east", "open door", "go east", "go east", "go east", "go south", "go west", "go west", "take printer from trunk", "insert printer into box"], "win_events": [{"commands": ["go east", "open door", "go east", "go east", "go east", "go south", "go west", "go west", "take printer from trunk", "insert printer into box"], "actions": [{"name": "go/east", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_3", "type": "r"}]}], "command_template": "go east", "reverse_name": null, "reverse_command_template": "go west"}, {"name": "open/d", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_3", "type": "r"}, {"name": "d_0", "type": "d"}, {"name": "r_2", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_2", "type": "r"}, {"name": "d_0", "type": "d"}, {"name": "r_3", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "d_0", "type": "d"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_3", "type": "r"}, {"name": "d_0", "type": "d"}, {"name": "r_2", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_2", "type": "r"}, {"name": "d_0", "type": "d"}, {"name": "r_3", "type": "r"}]}, {"name": "open", "arguments": [{"name": "d_0", "type": "d"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_3", "type": "r"}]}], "command_template": "open {d_0}", "reverse_name": null, "reverse_command_template": "close {d_0}"}, {"name": "go/east", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_3", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_2", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_2", "type": "r"}]}], "command_template": "go east", "reverse_name": null, "reverse_command_template": "go west"}, {"name": "go/east", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_2", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_5", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_5", "type": "r"}]}], "command_template": "go east", "reverse_name": null, "reverse_command_template": "go west"}, {"name": "go/east", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_5", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_15", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_15", "type": "r"}]}], "command_template": "go east", "reverse_name": null, "reverse_command_template": "go west"}, {"name": "go/south", "preconditions": [{"name": "north_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_15", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_14", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_14", "type": "r"}]}], "command_template": "go south", "reverse_name": null, "reverse_command_template": "go north"}, {"name": "go/west", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_14", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_7", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_7", "type": "r"}]}], "command_template": "go west", "reverse_name": null, "reverse_command_template": "go east"}, {"name": "go/west", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_7", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_1", "type": "r"}]}], "command_template": "go west", "reverse_name": null, "reverse_command_template": "go east"}, {"name": "take/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "c_1", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "I", "type": "I"}]}], "command_template": "take {o_0} from {c_1}", "reverse_name": null, "reverse_command_template": "insert {o_0} into {c_1}"}, {"name": "insert", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "I", "type": "I"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "c_0", "type": "c"}]}], "command_template": "insert {o_0} into {c_0}", "reverse_name": null, "reverse_command_template": "take {o_0} from {c_0}"}], "condition": {"name": "trigger", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "c_0", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "c_0", "type": "c"}]}, {"name": "event", "arguments": [{"name": "P", "type": "P"}, {"name": "c_0", "type": "c"}, {"name": "o_0", "type": "o"}, {"name": "r_1", "type": "r"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [], "optional": false, "repeatable": false}], "infos": [["P", {"id": "P", "type": "P", "name": null, "noun": null, "adj": null, "desc": null, "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["I", {"id": "I", "type": "I", "name": null, "noun": null, "adj": null, "desc": null, "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["r_1", {"id": "r_1", "type": "r", "name": "workshop", "noun": "workshop", "adj": null, "desc": "You've entered a workshop. You start to take note of what's in the room.\n\n You can see [if c_0 is locked]a locked[else if c_0 is open]an opened[otherwise]a closed[end if] box, which looks typical, close by.[if c_0 is open and there is something in the c_0] The box contains [a list of things in the c_0]. Now that's what I call TextWorld![end if][if c_0 is open and the c_0 contains nothing] The box is empty! This is the worst thing that could possibly happen, ever![end if] You see a gleam over in a corner, where you can see a trunk.[if c_1 is open and there is something in the c_1] The trunk contains [a list of things in the c_1].[end if][if c_1 is open and the c_1 contains nothing] The trunk is empty! What a waste of a day![end if] You see a spherical safe.[if c_2 is open and there is something in the c_2] The spherical safe contains [a list of things in the c_2].[end if][if c_2 is open and the c_2 contains nothing] The spherical safe is empty! This is the worst thing that could possibly happen, ever![end if] You can see a desk. [if there is something on the s_0]You see [a list of things on the s_0] on the desk.[end if][if there is nothing on the s_0]However, the desk, like an empty desk, has nothing on it. Hopefully this doesn't make you too upset.[end if]\n\n There is [if d_1 is open]an open[otherwise]a closed[end if] gate leading north. You need an unblocked exit? You should try going east. There is an exit to the south. Don't worry, it is unguarded. You don't like doors? Why not try going west, that entranceway is unguarded.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_8", {"id": "r_8", "type": "r", "name": "shower", "noun": "shower", "adj": null, "desc": "Well, here we are in a shower.\n\n\n\nYou need an unblocked exit? You should try going east.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_10", {"id": "r_10", "type": "r", "name": "canteen", "noun": "canteen", "adj": null, "desc": "This might come as a shock to you, but you've just stumbled into a canteen.\n\n\n\nThere is an unguarded exit to the north. You need an unguarded exit? You should try going west.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_11", {"id": "r_11", "type": "r", "name": "recreation zone", "noun": "recreation zone", "adj": null, "desc": "You find yourself in a recreation zone. A normal one. The room seems oddly familiar, as though it were only superficially different from the other rooms in the building.\n\n\n\nYou need an unguarded exit? You should try going east. You don't like doors? Why not try going north, that entranceway is unguarded.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_12", {"id": "r_12", "type": "r", "name": "study", "noun": "study", "adj": null, "desc": "You are in a study. It seems to be pretty usual here. Let's see what's in here.\n\n\n\n There is [if d_3 is open]an open[otherwise]a closed[end if] hatch leading west. You need an unguarded exit? You should try going east. You need an unguarded exit? You should try going north. There is an exit to the south. Don't worry, it is unguarded.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_16", {"id": "r_16", "type": "r", "name": "lounge", "noun": "lounge", "adj": null, "desc": "You've just shown up in a lounge.\n\n You can make out a bar. The bar is typical.[if there is something on the s_1] On the bar you make out [a list of things on the s_1].[end if][if there is nothing on the s_1] Looks like someone's already been here and taken everything off it, though. You swear loudly.[end if]\n\n There is [if d_3 is open]an open[otherwise]a closed[end if] hatch leading east. There is [if d_2 is open]an open[otherwise]a closed[end if] passageway leading north. You need an unblocked exit? You should try going south.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_13", {"id": "r_13", "type": "r", "name": "studio", "noun": "studio", "adj": null, "desc": "You arrive in a studio. A typical one.\n\n You can make out [if c_3 is locked]a locked[else if c_3 is open]an opened[otherwise]a closed[end if] type 2 box right there by you.[if c_3 is open and there is something in the c_3] The type 2 box contains [a list of things in the c_3].[end if][if c_3 is open and the c_3 contains nothing] The type 2 box is empty! What a waste of a day![end if]\n\nYou don't like doors? Why not try going west, that entranceway is unblocked.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_6", {"id": "r_6", "type": "r", "name": "basement", "noun": "basement", "adj": null, "desc": "You arrive in a basement. A typical one.\n\n You can see a rack. The rack is normal.[if there is something on the s_2] On the rack you see [a list of things on the s_2]. Hmmm... what else, what else?[end if][if there is nothing on the s_2] However, the rack, like an empty rack, has nothing on it.[end if]\n\nYou don't like doors? Why not try going east, that entranceway is unguarded. There is an unblocked exit to the north. You don't like doors? Why not try going south, that entranceway is unguarded. You don't like doors? Why not try going west, that entranceway is unblocked.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_14", {"id": "r_14", "type": "r", "name": "cookery", "noun": "cookery", "adj": null, "desc": "You find yourself in a cookery. A standard one. I guess you better just go and list everything you see here.\n\n\n\nThere is an exit to the north. Don't worry, it is unguarded. You don't like doors? Why not try going west, that entranceway is unguarded.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_7", {"id": "r_7", "type": "r", "name": "vault", "noun": "vault", "adj": null, "desc": "You've entered a vault. The room is well lit.\n\n You see a chest. There's something strange about this being here, but you can't put your finger on it.[if c_4 is open and there is something in the c_4] The chest contains [a list of things in the c_4].[end if][if c_4 is open and the c_4 contains nothing] The chest is empty! This is the worst thing that could possibly happen, ever![end if]\n\nYou need an unblocked exit? You should try going east. There is an unguarded exit to the north. You need an unguarded exit? You should try going south. You don't like doors? Why not try going west, that entranceway is unguarded.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_15", {"id": "r_15", "type": "r", "name": "bathroom", "noun": "bathroom", "adj": null, "desc": "If you're wondering why everything seems so standard all of a sudden, it's because you've just sauntered into the bathroom.\n\n\n\nYou need an unguarded exit? You should try going south. You don't like doors? Why not try going west, that entranceway is unblocked.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_5", {"id": "r_5", "type": "r", "name": "kitchenette", "noun": "kitchenette", "adj": null, "desc": "You are in a kitchenette. A normal kind of place.\n\n You make out [if c_5 is locked]a locked[else if c_5 is open]an opened[otherwise]a closed[end if] freezer.[if c_5 is open and there is something in the c_5] The freezer contains [a list of things in the c_5].[end if][if c_5 is open and the c_5 contains nothing] Empty! What kind of nightmare TextWorld is this?[end if] You can make out a platter. [if there is something on the s_3]You see [a list of things on the s_3] on the platter.[end if][if there is nothing on the s_3]But oh no! there's nothing on this piece of trash. Silly platter, silly, empty, good for nothing platter.[end if]\n\nYou don't like doors? Why not try going east, that entranceway is unguarded. There is an exit to the south. Don't worry, it is unguarded. You don't like doors? Why not try going west, that entranceway is unguarded.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_18", {"id": "r_18", "type": "r", "name": "bedroom", "noun": "bedroom", "adj": null, "desc": "Look at you, bigshot, walking into a bedroom like it isn't some huge deal.\n\n\n\n There is [if d_2 is open]an open[otherwise]a closed[end if] passageway leading south. You don't like doors? Why not try going west, that entranceway is unblocked.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_19", {"id": "r_19", "type": "r", "name": "cubicle", "noun": "cubicle", "adj": null, "desc": "You find yourself in a cubicle. A standard one. You begin looking for stuff.\n\n\n\nYou don't like doors? Why not try going east, that entranceway is unblocked.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_2", {"id": "r_2", "type": "r", "name": "bedchamber", "noun": "bedchamber", "adj": null, "desc": "You are in a bedchamber. An ordinary kind of place.\n\n\n\n There is [if d_1 is open]an open[otherwise]a closed[end if] gate leading south. There is [if d_0 is open]an open[otherwise]a closed[end if] door leading west. You need an unguarded exit? You should try going east.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_3", {"id": "r_3", "type": "r", "name": "steam room", "noun": "steam room", "adj": null, "desc": "You are in a steam room. The room seems oddly familiar, as though it were only superficially different from the other rooms in the building.\n\n\n\n There is [if d_0 is open]an open[otherwise]a closed[end if] door leading east. There is an unblocked exit to the west.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_4", {"id": "r_4", "type": "r", "name": "playroom", "noun": "playroom", "adj": null, "desc": "You find yourself in a playroom. An ordinary kind of place.\n\n\n\nYou don't like doors? Why not try going east, that entranceway is unblocked.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_0", {"id": "r_0", "type": "r", "name": "parlor", "noun": "parlor", "adj": null, "desc": "You are in a parlor. You decide to start listing off everything you see in the room, as if you were in a text adventure.\n\n\n\nThere is an unblocked exit to the east. There is an unguarded exit to the north. There is an exit to the south. Don't worry, it is unguarded.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_9", {"id": "r_9", "type": "r", "name": "attic", "noun": "attic", "adj": null, "desc": "You find yourself in an attic. An ordinary one. You decide to just list off a complete list of everything you see in the room, because hey, why not?\n\n You make out a shelf. [if there is something on the s_4]You see [a list of things on the s_4] on the shelf.[end if][if there is nothing on the s_4]But there isn't a thing on it.[end if]\n\nYou need an unguarded exit? You should try going north. There is an unguarded exit to the south. You don't like doors? Why not try going west, that entranceway is unblocked.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_17", {"id": "r_17", "type": "r", "name": "office", "noun": "office", "adj": null, "desc": "You're now in an office. You decide to start listing off everything you see in the room, as if you were in a text adventure.\n\n You make out a safe![if c_6 is open and there is something in the c_6] The safe contains [a list of things in the c_6].[end if][if c_6 is open and the c_6 contains nothing] The safe is empty! This is the worst thing that could possibly happen, ever![end if] Look out! It's a- oh, never mind, it's just a display.[if c_7 is open and there is something in the c_7] The display contains [a list of things in the c_7]. There's something strange about this thing being here, but you don't have time to worry about that now.[end if][if c_7 is open and the c_7 contains nothing] Empty! What kind of nightmare TextWorld is this?[end if]\n\nThere is an exit to the north. Don't worry, it is unguarded.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["d_1", {"id": "d_1", "type": "d", "name": "gate", "noun": "gate", "adj": null, "desc": "The gate looks noble. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["d_3", {"id": "d_3", "type": "d", "name": "hatch", "noun": "hatch", "adj": null, "desc": "it is what it is, a hatch [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["d_2", {"id": "d_2", "type": "d", "name": "passageway", "noun": "passageway", "adj": null, "desc": "it is what it is, a passageway [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["d_0", {"id": "d_0", "type": "d", "name": "door", "noun": "door", "adj": null, "desc": "it is what it is, a door [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["c_0", {"id": "c_0", "type": "c", "name": "box", "noun": "box", "adj": null, "desc": "The box looks strong, and impossible to break. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_1", {"id": "c_1", "type": "c", "name": "trunk", "noun": "trunk", "adj": null, "desc": "The trunk looks strong, and impossible to crack. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_2", {"id": "c_2", "type": "c", "name": "spherical safe", "noun": "spherical safe", "adj": null, "desc": "The spherical safe looks strong, and impossible to crack. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_3", {"id": "c_3", "type": "c", "name": "type 2 box", "noun": "type 2 box", "adj": null, "desc": "The type 2 box looks strong, and impossible to break. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_4", {"id": "c_4", "type": "c", "name": "chest", "noun": "chest", "adj": null, "desc": "The chest looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["c_5", {"id": "c_5", "type": "c", "name": "freezer", "noun": "freezer", "adj": null, "desc": "The freezer looks strong, and impossible to break. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_6", {"id": "c_6", "type": "c", "name": "safe", "noun": "safe", "adj": null, "desc": "The safe looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_7", {"id": "c_7", "type": "c", "name": "display", "noun": "display", "adj": null, "desc": "The display looks strong, and impossible to crack. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["f_1", {"id": "f_1", "type": "f", "name": "loaf of bread", "noun": "loaf of bread", "adj": null, "desc": "You couldn't pay me to eat that standard thing.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["f_2", {"id": "f_2", "type": "f", "name": "grape", "noun": "grape", "adj": null, "desc": "that's an usual grape!", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["f_3", {"id": "f_3", "type": "f", "name": "apple", "noun": "apple", "adj": null, "desc": "The apple looks savory.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["f_5", {"id": "f_5", "type": "f", "name": "cookie", "noun": "cookie", "adj": null, "desc": "The cookie looks appealing.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["f_6", {"id": "f_6", "type": "f", "name": "gummy bear", "noun": "gummy bear", "adj": null, "desc": "The gummy bear looks savory.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["f_9", {"id": "f_9", "type": "f", "name": "fondue", "noun": "fondue", "adj": null, "desc": "The fondue looks appetizing.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["k_0", {"id": "k_0", "type": "k", "name": "spherical key", "noun": "spherical key", "adj": null, "desc": "The spherical key is surprisingly heavy.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["o_1", {"id": "o_1", "type": "o", "name": "nest of bats", "noun": "nest of bats", "adj": null, "desc": "The nest of bats appears to be to fit in here", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["o_10", {"id": "o_10", "type": "o", "name": "bug", "noun": "bug", "adj": null, "desc": "The bug is modern.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["o_11", {"id": "o_11", "type": "o", "name": "novel", "noun": "novel", "adj": null, "desc": "The novel would seem to be well matched to everything else here", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["o_6", {"id": "o_6", "type": "o", "name": "insect", "noun": "insect", "adj": null, "desc": "The insect is brand new.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["o_7", {"id": "o_7", "type": "o", "name": "coffee cup", "noun": "coffee cup", "adj": null, "desc": "The coffee cup seems out of place here", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["o_9", {"id": "o_9", "type": "o", "name": "sponge", "noun": "sponge", "adj": null, "desc": "The sponge appears to be out of place here", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["s_0", {"id": "s_0", "type": "s", "name": "desk", "noun": "desk", "adj": null, "desc": "The desk is stable.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_1", {"id": "s_1", "type": "s", "name": "bar", "noun": "bar", "adj": null, "desc": "The bar is stable.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["s_2", {"id": "s_2", "type": "s", "name": "rack", "noun": "rack", "adj": null, "desc": "The rack is unstable.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["s_3", {"id": "s_3", "type": "s", "name": "platter", "noun": "platter", "adj": null, "desc": "The platter is stable.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["s_4", {"id": "s_4", "type": "s", "name": "shelf", "noun": "shelf", "adj": null, "desc": "The shelf is solid.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["f_0", {"id": "f_0", "type": "f", "name": "cashew", "noun": "cashew", "adj": null, "desc": "The cashew looks appealing.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["f_10", {"id": "f_10", "type": "f", "name": "legume", "noun": "legume", "adj": null, "desc": "The legume looks appetizing.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["f_4", {"id": "f_4", "type": "f", "name": "garlic clove", "noun": "garlic clove", "adj": null, "desc": "that's an usual garlic clove!", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["f_7", {"id": "f_7", "type": "f", "name": "carrot", "noun": "carrot", "adj": null, "desc": "The carrot looks appetizing.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["f_8", {"id": "f_8", "type": "f", "name": "licorice strip", "noun": "licorice strip", "adj": null, "desc": "The licorice strip looks appealing.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["k_1", {"id": "k_1", "type": "k", "name": "latchkey", "noun": "latchkey", "adj": null, "desc": "The latchkey is weighty.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["k_2", {"id": "k_2", "type": "k", "name": "type 2 keycard", "noun": "type 2 keycard", "adj": null, "desc": "The type 2 keycard is cold to the touch", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["o_0", {"id": "o_0", "type": "o", "name": "printer", "noun": "printer", "adj": null, "desc": "The printer is clean.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["o_12", {"id": "o_12", "type": "o", "name": "laptop", "noun": "laptop", "adj": null, "desc": "The laptop is cheap looking.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["o_2", {"id": "o_2", "type": "o", "name": "staple", "noun": "staple", "adj": null, "desc": "The staple is brand new.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["o_3", {"id": "o_3", "type": "o", "name": "Quote of the Day Calendar", "noun": "Quote of the Day Calendar", "adj": null, "desc": "The Quote of the Day Calendar is modern.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["o_4", {"id": "o_4", "type": "o", "name": "kettle", "noun": "kettle", "adj": null, "desc": "The kettle is brand new.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["o_5", {"id": "o_5", "type": "o", "name": "textbook", "noun": "textbook", "adj": null, "desc": "The textbook seems to fit in here", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["o_8", {"id": "o_8", "type": "o", "name": "frisbee", "noun": "frisbee", "adj": null, "desc": "The frisbee is antiquated.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}]], "KB": {"logic": "# object\ntype o : t {\n    constraints {\n        obj1 :: in(o, I) & in(o, c) -> fail();\n        obj2 :: in(o, I) & on(o, s) -> fail();\n        obj3 :: in(o, I) & at(o, r) -> fail();\n        obj4 :: in(o, c) & on(o, s) -> fail();\n        obj5 :: in(o, c) & at(o, r) -> fail();\n        obj6 :: on(o, s) & at(o, r) -> fail();\n        obj7 :: at(o, r) & at(o, r') -> fail();\n        obj8 :: in(o, c) & in(o, c') -> fail();\n        obj9 :: on(o, s) & on(o, s') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"object-like\";\n            definition :: \"object-like is portable.\";\n        }\n    }\n}\n\n# Inventory\ntype I {\n    predicates {\n        in(o, I);\n    }\n\n    rules {\n        inventory :: at(P, r) -> at(P, r);  # Nothing changes.\n\n        take :: $at(P, r) & at(o, r) -> in(o, I);\n        drop :: $at(P, r) & in(o, I) -> at(o, r);\n\n        take/c :: $at(P, r) & $at(c, r) & $open(c) & in(o, c) -> in(o, I);\n        insert :: $at(P, r) & $at(c, r) & $open(c) & in(o, I) -> in(o, c);\n\n        take/s :: $at(P, r) & $at(s, r) & on(o, s) -> in(o, I);\n        put    :: $at(P, r) & $at(s, r) & in(o, I) -> on(o, s);\n\n        examine/I :: in(o, I) -> in(o, I);  # Nothing changes.\n        examine/s :: at(P, r) & $at(s, r) & $on(o, s) -> at(P, r);  # Nothing changes.\n        examine/c :: at(P, r) & $at(c, r) & $open(c) & $in(o, c) -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        inventory :: inventory;\n\n        take :: drop;\n        take/c :: insert;\n        take/s :: put;\n\n        examine/I :: examine/I;\n        examine/s :: examine/s;\n        examine/c :: examine/c;\n    }\n\n    inform7 {\n        predicates {\n            in(o, I) :: \"The player carries the {o}\";\n        }\n\n        commands {\n            take :: \"take {o}\" :: \"taking the {o}\";\n            drop :: \"drop {o}\" :: \"dropping the {o}\";\n\n            take/c :: \"take {o} from {c}\" :: \"removing the {o} from the {c}\";\n            insert :: \"insert {o} into {c}\" :: \"inserting the {o} into the {c}\";\n\n            take/s :: \"take {o} from {s}\" :: \"removing the {o} from the {s}\";\n            put :: \"put {o} on {s}\" :: \"putting the {o} on the {s}\";\n\n            inventory :: \"inventory\" :: \"taking inventory\";\n\n            examine/I :: \"examine {o}\" :: \"examining the {o}\";\n            examine/s :: \"examine {o}\" :: \"examining the {o}\";\n            examine/c :: \"examine {o}\" :: \"examining the {o}\";\n        }\n    }\n}\n\n# thing\ntype t {\n    rules {\n        examine/t :: at(P, r) & $at(t, r) -> at(P, r);\n    }\n\n    reverse_rules {\n        examine/t :: examine/t;\n    }\n\n    inform7 {\n        type {\n            kind :: \"thing\";\n        }\n\n        commands {\n            examine/t :: \"examine {t}\" :: \"examining the {t}\";\n        }\n    }\n}\n\n# door\ntype d : t {\n    predicates {\n        open(d);\n        closed(d);\n        locked(d);\n\n        link(r, d, r);\n    }\n\n    rules {\n        lock/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & closed(d) -> locked(d);\n        unlock/d :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & locked(d) -> closed(d);\n\n        open/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & closed(d) -> open(d) & free(r, r') & free(r', r);\n        close/d  :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & open(d) & free(r, r') & free(r', r) -> closed(d);\n\n        examine/d :: at(P, r) & $link(r, d, r') -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        lock/d :: unlock/d;\n        open/d :: close/d;\n\n        examine/d :: examine/d;\n    }\n\n    constraints {\n        d1 :: open(d)   & closed(d) -> fail();\n        d2 :: open(d)   & locked(d) -> fail();\n        d3 :: closed(d) & locked(d) -> fail();\n\n        # A door can't be used to link more than two rooms.\n        link1 :: link(r, d, r') & link(r, d, r'') -> fail();\n        link2 :: link(r, d, r') & link(r'', d, r''') -> fail();\n\n        # There's already a door linking two rooms.\n        link3 :: link(r, d, r') & link(r, d', r') -> fail();\n\n        # There cannot be more than four doors in a room.\n        too_many_doors :: link(r, d1: d, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        # There cannot be more than four doors in a room.\n        dr1 :: free(r, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr2 :: free(r, r1: r) & free(r, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr3 :: free(r, r1: r) & free(r, r2: r) & free(r, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr4 :: free(r, r1: r) & free(r, r2: r) & free(r, r3: r) & free(r, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        free1 :: link(r, d, r') & free(r, r') & closed(d) -> fail();\n        free2 :: link(r, d, r') & free(r, r') & locked(d) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"door\";\n            definition :: \"door is openable and lockable.\";\n        }\n\n        predicates {\n            open(d) :: \"The {d} is open\";\n            closed(d) :: \"The {d} is closed\";\n            locked(d) :: \"The {d} is locked\";\n            link(r, d, r') :: \"\";  # No equivalent in Inform7.\n        }\n\n        commands {\n            open/d :: \"open {d}\" :: \"opening {d}\";\n            close/d :: \"close {d}\" :: \"closing {d}\";\n\n            unlock/d :: \"unlock {d} with {k}\" :: \"unlocking {d} with the {k}\";\n            lock/d :: \"lock {d} with {k}\" :: \"locking {d} with the {k}\";\n\n            examine/d :: \"examine {d}\" :: \"examining {d}\";\n        }\n    }\n}\n\n# container\ntype c : t {\n    predicates {\n        open(c);\n        closed(c);\n        locked(c);\n\n        in(o, c);\n    }\n\n    rules {\n        lock/c   :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & closed(c) -> locked(c);\n        unlock/c :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & locked(c) -> closed(c);\n\n        open/c  :: $at(P, r) & $at(c, r) & closed(c) -> open(c);\n        close/c :: $at(P, r) & $at(c, r) & open(c) -> closed(c);\n    }\n\n    reverse_rules {\n        lock/c :: unlock/c;\n        open/c :: close/c;\n    }\n\n    constraints {\n        c1 :: open(c)   & closed(c) -> fail();\n        c2 :: open(c)   & locked(c) -> fail();\n        c3 :: closed(c) & locked(c) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"container\";\n            definition :: \"containers are openable, lockable and fixed in place. containers are usually closed.\";\n        }\n\n        predicates {\n            open(c) :: \"The {c} is open\";\n            closed(c) :: \"The {c} is closed\";\n            locked(c) :: \"The {c} is locked\";\n\n            in(o, c) :: \"The {o} is in the {c}\";\n        }\n\n        commands {\n            open/c :: \"open {c}\" :: \"opening the {c}\";\n            close/c :: \"close {c}\" :: \"closing the {c}\";\n\n            lock/c :: \"lock {c} with {k}\" :: \"locking the {c} with the {k}\";\n            unlock/c :: \"unlock {c} with {k}\" :: \"unlocking the {c} with the {k}\";\n        }\n    }\n}\n\n# key\ntype k : o {\n    predicates {\n        match(k, c);\n        match(k, d);\n    }\n\n    constraints {\n        k1 :: match(k, c) & match(k', c) -> fail();\n        k2 :: match(k, c) & match(k, c') -> fail();\n        k3 :: match(k, d) & match(k', d) -> fail();\n        k4 :: match(k, d) & match(k, d') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"key\";\n        }\n\n        predicates {\n            match(k, c) :: \"The matching key of the {c} is the {k}\";\n            match(k, d) :: \"The matching key of the {d} is the {k}\";\n        }\n    }\n}\n\n# food\ntype f : o {\n    predicates {\n        edible(f);\n        eaten(f);\n    }\n\n    rules {\n        eat :: in(f, I) -> eaten(f);\n    }\n\n    constraints {\n        eaten1 :: eaten(f) & in(f, I) -> fail();\n        eaten2 :: eaten(f) & in(f, c) -> fail();\n        eaten3 :: eaten(f) & on(f, s) -> fail();\n        eaten4 :: eaten(f) & at(f, r) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"food\";\n            definition :: \"food is edible.\";\n        }\n\n        predicates {\n            edible(f) :: \"The {f} is edible\";\n            eaten(f) :: \"The {f} is nowhere\";\n        }\n\n        commands {\n            eat :: \"eat {f}\" :: \"eating the {f}\";\n        }\n    }\n}\n\n# Player\ntype P {\n    rules {\n        look :: at(P, r) -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        look :: look;\n    }\n\n    inform7 {\n        commands {\n            look :: \"look\" :: \"looking\";\n        }\n    }\n}\n\n# supporter\ntype s : t {\n    predicates {\n        on(o, s);\n    }\n\n    inform7 {\n        type {\n            kind :: \"supporter\";\n            definition :: \"supporters are fixed in place.\";\n        }\n\n        predicates {\n            on(o, s) :: \"The {o} is on the {s}\";\n        }\n    }\n}\n\n# room\ntype r {\n    predicates {\n        at(P, r);\n        at(t, r);\n\n        north_of(r, r);\n        west_of(r, r);\n\n        north_of/d(r, d, r);\n        west_of/d(r, d, r);\n\n        free(r, r);\n\n        south_of(r, r') = north_of(r', r);\n        east_of(r, r') = west_of(r', r);\n\n        south_of/d(r, d, r') = north_of/d(r', d, r);\n        east_of/d(r, d, r') = west_of/d(r', d, r);\n    }\n\n    rules {\n        go/north :: at(P, r) & $north_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/south :: at(P, r) & $south_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/east  :: at(P, r) & $east_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/west  :: at(P, r) & $west_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n    }\n\n    reverse_rules {\n        go/north :: go/south;\n        go/west :: go/east;\n    }\n\n    constraints {\n        r1 :: at(P, r) & at(P, r') -> fail();\n        r2 :: at(s, r) & at(s, r') -> fail();\n        r3 :: at(c, r) & at(c, r') -> fail();\n\n        # An exit direction can only lead to one room.\n        nav_rr1 :: north_of(r, r') & north_of(r'', r') -> fail();\n        nav_rr2 :: south_of(r, r') & south_of(r'', r') -> fail();\n        nav_rr3 :: east_of(r, r') & east_of(r'', r') -> fail();\n        nav_rr4 :: west_of(r, r') & west_of(r'', r') -> fail();\n\n        # Two rooms can only be connected once with each other.\n        nav_rrA :: north_of(r, r') & south_of(r, r') -> fail();\n        nav_rrB :: north_of(r, r') & west_of(r, r') -> fail();\n        nav_rrC :: north_of(r, r') & east_of(r, r') -> fail();\n        nav_rrD :: south_of(r, r') & west_of(r, r') -> fail();\n        nav_rrE :: south_of(r, r') & east_of(r, r') -> fail();\n        nav_rrF :: west_of(r, r')  & east_of(r, r') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"room\";\n        }\n\n        predicates {\n            at(P, r) :: \"The player is in {r}\";\n            at(t, r) :: \"The {t} is in {r}\";\n            free(r, r') :: \"\";  # No equivalent in Inform7.\n\n            north_of(r, r') :: \"The {r} is mapped north of {r'}\";\n            south_of(r, r') :: \"The {r} is mapped south of {r'}\";\n            east_of(r, r') :: \"The {r} is mapped east of {r'}\";\n            west_of(r, r') :: \"The {r} is mapped west of {r'}\";\n\n            north_of/d(r, d, r') :: \"South of {r} and north of {r'} is a door called {d}\";\n            south_of/d(r, d, r') :: \"North of {r} and south of {r'} is a door called {d}\";\n            east_of/d(r, d, r') :: \"West of {r} and east of {r'} is a door called {d}\";\n            west_of/d(r, d, r') :: \"East of {r} and west of {r'} is a door called {d}\";\n        }\n\n        commands {\n            go/north :: \"go north\" :: \"going north\";\n            go/south :: \"go south\" :: \"going south\";\n            go/east :: \"go east\" :: \"going east\";\n            go/west :: \"go west\" :: \"going west\";\n        }\n    }\n}\n\n", "text_grammars_path": "/home/lennard/miniconda3/envs/env/lib/python3.12/site-packages/textworld/generator/data/text_grammars"}, "metadata": {"walkthrough": ["go east", "open door", "go east", "go east", "go east", "go south", "go west", "go west", "take printer from trunk", "insert printer into box"], "uuid": "tw-mlhnSDF0cDcOFZc8Fy-house-GP-VvexFxddUvJvclvV"}, "objective": "Welcome to another life changing episode of TextWorld! First thing I need you to do is to go east. Then, look and see that the door is open. Once you have opened the door, make an attempt to go east. Then, attempt to head east. Then, go to the east. And then, attempt to go south. Then, try to head west. That done, travel west. If you can get through with that, recover the printer from the trunk. And then, put the printer into the box inside the workshop. That's it!"}