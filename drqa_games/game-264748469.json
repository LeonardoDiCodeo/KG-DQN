{"version": 1, "world": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_9", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_18", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_10", "type": "c"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_11", "type": "c"}, {"name": "r_8", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_12", "type": "c"}, {"name": "r_9", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_2", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_3", "type": "c"}, {"name": "r_18", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_4", "type": "c"}, {"name": "r_15", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_5", "type": "c"}, {"name": "r_13", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_6", "type": "c"}, {"name": "r_14", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_7", "type": "c"}, {"name": "r_16", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_8", "type": "c"}, {"name": "r_2", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_9", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_1", "type": "f"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_2", "type": "f"}, {"name": "r_6", "type": "r"}]}, {"name": "at", "arguments": [{"name": "k_3", "type": "k"}, {"name": "r_13", "type": "r"}]}, {"name": "at", "arguments": [{"name": "k_7", "type": "k"}, {"name": "r_16", "type": "r"}]}, {"name": "at", "arguments": [{"name": "k_8", "type": "k"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_1", "type": "o"}, {"name": "r_15", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_2", "type": "o"}, {"name": "r_12", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_3", "type": "o"}, {"name": "r_14", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_4", "type": "o"}, {"name": "r_14", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_6", "type": "o"}, {"name": "r_7", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_0", "type": "s"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_1", "type": "s"}, {"name": "r_10", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_2", "type": "s"}, {"name": "r_10", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_3", "type": "s"}, {"name": "r_16", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_4", "type": "s"}, {"name": "r_2", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_5", "type": "s"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_6", "type": "s"}, {"name": "r_7", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_7", "type": "s"}, {"name": "r_19", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "c_10", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_12", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_2", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_3", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_8", "type": "c"}]}, {"name": "east_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "edible", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_3", "type": "f"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_19", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_19", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "in", "arguments": [{"name": "f_0", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "f_3", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "k_1", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "k_2", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "k_6", "type": "k"}, {"name": "c_6", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "c_1", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_5", "type": "o"}, {"name": "I", "type": "I"}]}, {"name": "locked", "arguments": [{"name": "c_11", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_4", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_5", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_7", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_9", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_2", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_1", "type": "k"}, {"name": "c_1", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_2", "type": "k"}, {"name": "c_4", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_3", "type": "k"}, {"name": "c_5", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_6", "type": "k"}, {"name": "c_6", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_7", "type": "k"}, {"name": "c_7", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_8", "type": "k"}, {"name": "c_10", "type": "c"}]}, {"name": "north_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_19", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "on", "arguments": [{"name": "k_0", "type": "k"}, {"name": "s_0", "type": "s"}]}, {"name": "on", "arguments": [{"name": "o_7", "type": "o"}, {"name": "s_6", "type": "s"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_6", "type": "c"}]}, {"name": "south_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_19", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_6", "type": "r"}]}], "grammar": {"theme": "house", "names_to_exclude": [], "include_adj": false, "blend_descriptions": false, "ambiguous_instructions": false, "only_last_action": false, "blend_instructions": false, "allowed_variables_numbering": false, "unique_expansion": false}, "quests": [{"desc": "It's time to explore the amazing world of TextWorld! Here is your task for today. First stop, move west. After that, travel west. With that done, make an attempt to take a trip west. And then, make an attempt to head south. Once you finish that, make an attempt to head west. Once you finish that, attempt to travel south. Following that, try to travel south. After that, pick up the bug from the box within the bedroom. After that, make an effort to head east. With that accomplished, you can deposit the bug into the crate. That's it!", "reward": 1, "commands": ["go west", "go west", "go west", "go south", "go west", "go south", "go south", "take bug from box", "go east", "insert bug into crate"], "win_events": [{"commands": ["go west", "go west", "go west", "go south", "go west", "go south", "go south", "take bug from box", "go east", "insert bug into crate"], "actions": [{"name": "go/west", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_9", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_10", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_10", "type": "r"}]}], "command_template": "go west", "reverse_name": null, "reverse_command_template": "go east"}, {"name": "go/west", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_10", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_11", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_11", "type": "r"}]}], "command_template": "go west", "reverse_name": null, "reverse_command_template": "go east"}, {"name": "go/west", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_11", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_15", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_15", "type": "r"}]}], "command_template": "go west", "reverse_name": null, "reverse_command_template": "go east"}, {"name": "go/south", "preconditions": [{"name": "north_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_15", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_14", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_14", "type": "r"}]}], "command_template": "go south", "reverse_name": null, "reverse_command_template": "go north"}, {"name": "go/west", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_14", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_16", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_16", "type": "r"}]}], "command_template": "go west", "reverse_name": null, "reverse_command_template": "go east"}, {"name": "go/south", "preconditions": [{"name": "north_of", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_16", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_17", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_17", "type": "r"}]}], "command_template": "go south", "reverse_name": null, "reverse_command_template": "go north"}, {"name": "go/south", "preconditions": [{"name": "north_of", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_17", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_18", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_18", "type": "r"}]}], "command_template": "go south", "reverse_name": null, "reverse_command_template": "go north"}, {"name": "take/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_18", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_18", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "c_1", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_18", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_18", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "I", "type": "I"}]}], "command_template": "take {o_0} from {c_1}", "reverse_name": null, "reverse_command_template": "insert {o_0} into {c_1}"}, {"name": "go/east", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_18", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_0", "type": "r"}]}], "command_template": "go east", "reverse_name": null, "reverse_command_template": "go west"}, {"name": "insert", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "I", "type": "I"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "c_0", "type": "c"}]}], "command_template": "insert {o_0} into {c_0}", "reverse_name": null, "reverse_command_template": "take {o_0} from {c_0}"}], "condition": {"name": "trigger", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "c_0", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "o_0", "type": "o"}, {"name": "c_0", "type": "c"}]}, {"name": "event", "arguments": [{"name": "P", "type": "P"}, {"name": "c_0", "type": "c"}, {"name": "o_0", "type": "o"}, {"name": "r_0", "type": "r"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [], "optional": false, "repeatable": false}], "infos": [["P", {"id": "P", "type": "P", "name": null, "noun": null, "adj": null, "desc": null, "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["I", {"id": "I", "type": "I", "name": null, "noun": null, "adj": null, "desc": null, "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["r_0", {"id": "r_0", "type": "r", "name": "pantry", "noun": "pantry", "adj": null, "desc": "You've entered a pantry.\n\n You can see [if c_0 is locked]a locked[else if c_0 is open]an opened[otherwise]a closed[end if] crate.[if c_0 is open and there is something in the c_0] The crate contains [a list of things in the c_0]. Suddenly, you bump your head on the ceiling, but it's not such a bad bump that it's going to prevent you from looking at objects and even things.[end if][if c_0 is open and the c_0 contains nothing] The crate is empty, what a horrible day![end if] You can see a safe.[if c_2 is open and there is something in the c_2] The safe contains [a list of things in the c_2].[end if][if c_2 is open and the c_2 contains nothing] Empty! What kind of nightmare TextWorld is this?[end if] Oh, great. Here's a rack. The rack is ordinary.[if there is something on the s_0] On the rack you can make out [a list of things on the s_0].[end if][if there is nothing on the s_0] But oh no! there's nothing on this piece of trash.[end if]\n\nYou don't like doors? Why not try going east, that entranceway is unguarded. There is an unguarded exit to the north. There is an unguarded exit to the west.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_18", {"id": "r_18", "type": "r", "name": "bedroom", "noun": "bedroom", "adj": null, "desc": "You arrive in a bedroom. A typical one.\n\n If you haven't noticed it already, there seems to be something there by the wall, it's a box. You shudder, but continue examining the room.[if c_1 is open and there is something in the c_1] The box contains [a list of things in the c_1]. Now that's what I call TextWorld![end if][if c_1 is open and the c_1 contains nothing] What a letdown! The box is empty![end if] You see a portmanteau.[if c_3 is open and there is something in the c_3] The portmanteau contains [a list of things in the c_3]. You look around you, at all the containers and supporters, doors and objects, and you think to yourself. Why? Why Textworld?[end if][if c_3 is open and the c_3 contains nothing] The portmanteau is empty! This is the worst thing that could possibly happen, ever![end if]\n\nYou don't like doors? Why not try going east, that entranceway is unblocked. There is an unblocked exit to the north.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_1", {"id": "r_1", "type": "r", "name": "cubicle", "noun": "cubicle", "adj": null, "desc": "You are in a cubicle. A standard kind of place.\n\n\n\nYou don't like doors? Why not try going east, that entranceway is unguarded. You don't like doors? Why not try going north, that entranceway is unblocked. There is an exit to the west. Don't worry, it is unguarded.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_10", {"id": "r_10", "type": "r", "name": "study", "noun": "study", "adj": null, "desc": "Well, here we are in the study. The room is well lit.\n\n If you haven't noticed it already, there seems to be something there by the wall, it's an armchair. The armchair is normal.[if there is something on the s_1] On the armchair you make out [a list of things on the s_1].[end if][if there is nothing on the s_1] But there isn't a thing on it. Hopefully, this discovery doesn't ruin your TextWorld experience![end if] Hey, want to see a desk? Look over there, a desk. The desk is standard.[if there is something on the s_2] On the desk you make out [a list of things on the s_2].[end if][if there is nothing on the s_2] However, the desk, like an empty desk, has nothing on it.[end if]\n\nThere is an exit to the east. Don't worry, it is unguarded. You don't like doors? Why not try going south, that entranceway is unguarded. You don't like doors? Why not try going west, that entranceway is unguarded.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_11", {"id": "r_11", "type": "r", "name": "recreation zone", "noun": "recreation zone", "adj": null, "desc": "You arrive in a recreation zone. An ordinary one.\n\n\n\nYou need an unguarded exit? You should try going east. There is an unguarded exit to the north. You need an unguarded exit? You should try going south. There is an unguarded exit to the west.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_15", {"id": "r_15", "type": "r", "name": "shower", "noun": "shower", "adj": null, "desc": "You've entered a shower. Let's see what's in here.\n\n You make out a locker. The light flickers for a second, but nothing else happens.[if c_4 is open and there is something in the c_4] The locker contains [a list of things in the c_4].[end if][if c_4 is open and the c_4 contains nothing] The locker is empty, what a horrible day![end if]\n\nThere is an unguarded exit to the east. There is an exit to the south. Don't worry, it is unguarded.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_12", {"id": "r_12", "type": "r", "name": "studio", "noun": "studio", "adj": null, "desc": "You find yourself in a studio.\n\n\n\nYou don't like doors? Why not try going east, that entranceway is unguarded. You need an unblocked exit? You should try going north. You don't like doors? Why not try going south, that entranceway is unblocked. There is an exit to the west. Don't worry, it is unblocked.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_13", {"id": "r_13", "type": "r", "name": "laundry place", "noun": "laundry place", "adj": null, "desc": "You arrive in a laundry place. An ordinary kind of place.\n\n Look over there! a type 4 box.[if c_5 is open and there is something in the c_5] The type 4 box contains [a list of things in the c_5].[end if][if c_5 is open and the c_5 contains nothing] Empty! What kind of nightmare TextWorld is this?[end if]\n\nThere is an unguarded exit to the east. There is an unblocked exit to the north. There is an unblocked exit to the south. You need an unblocked exit? You should try going west.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_14", {"id": "r_14", "type": "r", "name": "office", "noun": "office", "adj": null, "desc": "You find yourself in an office. A typical kind of place.\n\n You make out [if c_6 is locked]a locked[else if c_6 is open]an opened[otherwise]a closed[end if] formless safe in the room.[if c_6 is open and there is something in the c_6] The formless safe contains [a list of things in the c_6].[end if][if c_6 is open and the c_6 contains nothing] What a letdown! The formless safe is empty![end if]\n\nYou need an unguarded exit? You should try going east. There is an exit to the north. Don't worry, it is unguarded. You don't like doors? Why not try going south, that entranceway is unblocked. You need an unblocked exit? You should try going west.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_16", {"id": "r_16", "type": "r", "name": "bathroom", "noun": "bathroom", "adj": null, "desc": "You've entered a bathroom.\n\n You make out [if c_7 is locked]a locked[else if c_7 is open]an opened[otherwise]a closed[end if] Canadian limited edition locker.[if c_7 is open and there is something in the c_7] The Canadian limited edition locker contains [a list of things in the c_7].[end if][if c_7 is open and the c_7 contains nothing] The Canadian limited edition locker is empty! This is the worst thing that could possibly happen, ever![end if] Look over there! a table. [if there is something on the s_3]You see [a list of things on the s_3] on the table.[end if][if there is nothing on the s_3]But the thing is empty. Silly table, silly, empty, good for nothing table.[end if]\n\nYou don't like doors? Why not try going east, that entranceway is unblocked. There is an unguarded exit to the south.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_2", {"id": "r_2", "type": "r", "name": "cookhouse", "noun": "cookhouse", "adj": null, "desc": "Fancy seeing you here. Here, by the way, being the cookhouse. You begin looking for stuff.\n\n You can see [if c_8 is locked]a locked[else if c_8 is open]an opened[otherwise]a closed[end if] case.[if c_8 is open and there is something in the c_8] The case contains [a list of things in the c_8].[end if][if c_8 is open and the c_8 contains nothing] The case is empty, what a horrible day![end if] You make out a shelf. Wow, isn't TextWorld just the best? [if there is something on the s_4]You see [a list of things on the s_4] on the shelf.[end if][if there is nothing on the s_4]But the thing is empty, unfortunately.[end if]\n\nThere is an exit to the east. Don't worry, it is unblocked. You don't like doors? Why not try going north, that entranceway is unguarded. You don't like doors? Why not try going west, that entranceway is unguarded.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_3", {"id": "r_3", "type": "r", "name": "workshop", "noun": "workshop", "adj": null, "desc": "You're now in the workshop.\n\n You smell an awful smell, and follow it to a mantle. The mantle is standard.[if there is something on the s_5] On the mantle you see [a list of things on the s_5].[end if][if there is nothing on the s_5] But oh no! there's nothing on this piece of trash.[end if]\n\nThere is an unblocked exit to the north. You don't like doors? Why not try going west, that entranceway is unguarded.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_4", {"id": "r_4", "type": "r", "name": "restroom", "noun": "restroom", "adj": null, "desc": "You arrive in a restroom. A normal kind of place.\n\n You see a dresser.[if c_9 is open and there is something in the c_9] The dresser contains [a list of things in the c_9]. Something scurries by right in the corner of your eye. Probably nothing.[end if][if c_9 is open and the c_9 contains nothing] Empty! What kind of nightmare TextWorld is this?[end if]\n\nThere is an unguarded exit to the east. You don't like doors? Why not try going north, that entranceway is unblocked. You don't like doors? Why not try going south, that entranceway is unguarded. There is an unblocked exit to the west.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_6", {"id": "r_6", "type": "r", "name": "launderette", "noun": "launderette", "adj": null, "desc": "If you're wondering why everything seems so typical all of a sudden, it's because you've just shown up in the launderette. Okay, just remember what you're here to do, and everything will go great.\n\n\n\nThere is an unguarded exit to the east. You don't like doors? Why not try going north, that entranceway is unblocked. There is an unblocked exit to the south. You don't like doors? Why not try going west, that entranceway is unblocked.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_5", {"id": "r_5", "type": "r", "name": "still cubicle", "noun": "cubicle", "adj": "still", "desc": "You've entered a still cubicle. I guess you better just go and list everything you see here.\n\n You scan the room for a American style safe, and you find a American style safe.[if c_10 is open and there is something in the c_10] The American style safe contains [a list of things in the c_10].[end if][if c_10 is open and the c_10 contains nothing] The American style safe is empty! This is the worst thing that could possibly happen, ever![end if]\n\nYou don't like doors? Why not try going north, that entranceway is unguarded. You don't like doors? Why not try going south, that entranceway is unblocked. You need an unguarded exit? You should try going west.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_7", {"id": "r_7", "type": "r", "name": "austere office", "noun": "office", "adj": "austere", "desc": "You've just sauntered into an austere office.\n\n You can make out a stand. The stand is standard.[if there is something on the s_6] On the stand you see [a list of things on the s_6].[end if][if there is nothing on the s_6] But the thing is empty. Aw, here you were, all excited for there to be things on it![end if]\n\nYou don't like doors? Why not try going east, that entranceway is unblocked. You need an unblocked exit? You should try going north. There is an unguarded exit to the south.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_8", {"id": "r_8", "type": "r", "name": "silent study", "noun": "study", "adj": "silent", "desc": "Well I'll be, you are in a place we're calling a silent study.\n\n Oh, great. Here's a toolbox.[if c_11 is open and there is something in the c_11] The toolbox contains [a list of things in the c_11].[end if][if c_11 is open and the c_11 contains nothing] The toolbox is empty! What a waste of a day![end if]\n\nYou need an unblocked exit? You should try going north. There is an exit to the south. Don't worry, it is unguarded. There is an exit to the west. Don't worry, it is unblocked.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_9", {"id": "r_9", "type": "r", "name": "vault", "noun": "vault", "adj": null, "desc": "You arrive in a normal kind of place. That is to say, you're in a vault.\n\n Were you looking for a cabinet? Because look over there, it's a cabinet.[if c_12 is open and there is something in the c_12] The cabinet contains [a list of things in the c_12].[end if][if c_12 is open and the c_12 contains nothing] The cabinet is empty! What a waste of a day![end if]\n\nYou don't like doors? Why not try going south, that entranceway is unblocked. You don't like doors? Why not try going west, that entranceway is unguarded.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_17", {"id": "r_17", "type": "r", "name": "steam room", "noun": "steam room", "adj": null, "desc": "Well how about that, you are in the place we're calling the steam room.\n\n\n\nYou don't like doors? Why not try going north, that entranceway is unblocked. You don't like doors? Why not try going south, that entranceway is unguarded.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_19", {"id": "r_19", "type": "r", "name": "bedchamber", "noun": "bedchamber", "adj": null, "desc": "You find yourself in a bedchamber. A standard one.\n\n You can make out a mantelpiece. The mantelpiece is usual.[if there is something on the s_7] On the mantelpiece you can see [a list of things on the s_7]. You can't wait to tell the folks at home about this![end if][if there is nothing on the s_7] But oh no! there's nothing on this piece of trash. Hm. Oh well[end if]\n\nYou don't like doors? Why not try going south, that entranceway is unblocked.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["c_0", {"id": "c_0", "type": "c", "name": "crate", "noun": "crate", "adj": null, "desc": "The crate looks strong, and impossible to crack. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["c_1", {"id": "c_1", "type": "c", "name": "box", "noun": "box", "adj": null, "desc": "The box looks strong, and impossible to crack. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["c_10", {"id": "c_10", "type": "c", "name": "American style safe", "noun": "American style safe", "adj": null, "desc": "The American style safe looks strong, and impossible to crack. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_11", {"id": "c_11", "type": "c", "name": "toolbox", "noun": "toolbox", "adj": null, "desc": "The toolbox looks strong, and impossible to crack. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_12", {"id": "c_12", "type": "c", "name": "cabinet", "noun": "cabinet", "adj": null, "desc": "The cabinet looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["c_2", {"id": "c_2", "type": "c", "name": "safe", "noun": "safe", "adj": null, "desc": "The safe looks strong, and impossible to break. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["c_3", {"id": "c_3", "type": "c", "name": "portmanteau", "noun": "portmanteau", "adj": null, "desc": "The portmanteau looks strong, and impossible to break. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["c_4", {"id": "c_4", "type": "c", "name": "locker", "noun": "locker", "adj": null, "desc": "The locker looks strong, and impossible to crack. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["c_5", {"id": "c_5", "type": "c", "name": "type 4 box", "noun": "type 4 box", "adj": null, "desc": "The type 4 box looks strong, and impossible to crack. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["c_6", {"id": "c_6", "type": "c", "name": "formless safe", "noun": "formless safe", "adj": null, "desc": "The formless safe looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_7", {"id": "c_7", "type": "c", "name": "Canadian limited edition locker", "noun": "Canadian limited edition locker", "adj": null, "desc": "The Canadian limited edition locker looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["c_8", {"id": "c_8", "type": "c", "name": "case", "noun": "case", "adj": null, "desc": "The case looks strong, and impossible to destroy. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_9", {"id": "c_9", "type": "c", "name": "dresser", "noun": "dresser", "adj": null, "desc": "The dresser looks strong, and impossible to destroy. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["f_1", {"id": "f_1", "type": "f", "name": "banana", "noun": "banana", "adj": null, "desc": "You couldn't pay me to eat that ordinary thing.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["f_2", {"id": "f_2", "type": "f", "name": "cashew", "noun": "cashew", "adj": null, "desc": "that's a typical cashew!", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["k_3", {"id": "k_3", "type": "k", "name": "type 4 keycard", "noun": "type 4 keycard", "adj": null, "desc": "The type 4 keycard looks useful", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["k_7", {"id": "k_7", "type": "k", "name": "Canadian limited edition passkey", "noun": "Canadian limited edition passkey", "adj": null, "desc": "The Canadian limited edition passkey looks useful", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["k_8", {"id": "k_8", "type": "k", "name": "American style passkey", "noun": "American style passkey", "adj": null, "desc": "The American style passkey is cold to the touch", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["o_1", {"id": "o_1", "type": "o", "name": "paper towel", "noun": "paper towel", "adj": null, "desc": "The paper towel is dirty.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["o_2", {"id": "o_2", "type": "o", "name": "printer", "noun": "printer", "adj": null, "desc": "The printer seems to fit in here", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["o_3", {"id": "o_3", "type": "o", "name": "telephone", "noun": "telephone", "adj": null, "desc": "The telephone appears to fit in here", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["o_4", {"id": "o_4", "type": "o", "name": "Comic Strip Calendar", "noun": "Comic Strip Calendar", "adj": null, "desc": "The Comic Strip Calendar would seem to be well matched to everything else here", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["o_6", {"id": "o_6", "type": "o", "name": "worm", "noun": "worm", "adj": null, "desc": "The worm looks out of place here", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_0", {"id": "s_0", "type": "s", "name": "rack", "noun": "rack", "adj": null, "desc": "The rack is an unstable piece of trash.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["s_1", {"id": "s_1", "type": "s", "name": "armchair", "noun": "armchair", "adj": null, "desc": "The armchair is durable.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_2", {"id": "s_2", "type": "s", "name": "desk", "noun": "desk", "adj": null, "desc": "The desk is shaky.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_3", {"id": "s_3", "type": "s", "name": "table", "noun": "table", "adj": null, "desc": "The table is an unstable piece of junk.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["s_4", {"id": "s_4", "type": "s", "name": "shelf", "noun": "shelf", "adj": null, "desc": "The shelf is undependable.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["s_5", {"id": "s_5", "type": "s", "name": "mantle", "noun": "mantle", "adj": null, "desc": "The mantle is undependable.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_6", {"id": "s_6", "type": "s", "name": "stand", "noun": "stand", "adj": null, "desc": "The stand is shaky.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_7", {"id": "s_7", "type": "s", "name": "mantelpiece", "noun": "mantelpiece", "adj": null, "desc": "The mantelpiece is stable.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["f_0", {"id": "f_0", "type": "f", "name": "fondue", "noun": "fondue", "adj": null, "desc": "The fondue looks delicious.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["f_3", {"id": "f_3", "type": "f", "name": "legume", "noun": "legume", "adj": null, "desc": "The legume looks tasty.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["k_1", {"id": "k_1", "type": "k", "name": "passkey", "noun": "passkey", "adj": null, "desc": "The passkey looks useful", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["k_2", {"id": "k_2", "type": "k", "name": "keycard", "noun": "keycard", "adj": null, "desc": "The keycard is heavier than it looks.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["k_6", {"id": "k_6", "type": "k", "name": "formless latchkey", "noun": "formless latchkey", "adj": null, "desc": "The formless latchkey is light.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["o_0", {"id": "o_0", "type": "o", "name": "bug", "noun": "bug", "adj": null, "desc": "The bug appears to fit in here", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["o_5", {"id": "o_5", "type": "o", "name": "folder", "noun": "folder", "adj": null, "desc": "The folder looks out of place here", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["k_0", {"id": "k_0", "type": "k", "name": "latchkey", "noun": "latchkey", "adj": null, "desc": "The latchkey is heavier than it looks.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["o_7", {"id": "o_7", "type": "o", "name": "Quote of the Day Calendar", "noun": "Quote of the Day Calendar", "adj": null, "desc": "The Quote of the Day Calendar appears to be well matched to everything else here", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}]], "KB": {"logic": "# object\ntype o : t {\n    constraints {\n        obj1 :: in(o, I) & in(o, c) -> fail();\n        obj2 :: in(o, I) & on(o, s) -> fail();\n        obj3 :: in(o, I) & at(o, r) -> fail();\n        obj4 :: in(o, c) & on(o, s) -> fail();\n        obj5 :: in(o, c) & at(o, r) -> fail();\n        obj6 :: on(o, s) & at(o, r) -> fail();\n        obj7 :: at(o, r) & at(o, r') -> fail();\n        obj8 :: in(o, c) & in(o, c') -> fail();\n        obj9 :: on(o, s) & on(o, s') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"object-like\";\n            definition :: \"object-like is portable.\";\n        }\n    }\n}\n\n# Inventory\ntype I {\n    predicates {\n        in(o, I);\n    }\n\n    rules {\n        inventory :: at(P, r) -> at(P, r);  # Nothing changes.\n\n        take :: $at(P, r) & at(o, r) -> in(o, I);\n        drop :: $at(P, r) & in(o, I) -> at(o, r);\n\n        take/c :: $at(P, r) & $at(c, r) & $open(c) & in(o, c) -> in(o, I);\n        insert :: $at(P, r) & $at(c, r) & $open(c) & in(o, I) -> in(o, c);\n\n        take/s :: $at(P, r) & $at(s, r) & on(o, s) -> in(o, I);\n        put    :: $at(P, r) & $at(s, r) & in(o, I) -> on(o, s);\n\n        examine/I :: in(o, I) -> in(o, I);  # Nothing changes.\n        examine/s :: at(P, r) & $at(s, r) & $on(o, s) -> at(P, r);  # Nothing changes.\n        examine/c :: at(P, r) & $at(c, r) & $open(c) & $in(o, c) -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        inventory :: inventory;\n\n        take :: drop;\n        take/c :: insert;\n        take/s :: put;\n\n        examine/I :: examine/I;\n        examine/s :: examine/s;\n        examine/c :: examine/c;\n    }\n\n    inform7 {\n        predicates {\n            in(o, I) :: \"The player carries the {o}\";\n        }\n\n        commands {\n            take :: \"take {o}\" :: \"taking the {o}\";\n            drop :: \"drop {o}\" :: \"dropping the {o}\";\n\n            take/c :: \"take {o} from {c}\" :: \"removing the {o} from the {c}\";\n            insert :: \"insert {o} into {c}\" :: \"inserting the {o} into the {c}\";\n\n            take/s :: \"take {o} from {s}\" :: \"removing the {o} from the {s}\";\n            put :: \"put {o} on {s}\" :: \"putting the {o} on the {s}\";\n\n            inventory :: \"inventory\" :: \"taking inventory\";\n\n            examine/I :: \"examine {o}\" :: \"examining the {o}\";\n            examine/s :: \"examine {o}\" :: \"examining the {o}\";\n            examine/c :: \"examine {o}\" :: \"examining the {o}\";\n        }\n    }\n}\n\n# thing\ntype t {\n    rules {\n        examine/t :: at(P, r) & $at(t, r) -> at(P, r);\n    }\n\n    reverse_rules {\n        examine/t :: examine/t;\n    }\n\n    inform7 {\n        type {\n            kind :: \"thing\";\n        }\n\n        commands {\n            examine/t :: \"examine {t}\" :: \"examining the {t}\";\n        }\n    }\n}\n\n# door\ntype d : t {\n    predicates {\n        open(d);\n        closed(d);\n        locked(d);\n\n        link(r, d, r);\n    }\n\n    rules {\n        lock/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & closed(d) -> locked(d);\n        unlock/d :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & locked(d) -> closed(d);\n\n        open/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & closed(d) -> open(d) & free(r, r') & free(r', r);\n        close/d  :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & open(d) & free(r, r') & free(r', r) -> closed(d);\n\n        examine/d :: at(P, r) & $link(r, d, r') -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        lock/d :: unlock/d;\n        open/d :: close/d;\n\n        examine/d :: examine/d;\n    }\n\n    constraints {\n        d1 :: open(d)   & closed(d) -> fail();\n        d2 :: open(d)   & locked(d) -> fail();\n        d3 :: closed(d) & locked(d) -> fail();\n\n        # A door can't be used to link more than two rooms.\n        link1 :: link(r, d, r') & link(r, d, r'') -> fail();\n        link2 :: link(r, d, r') & link(r'', d, r''') -> fail();\n\n        # There's already a door linking two rooms.\n        link3 :: link(r, d, r') & link(r, d', r') -> fail();\n\n        # There cannot be more than four doors in a room.\n        too_many_doors :: link(r, d1: d, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        # There cannot be more than four doors in a room.\n        dr1 :: free(r, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr2 :: free(r, r1: r) & free(r, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr3 :: free(r, r1: r) & free(r, r2: r) & free(r, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr4 :: free(r, r1: r) & free(r, r2: r) & free(r, r3: r) & free(r, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        free1 :: link(r, d, r') & free(r, r') & closed(d) -> fail();\n        free2 :: link(r, d, r') & free(r, r') & locked(d) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"door\";\n            definition :: \"door is openable and lockable.\";\n        }\n\n        predicates {\n            open(d) :: \"The {d} is open\";\n            closed(d) :: \"The {d} is closed\";\n            locked(d) :: \"The {d} is locked\";\n            link(r, d, r') :: \"\";  # No equivalent in Inform7.\n        }\n\n        commands {\n            open/d :: \"open {d}\" :: \"opening {d}\";\n            close/d :: \"close {d}\" :: \"closing {d}\";\n\n            unlock/d :: \"unlock {d} with {k}\" :: \"unlocking {d} with the {k}\";\n            lock/d :: \"lock {d} with {k}\" :: \"locking {d} with the {k}\";\n\n            examine/d :: \"examine {d}\" :: \"examining {d}\";\n        }\n    }\n}\n\n# container\ntype c : t {\n    predicates {\n        open(c);\n        closed(c);\n        locked(c);\n\n        in(o, c);\n    }\n\n    rules {\n        lock/c   :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & closed(c) -> locked(c);\n        unlock/c :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & locked(c) -> closed(c);\n\n        open/c  :: $at(P, r) & $at(c, r) & closed(c) -> open(c);\n        close/c :: $at(P, r) & $at(c, r) & open(c) -> closed(c);\n    }\n\n    reverse_rules {\n        lock/c :: unlock/c;\n        open/c :: close/c;\n    }\n\n    constraints {\n        c1 :: open(c)   & closed(c) -> fail();\n        c2 :: open(c)   & locked(c) -> fail();\n        c3 :: closed(c) & locked(c) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"container\";\n            definition :: \"containers are openable, lockable and fixed in place. containers are usually closed.\";\n        }\n\n        predicates {\n            open(c) :: \"The {c} is open\";\n            closed(c) :: \"The {c} is closed\";\n            locked(c) :: \"The {c} is locked\";\n\n            in(o, c) :: \"The {o} is in the {c}\";\n        }\n\n        commands {\n            open/c :: \"open {c}\" :: \"opening the {c}\";\n            close/c :: \"close {c}\" :: \"closing the {c}\";\n\n            lock/c :: \"lock {c} with {k}\" :: \"locking the {c} with the {k}\";\n            unlock/c :: \"unlock {c} with {k}\" :: \"unlocking the {c} with the {k}\";\n        }\n    }\n}\n\n# key\ntype k : o {\n    predicates {\n        match(k, c);\n        match(k, d);\n    }\n\n    constraints {\n        k1 :: match(k, c) & match(k', c) -> fail();\n        k2 :: match(k, c) & match(k, c') -> fail();\n        k3 :: match(k, d) & match(k', d) -> fail();\n        k4 :: match(k, d) & match(k, d') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"key\";\n        }\n\n        predicates {\n            match(k, c) :: \"The matching key of the {c} is the {k}\";\n            match(k, d) :: \"The matching key of the {d} is the {k}\";\n        }\n    }\n}\n\n# food\ntype f : o {\n    predicates {\n        edible(f);\n        eaten(f);\n    }\n\n    rules {\n        eat :: in(f, I) -> eaten(f);\n    }\n\n    constraints {\n        eaten1 :: eaten(f) & in(f, I) -> fail();\n        eaten2 :: eaten(f) & in(f, c) -> fail();\n        eaten3 :: eaten(f) & on(f, s) -> fail();\n        eaten4 :: eaten(f) & at(f, r) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"food\";\n            definition :: \"food is edible.\";\n        }\n\n        predicates {\n            edible(f) :: \"The {f} is edible\";\n            eaten(f) :: \"The {f} is nowhere\";\n        }\n\n        commands {\n            eat :: \"eat {f}\" :: \"eating the {f}\";\n        }\n    }\n}\n\n# Player\ntype P {\n    rules {\n        look :: at(P, r) -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        look :: look;\n    }\n\n    inform7 {\n        commands {\n            look :: \"look\" :: \"looking\";\n        }\n    }\n}\n\n# supporter\ntype s : t {\n    predicates {\n        on(o, s);\n    }\n\n    inform7 {\n        type {\n            kind :: \"supporter\";\n            definition :: \"supporters are fixed in place.\";\n        }\n\n        predicates {\n            on(o, s) :: \"The {o} is on the {s}\";\n        }\n    }\n}\n\n# room\ntype r {\n    predicates {\n        at(P, r);\n        at(t, r);\n\n        north_of(r, r);\n        west_of(r, r);\n\n        north_of/d(r, d, r);\n        west_of/d(r, d, r);\n\n        free(r, r);\n\n        south_of(r, r') = north_of(r', r);\n        east_of(r, r') = west_of(r', r);\n\n        south_of/d(r, d, r') = north_of/d(r', d, r);\n        east_of/d(r, d, r') = west_of/d(r', d, r);\n    }\n\n    rules {\n        go/north :: at(P, r) & $north_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/south :: at(P, r) & $south_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/east  :: at(P, r) & $east_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/west  :: at(P, r) & $west_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n    }\n\n    reverse_rules {\n        go/north :: go/south;\n        go/west :: go/east;\n    }\n\n    constraints {\n        r1 :: at(P, r) & at(P, r') -> fail();\n        r2 :: at(s, r) & at(s, r') -> fail();\n        r3 :: at(c, r) & at(c, r') -> fail();\n\n        # An exit direction can only lead to one room.\n        nav_rr1 :: north_of(r, r') & north_of(r'', r') -> fail();\n        nav_rr2 :: south_of(r, r') & south_of(r'', r') -> fail();\n        nav_rr3 :: east_of(r, r') & east_of(r'', r') -> fail();\n        nav_rr4 :: west_of(r, r') & west_of(r'', r') -> fail();\n\n        # Two rooms can only be connected once with each other.\n        nav_rrA :: north_of(r, r') & south_of(r, r') -> fail();\n        nav_rrB :: north_of(r, r') & west_of(r, r') -> fail();\n        nav_rrC :: north_of(r, r') & east_of(r, r') -> fail();\n        nav_rrD :: south_of(r, r') & west_of(r, r') -> fail();\n        nav_rrE :: south_of(r, r') & east_of(r, r') -> fail();\n        nav_rrF :: west_of(r, r')  & east_of(r, r') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"room\";\n        }\n\n        predicates {\n            at(P, r) :: \"The player is in {r}\";\n            at(t, r) :: \"The {t} is in {r}\";\n            free(r, r') :: \"\";  # No equivalent in Inform7.\n\n            north_of(r, r') :: \"The {r} is mapped north of {r'}\";\n            south_of(r, r') :: \"The {r} is mapped south of {r'}\";\n            east_of(r, r') :: \"The {r} is mapped east of {r'}\";\n            west_of(r, r') :: \"The {r} is mapped west of {r'}\";\n\n            north_of/d(r, d, r') :: \"South of {r} and north of {r'} is a door called {d}\";\n            south_of/d(r, d, r') :: \"North of {r} and south of {r'} is a door called {d}\";\n            east_of/d(r, d, r') :: \"West of {r} and east of {r'} is a door called {d}\";\n            west_of/d(r, d, r') :: \"East of {r} and west of {r'} is a door called {d}\";\n        }\n\n        commands {\n            go/north :: \"go north\" :: \"going north\";\n            go/south :: \"go south\" :: \"going south\";\n            go/east :: \"go east\" :: \"going east\";\n            go/west :: \"go west\" :: \"going west\";\n        }\n    }\n}\n\n", "text_grammars_path": "/home/lennard/miniconda3/envs/env/lib/python3.12/site-packages/textworld/generator/data/text_grammars"}, "metadata": {"walkthrough": ["go west", "go west", "go west", "go south", "go west", "go south", "go south", "take bug from box", "go east", "insert bug into crate"], "uuid": "tw-mlhnSDF0cDcOFZc8Fy-house-GP-JnrvFZgNTDnaCZeV"}, "objective": "Hey, thanks for coming over to the TextWorld today, there is something I need you to do for me. First off, if it's not too much trouble, I need you to head west. After that, make an effort to venture west. Following that, make an effort to venture west. After that, head south. And then, make an attempt to move west. And then, go to the south. After that, travel south. With that accomplished, take the bug from the box within the bedroom. And then, make an effort to venture east. And then, deposit the bug into the crate. And once you've done that, you win!"}