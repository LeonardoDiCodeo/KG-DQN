{"version": 1, "world": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_10", "type": "c"}, {"name": "r_14", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_11", "type": "c"}, {"name": "r_19", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_12", "type": "c"}, {"name": "r_6", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_2", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_3", "type": "c"}, {"name": "r_15", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_4", "type": "c"}, {"name": "r_17", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_5", "type": "c"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_6", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_7", "type": "c"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_8", "type": "c"}, {"name": "r_7", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_9", "type": "c"}, {"name": "r_9", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_0", "type": "f"}, {"name": "r_11", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_1", "type": "f"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_2", "type": "f"}, {"name": "r_8", "type": "r"}]}, {"name": "at", "arguments": [{"name": "k_11", "type": "k"}, {"name": "r_19", "type": "r"}]}, {"name": "at", "arguments": [{"name": "k_3", "type": "k"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "k_7", "type": "k"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_0", "type": "o"}, {"name": "r_17", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_1", "type": "o"}, {"name": "r_2", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_2", "type": "o"}, {"name": "r_8", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_3", "type": "o"}, {"name": "r_12", "type": "r"}]}, {"name": "at", "arguments": [{"name": "o_4", "type": "o"}, {"name": "r_14", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_0", "type": "s"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_1", "type": "s"}, {"name": "r_11", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_2", "type": "s"}, {"name": "r_2", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_3", "type": "s"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_4", "type": "s"}, {"name": "r_9", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_5", "type": "s"}, {"name": "r_12", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_6", "type": "s"}, {"name": "r_19", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_7", "type": "s"}, {"name": "r_19", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_10", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_12", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_4", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_7", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_8", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_9", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "d_1", "type": "d"}]}, {"name": "east_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "edible", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_3", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_4", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_5", "type": "f"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_19", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_19", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "in", "arguments": [{"name": "f_5", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "k_5", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "k_9", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "in", "arguments": [{"name": "o_5", "type": "o"}, {"name": "I", "type": "I"}]}, {"name": "link", "arguments": [{"name": "r_13", "type": "r"}, {"name": "d_0", "type": "d"}, {"name": "r_2", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_16", "type": "r"}, {"name": "d_1", "type": "d"}, {"name": "r_17", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_17", "type": "r"}, {"name": "d_1", "type": "d"}, {"name": "r_16", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_2", "type": "r"}, {"name": "d_0", "type": "d"}, {"name": "r_13", "type": "r"}]}, {"name": "locked", "arguments": [{"name": "c_11", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_2", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_3", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_5", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "d_0", "type": "d"}]}, {"name": "match", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_0", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_11", "type": "k"}, {"name": "c_11", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_3", "type": "k"}, {"name": "c_1", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_5", "type": "k"}, {"name": "c_3", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_7", "type": "k"}, {"name": "c_7", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_8", "type": "k"}, {"name": "c_9", "type": "c"}]}, {"name": "match", "arguments": [{"name": "k_9", "type": "k"}, {"name": "c_10", "type": "c"}]}, {"name": "north_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_19", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "on", "arguments": [{"name": "f_3", "type": "f"}, {"name": "s_5", "type": "s"}]}, {"name": "on", "arguments": [{"name": "f_4", "type": "f"}, {"name": "s_6", "type": "s"}]}, {"name": "on", "arguments": [{"name": "k_8", "type": "k"}, {"name": "s_4", "type": "s"}]}, {"name": "open", "arguments": [{"name": "c_6", "type": "c"}]}, {"name": "south_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_19", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_8", "type": "r"}]}], "grammar": {"theme": "house", "names_to_exclude": [], "include_adj": false, "blend_descriptions": false, "ambiguous_instructions": false, "only_last_action": false, "blend_instructions": false, "allowed_variables_numbering": false, "unique_expansion": false}, "quests": [{"desc": "Who's got a virtual machine and is about to play through an profound round of TextWorld? You do! Here is your task for today. First off, if it's not too much trouble, I need you to go to the west. Then, go south. Okay, and then, try to travel south. And then, attempt to venture west. Next, go to the west. And then, take a trip west. Then, make an effort to head north. Okay, and then, head east. After that, try to go east. Then, make it so that the spherical chest in the lounge is ajar. That's it!", "reward": 1, "commands": ["go west", "go south", "go south", "go west", "go west", "go west", "go north", "go east", "go east", "open spherical chest"], "win_events": [{"commands": ["go west", "go south", "go south", "go west", "go west", "go west", "go north", "go east", "go east", "open spherical chest"], "actions": [{"name": "go/west", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_5", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_4", "type": "r"}]}], "command_template": "go west", "reverse_name": null, "reverse_command_template": "go east"}, {"name": "go/south", "preconditions": [{"name": "north_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_11", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_11", "type": "r"}]}], "command_template": "go south", "reverse_name": null, "reverse_command_template": "go north"}, {"name": "go/south", "preconditions": [{"name": "north_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_11", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_8", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_8", "type": "r"}]}], "command_template": "go south", "reverse_name": null, "reverse_command_template": "go north"}, {"name": "go/west", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_8", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_9", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_9", "type": "r"}]}], "command_template": "go west", "reverse_name": null, "reverse_command_template": "go east"}, {"name": "go/west", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_9", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_10", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_10", "type": "r"}]}], "command_template": "go west", "reverse_name": null, "reverse_command_template": "go east"}, {"name": "go/west", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_10", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_16", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_16", "type": "r"}]}], "command_template": "go west", "reverse_name": null, "reverse_command_template": "go east"}, {"name": "go/north", "preconditions": [{"name": "north_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_16", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_15", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_15", "type": "r"}]}], "command_template": "go north", "reverse_name": null, "reverse_command_template": "go south"}, {"name": "go/east", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_15", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_1", "type": "r"}]}], "command_template": "go east", "reverse_name": null, "reverse_command_template": "go west"}, {"name": "go/east", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}], "command_template": "go east", "reverse_name": null, "reverse_command_template": "go west"}, {"name": "open/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "c_0", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}], "command_template": "open {c_0}", "reverse_name": null, "reverse_command_template": "close {c_0}"}], "condition": {"name": "trigger", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "event", "arguments": [{"name": "P", "type": "P"}, {"name": "c_0", "type": "c"}, {"name": "r_0", "type": "r"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [], "optional": false, "repeatable": false}], "infos": [["P", {"id": "P", "type": "P", "name": null, "noun": null, "adj": null, "desc": null, "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["I", {"id": "I", "type": "I", "name": null, "noun": null, "adj": null, "desc": null, "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["r_0", {"id": "r_0", "type": "r", "name": "lounge", "noun": "lounge", "adj": null, "desc": "You arrive in a lounge. A typical one.\n\n You can make out a spherical chest![if c_0 is open and there is something in the c_0] The spherical chest contains [a list of things in the c_0].[end if][if c_0 is open and the c_0 contains nothing] What a letdown! The spherical chest is empty![end if]\n\nYou don't like doors? Why not try going east, that entranceway is unguarded. There is an exit to the north. Don't worry, it is unguarded. You need an unblocked exit? You should try going west.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_1", {"id": "r_1", "type": "r", "name": "scullery", "noun": "scullery", "adj": null, "desc": "Look around you. Take it all in. It's not every day someone gets to be in a scullery. You try to gain information on your surroundings by using a technique you call 'looking.'\n\n You can see [if c_1 is locked]a locked[else if c_1 is open]an opened[otherwise]a closed[end if] box, which looks ordinary, in the room.[if c_1 is open and there is something in the c_1] The box contains [a list of things in the c_1].[end if][if c_1 is open and the c_1 contains nothing] The box is empty! This is the worst thing that could possibly happen, ever![end if] You make out [if c_2 is locked]a locked[else if c_2 is open]an opened[otherwise]a closed[end if] freezer.[if c_2 is open and there is something in the c_2] The freezer contains [a list of things in the c_2].[end if][if c_2 is open and the c_2 contains nothing] What a letdown! The freezer is empty![end if] You bend down to tie your shoe. When you stand up, you notice a counter. [if there is something on the s_0]On the counter you can make out [a list of things on the s_0].[end if][if there is nothing on the s_0]Looks like someone's already been here and taken everything off it, though.[end if]\n\nThere is an unblocked exit to the east. There is an exit to the north. Don't worry, it is unblocked. There is an exit to the south. Don't worry, it is unguarded. You need an unguarded exit? You should try going west.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_15", {"id": "r_15", "type": "r", "name": "restroom", "noun": "restroom", "adj": null, "desc": "Well, here we are in the restroom.\n\n You see [if c_3 is locked]a locked[else if c_3 is open]an opened[otherwise]a closed[end if] locker in the room.[if c_3 is open and there is something in the c_3] The locker contains [a list of things in the c_3].[end if][if c_3 is open and the c_3 contains nothing] The locker is empty! This is the worst thing that could possibly happen, ever![end if]\n\nYou need an unblocked exit? You should try going east. There is an exit to the north. Don't worry, it is unguarded. You need an unblocked exit? You should try going south.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_10", {"id": "r_10", "type": "r", "name": "workshop", "noun": "workshop", "adj": null, "desc": "You are in a workshop.\n\n\n\nYou don't like doors? Why not try going east, that entranceway is unblocked. There is an exit to the north. Don't worry, it is unguarded. You need an unguarded exit? You should try going west.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_16", {"id": "r_16", "type": "r", "name": "basement", "noun": "basement", "adj": null, "desc": "You arrive in a basement. An usual kind of place. The room is well lit.\n\n\n\n There is [if d_1 is open]an open[otherwise]a closed[end if] door leading south. You need an unguarded exit? You should try going east. There is an exit to the north. Don't worry, it is unguarded.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_11", {"id": "r_11", "type": "r", "name": "laundromat", "noun": "laundromat", "adj": null, "desc": "You have fallen into a laundromat. Not the laundromat you'd expect. No, this is a laundromat. Let's see what's in here.\n\n You see a shelf. [if there is something on the s_1]You see [a list of things on the s_1] on the shelf.[end if][if there is nothing on the s_1]But there isn't a thing on it.[end if]\n\nThere is an unblocked exit to the north. You need an unblocked exit? You should try going south. There is an unguarded exit to the west.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_18", {"id": "r_18", "type": "r", "name": "study", "noun": "study", "adj": null, "desc": "You've entered a study.\n\n\n\nYou need an unguarded exit? You should try going west.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_17", {"id": "r_17", "type": "r", "name": "office", "noun": "office", "adj": null, "desc": "You're now in the office.\n\n What's that over there? It looks like it's a cabinet. Something scurries by right in the corner of your eye. Probably nothing.[if c_4 is open and there is something in the c_4] The cabinet contains [a list of things in the c_4].[end if][if c_4 is open and the c_4 contains nothing] The cabinet is empty! This is the worst thing that could possibly happen, ever![end if]\n\n There is [if d_1 is open]an open[otherwise]a closed[end if] door leading north. There is an unblocked exit to the east.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_2", {"id": "r_2", "type": "r", "name": "cellar", "noun": "cellar", "adj": null, "desc": "I never took you for the sort of person who would show up in a cellar, but I guess I was wrong. You decide to just list off a complete list of everything you see in the room, because hey, why not?\n\n You scan the room for a rack, and you find a rack. The rack is normal.[if there is something on the s_2] On the rack you can see [a list of things on the s_2]. Suddenly, you bump your head on the ceiling, but it's not such a bad bump that it's going to prevent you from looking at objects and even things.[end if][if there is nothing on the s_2] But oh no! there's nothing on this piece of garbage. What, you think everything in TextWorld should have stuff on it?[end if]\n\n There is [if d_0 is open]an open[otherwise]a closed[end if] gateway leading west. You need an unblocked exit? You should try going east. You need an unblocked exit? You should try going north. There is an unblocked exit to the south.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_13", {"id": "r_13", "type": "r", "name": "parlor", "noun": "parlor", "adj": null, "desc": "You've fallen into an ordinary room. Your mind races to think of what kind of room would be ordinary. And then it hits you. Of course. You're in the parlor. The room seems oddly familiar, as though it were only superficially different from the other rooms in the building.\n\n\n\n There is [if d_0 is open]an open[otherwise]a closed[end if] gateway leading east. You need an unguarded exit? You should try going north. There is an exit to the south. Don't worry, it is unblocked.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_3", {"id": "r_3", "type": "r", "name": "chamber", "noun": "chamber", "adj": null, "desc": "Guess what, you are in a place we're calling a chamber. You decide to just list off a complete list of everything you see in the room, because hey, why not?\n\n You make out a portmanteau.[if c_5 is open and there is something in the c_5] The portmanteau contains [a list of things in the c_5].[end if][if c_5 is open and the c_5 contains nothing] The portmanteau is empty, what a horrible day![end if]\n\nThere is an exit to the east. Don't worry, it is unblocked. You need an unguarded exit? You should try going south. There is an exit to the west. Don't worry, it is unguarded.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_4", {"id": "r_4", "type": "r", "name": "studio", "noun": "studio", "adj": null, "desc": "You find yourself in a studio. An ordinary kind of place.\n\n You make out a toolbox.[if c_6 is open and there is something in the c_6] The toolbox contains [a list of things in the c_6]. You wonder idly who left that here.[end if][if c_6 is open and the c_6 contains nothing] The toolbox is empty! What a waste of a day![end if] You can make out a table. The table is ordinary.[if there is something on the s_3] On the table you make out [a list of things on the s_3].[end if][if there is nothing on the s_3] But the thing is empty.[end if]\n\nYou don't like doors? Why not try going east, that entranceway is unblocked. There is an exit to the north. Don't worry, it is unblocked. There is an unguarded exit to the south. There is an unblocked exit to the west.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_5", {"id": "r_5", "type": "r", "name": "kitchen", "noun": "kitchen", "adj": null, "desc": "Well how about that, you are in a place we're calling a kitchen.\n\n You see [if c_7 is locked]a locked[else if c_7 is open]an opened[otherwise]a closed[end if] type H locker.[if c_7 is open and there is something in the c_7] The type H locker contains [a list of things in the c_7].[end if][if c_7 is open and the c_7 contains nothing] What a letdown! The type H locker is empty![end if]\n\nYou need an unblocked exit? You should try going south. There is an unblocked exit to the west.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_7", {"id": "r_7", "type": "r", "name": "pantry", "noun": "pantry", "adj": null, "desc": "You are in an usual kind of place. That is to say, you're in a pantry. You begin looking for stuff.\n\n You can make out [if c_8 is locked]a locked[else if c_8 is open]an opened[otherwise]a closed[end if] chest, which looks usual, here.[if c_8 is open and there is something in the c_8] The chest contains [a list of things in the c_8]. You check the price tag on the chest. 85 bucks? What a deal! You'll have to ask where they got this![end if][if c_8 is open and the c_8 contains nothing] The chest is empty, what a horrible day![end if]\n\nThere is an exit to the north. Don't worry, it is unblocked. There is an exit to the west. Don't worry, it is unblocked.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_8", {"id": "r_8", "type": "r", "name": "spare room", "noun": "spare room", "adj": null, "desc": "You find yourself in a spare room. A normal kind of place. Let's see what's in here.\n\n\n\nThere is an exit to the east. Don't worry, it is unguarded. There is an exit to the north. Don't worry, it is unblocked. There is an exit to the west. Don't worry, it is unblocked.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_9", {"id": "r_9", "type": "r", "name": "cubicle", "noun": "cubicle", "adj": null, "desc": "You find yourself in a cubicle. An ordinary kind of place. You try to gain information on your surroundings by using a technique you call 'looking.'\n\n You see [if c_9 is locked]a locked[else if c_9 is open]an opened[otherwise]a closed[end if] rectangular chest in the corner.[if c_9 is open and there is something in the c_9] The rectangular chest contains [a list of things in the c_9].[end if][if c_9 is open and the c_9 contains nothing] The rectangular chest is empty! This is the worst thing that could possibly happen, ever![end if] You make out a stand. [if there is something on the s_4]On the stand you see [a list of things on the s_4].[end if][if there is nothing on the s_4]But the thing is empty. Oh! Why couldn't there just be stuff on it?[end if]\n\nThere is an exit to the east. Don't worry, it is unblocked. You need an unblocked exit? You should try going west.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_12", {"id": "r_12", "type": "r", "name": "bedchamber", "noun": "bedchamber", "adj": null, "desc": "You've entered a bedchamber. You begin to take stock of what's in the room.\n\n You can see a couch. You wonder idly who left that here. The couch is usual.[if there is something on the s_5] On the couch you can make out [a list of things on the s_5].[end if][if there is nothing on the s_5] But the thing is empty.[end if]\n\nThere is an exit to the south. Don't worry, it is unguarded.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_14", {"id": "r_14", "type": "r", "name": "shower", "noun": "shower", "adj": null, "desc": "You are in a shower. A typical one. You try to gain information on your surroundings by using a technique you call 'looking.'\n\n You can see a cuboid chest. Hmmm... what else, what else?[if c_10 is open and there is something in the c_10] The cuboid chest contains [a list of things in the c_10]. Hmmm... what else, what else?[end if][if c_10 is open and the c_10 contains nothing] The cuboid chest is empty, what a horrible day![end if]\n\nThere is an exit to the south. Don't worry, it is unguarded.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_19", {"id": "r_19", "type": "r", "name": "cookhouse", "noun": "cookhouse", "adj": null, "desc": "Well how about that, you are in the place we're calling the cookhouse.\n\n You can see a Microsoft limited edition safe. Wow, isn't TextWorld just the best?[if c_11 is open and there is something in the c_11] The Microsoft limited edition safe contains [a list of things in the c_11].[end if][if c_11 is open and the c_11 contains nothing] The Microsoft limited edition safe is empty! What a waste of a day![end if] You can see a platter. The platter is usual.[if there is something on the s_6] On the platter you can make out [a list of things on the s_6].[end if][if there is nothing on the s_6] But the thing is empty. Hm. Oh well[end if] You make out a saucepan. [if there is something on the s_7]On the saucepan you can make out [a list of things on the s_7]. You shudder, but continue examining the room.[end if][if there is nothing on the s_7]But the thing is empty. You move on, clearly upset by TextWorld.[end if]\n\nYou need an unguarded exit? You should try going south.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_6", {"id": "r_6", "type": "r", "name": "austere workshop", "noun": "workshop", "adj": "austere", "desc": "Guess what, you are in the place we're calling the austere workshop.\n\n You make out [if c_12 is locked]a locked[else if c_12 is open]an opened[otherwise]a closed[end if] coffer.[if c_12 is open and there is something in the c_12] The coffer contains [a list of things in the c_12].[end if][if c_12 is open and the c_12 contains nothing] What a letdown! The coffer is empty![end if]\n\nYou need an unblocked exit? You should try going north. You don't like doors? Why not try going south, that entranceway is unblocked.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["d_0", {"id": "d_0", "type": "d", "name": "gateway", "noun": "gateway", "adj": null, "desc": "it's a well-built gateway [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["d_1", {"id": "d_1", "type": "d", "name": "door", "noun": "door", "adj": null, "desc": "it's a solid door [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["c_0", {"id": "c_0", "type": "c", "name": "spherical chest", "noun": "spherical chest", "adj": null, "desc": "The spherical chest looks strong, and impossible to crack. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["c_1", {"id": "c_1", "type": "c", "name": "box", "noun": "box", "adj": null, "desc": "The box looks strong, and impossible to destroy. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_10", {"id": "c_10", "type": "c", "name": "cuboid chest", "noun": "cuboid chest", "adj": null, "desc": "The cuboid chest looks strong, and impossible to crack. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["c_11", {"id": "c_11", "type": "c", "name": "Microsoft limited edition safe", "noun": "Microsoft limited edition safe", "adj": null, "desc": "The Microsoft limited edition safe looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_12", {"id": "c_12", "type": "c", "name": "coffer", "noun": "coffer", "adj": null, "desc": "The coffer looks strong, and impossible to destroy. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_2", {"id": "c_2", "type": "c", "name": "freezer", "noun": "freezer", "adj": null, "desc": "The freezer looks strong, and impossible to break. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_3", {"id": "c_3", "type": "c", "name": "locker", "noun": "locker", "adj": null, "desc": "The locker looks strong, and impossible to destroy. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["c_4", {"id": "c_4", "type": "c", "name": "cabinet", "noun": "cabinet", "adj": null, "desc": "The cabinet looks strong, and impossible to crack. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_5", {"id": "c_5", "type": "c", "name": "portmanteau", "noun": "portmanteau", "adj": null, "desc": "The portmanteau looks strong, and impossible to break. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["c_6", {"id": "c_6", "type": "c", "name": "toolbox", "noun": "toolbox", "adj": null, "desc": "The toolbox looks strong, and impossible to crack. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_7", {"id": "c_7", "type": "c", "name": "type H locker", "noun": "type H locker", "adj": null, "desc": "The type H locker looks strong, and impossible to crack. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_8", {"id": "c_8", "type": "c", "name": "chest", "noun": "chest", "adj": null, "desc": "The chest looks strong, and impossible to destroy. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["c_9", {"id": "c_9", "type": "c", "name": "rectangular chest", "noun": "rectangular chest", "adj": null, "desc": "The rectangular chest looks strong, and impossible to crack. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["f_0", {"id": "f_0", "type": "f", "name": "salad", "noun": "salad", "adj": null, "desc": "You couldn't pay me to eat that ordinary thing.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["f_1", {"id": "f_1", "type": "f", "name": "pear", "noun": "pear", "adj": null, "desc": "The pear looks heavenly.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["f_2", {"id": "f_2", "type": "f", "name": "apple", "noun": "apple", "adj": null, "desc": "that's an ordinary apple!", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["k_11", {"id": "k_11", "type": "k", "name": "Microsoft limited edition passkey", "noun": "Microsoft limited edition passkey", "adj": null, "desc": "The Microsoft limited edition passkey is heavier than it looks.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["k_3", {"id": "k_3", "type": "k", "name": "latchkey", "noun": "latchkey", "adj": null, "desc": "The metal of the latchkey is rusty.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["k_7", {"id": "k_7", "type": "k", "name": "type H latchkey", "noun": "type H latchkey", "adj": null, "desc": "The metal of the type H latchkey is polished.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["o_0", {"id": "o_0", "type": "o", "name": "binder", "noun": "binder", "adj": null, "desc": "The binder would seem to be out of place here", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["o_1", {"id": "o_1", "type": "o", "name": "frisbee", "noun": "frisbee", "adj": null, "desc": "The frisbee would seem to be out of place here", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["o_2", {"id": "o_2", "type": "o", "name": "shadfly", "noun": "shadfly", "adj": null, "desc": "The shadfly is dirty.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["o_3", {"id": "o_3", "type": "o", "name": "manuscript", "noun": "manuscript", "adj": null, "desc": "The manuscript would seem to be well matched to everything else here", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["o_4", {"id": "o_4", "type": "o", "name": "sponge", "noun": "sponge", "adj": null, "desc": "The sponge looks well matched to everything else here", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["s_0", {"id": "s_0", "type": "s", "name": "counter", "noun": "counter", "adj": null, "desc": "The counter is unstable.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["s_1", {"id": "s_1", "type": "s", "name": "shelf", "noun": "shelf", "adj": null, "desc": "The shelf is reliable.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["s_2", {"id": "s_2", "type": "s", "name": "rack", "noun": "rack", "adj": null, "desc": "The rack is undependable.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["s_3", {"id": "s_3", "type": "s", "name": "table", "noun": "table", "adj": null, "desc": "The table is reliable.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_4", {"id": "s_4", "type": "s", "name": "stand", "noun": "stand", "adj": null, "desc": "The stand is unstable.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_5", {"id": "s_5", "type": "s", "name": "couch", "noun": "couch", "adj": null, "desc": "The couch is solid.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["s_6", {"id": "s_6", "type": "s", "name": "platter", "noun": "platter", "adj": null, "desc": "The platter is reliable.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["s_7", {"id": "s_7", "type": "s", "name": "saucepan", "noun": "saucepan", "adj": null, "desc": "The saucepan is unstable.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["f_3", {"id": "f_3", "type": "f", "name": "stick of butter", "noun": "stick of butter", "adj": null, "desc": "that's an usual stick of butter!", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["f_4", {"id": "f_4", "type": "f", "name": "legume", "noun": "legume", "adj": null, "desc": "You couldn't pay me to eat that standard thing.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["f_5", {"id": "f_5", "type": "f", "name": "loaf of bread", "noun": "loaf of bread", "adj": null, "desc": "The loaf of bread looks tasty.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["k_0", {"id": "k_0", "type": "k", "name": "spherical keycard", "noun": "spherical keycard", "adj": null, "desc": "The spherical keycard looks useful", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["k_5", {"id": "k_5", "type": "k", "name": "key", "noun": "key", "adj": null, "desc": "The key is cold to the touch", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["k_9", {"id": "k_9", "type": "k", "name": "cuboid keycard", "noun": "cuboid keycard", "adj": null, "desc": "The cuboid keycard is cold to the touch", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["o_5", {"id": "o_5", "type": "o", "name": "insect", "noun": "insect", "adj": null, "desc": "The insect would seem to be well matched to everything else here", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["k_8", {"id": "k_8", "type": "k", "name": "rectangular latchkey", "noun": "rectangular latchkey", "adj": null, "desc": "The rectangular latchkey looks useful", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}]], "KB": {"logic": "# object\ntype o : t {\n    constraints {\n        obj1 :: in(o, I) & in(o, c) -> fail();\n        obj2 :: in(o, I) & on(o, s) -> fail();\n        obj3 :: in(o, I) & at(o, r) -> fail();\n        obj4 :: in(o, c) & on(o, s) -> fail();\n        obj5 :: in(o, c) & at(o, r) -> fail();\n        obj6 :: on(o, s) & at(o, r) -> fail();\n        obj7 :: at(o, r) & at(o, r') -> fail();\n        obj8 :: in(o, c) & in(o, c') -> fail();\n        obj9 :: on(o, s) & on(o, s') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"object-like\";\n            definition :: \"object-like is portable.\";\n        }\n    }\n}\n\n# Inventory\ntype I {\n    predicates {\n        in(o, I);\n    }\n\n    rules {\n        inventory :: at(P, r) -> at(P, r);  # Nothing changes.\n\n        take :: $at(P, r) & at(o, r) -> in(o, I);\n        drop :: $at(P, r) & in(o, I) -> at(o, r);\n\n        take/c :: $at(P, r) & $at(c, r) & $open(c) & in(o, c) -> in(o, I);\n        insert :: $at(P, r) & $at(c, r) & $open(c) & in(o, I) -> in(o, c);\n\n        take/s :: $at(P, r) & $at(s, r) & on(o, s) -> in(o, I);\n        put    :: $at(P, r) & $at(s, r) & in(o, I) -> on(o, s);\n\n        examine/I :: in(o, I) -> in(o, I);  # Nothing changes.\n        examine/s :: at(P, r) & $at(s, r) & $on(o, s) -> at(P, r);  # Nothing changes.\n        examine/c :: at(P, r) & $at(c, r) & $open(c) & $in(o, c) -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        inventory :: inventory;\n\n        take :: drop;\n        take/c :: insert;\n        take/s :: put;\n\n        examine/I :: examine/I;\n        examine/s :: examine/s;\n        examine/c :: examine/c;\n    }\n\n    inform7 {\n        predicates {\n            in(o, I) :: \"The player carries the {o}\";\n        }\n\n        commands {\n            take :: \"take {o}\" :: \"taking the {o}\";\n            drop :: \"drop {o}\" :: \"dropping the {o}\";\n\n            take/c :: \"take {o} from {c}\" :: \"removing the {o} from the {c}\";\n            insert :: \"insert {o} into {c}\" :: \"inserting the {o} into the {c}\";\n\n            take/s :: \"take {o} from {s}\" :: \"removing the {o} from the {s}\";\n            put :: \"put {o} on {s}\" :: \"putting the {o} on the {s}\";\n\n            inventory :: \"inventory\" :: \"taking inventory\";\n\n            examine/I :: \"examine {o}\" :: \"examining the {o}\";\n            examine/s :: \"examine {o}\" :: \"examining the {o}\";\n            examine/c :: \"examine {o}\" :: \"examining the {o}\";\n        }\n    }\n}\n\n# thing\ntype t {\n    rules {\n        examine/t :: at(P, r) & $at(t, r) -> at(P, r);\n    }\n\n    reverse_rules {\n        examine/t :: examine/t;\n    }\n\n    inform7 {\n        type {\n            kind :: \"thing\";\n        }\n\n        commands {\n            examine/t :: \"examine {t}\" :: \"examining the {t}\";\n        }\n    }\n}\n\n# door\ntype d : t {\n    predicates {\n        open(d);\n        closed(d);\n        locked(d);\n\n        link(r, d, r);\n    }\n\n    rules {\n        lock/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & closed(d) -> locked(d);\n        unlock/d :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & locked(d) -> closed(d);\n\n        open/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & closed(d) -> open(d) & free(r, r') & free(r', r);\n        close/d  :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & open(d) & free(r, r') & free(r', r) -> closed(d);\n\n        examine/d :: at(P, r) & $link(r, d, r') -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        lock/d :: unlock/d;\n        open/d :: close/d;\n\n        examine/d :: examine/d;\n    }\n\n    constraints {\n        d1 :: open(d)   & closed(d) -> fail();\n        d2 :: open(d)   & locked(d) -> fail();\n        d3 :: closed(d) & locked(d) -> fail();\n\n        # A door can't be used to link more than two rooms.\n        link1 :: link(r, d, r') & link(r, d, r'') -> fail();\n        link2 :: link(r, d, r') & link(r'', d, r''') -> fail();\n\n        # There's already a door linking two rooms.\n        link3 :: link(r, d, r') & link(r, d', r') -> fail();\n\n        # There cannot be more than four doors in a room.\n        too_many_doors :: link(r, d1: d, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        # There cannot be more than four doors in a room.\n        dr1 :: free(r, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr2 :: free(r, r1: r) & free(r, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr3 :: free(r, r1: r) & free(r, r2: r) & free(r, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr4 :: free(r, r1: r) & free(r, r2: r) & free(r, r3: r) & free(r, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        free1 :: link(r, d, r') & free(r, r') & closed(d) -> fail();\n        free2 :: link(r, d, r') & free(r, r') & locked(d) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"door\";\n            definition :: \"door is openable and lockable.\";\n        }\n\n        predicates {\n            open(d) :: \"The {d} is open\";\n            closed(d) :: \"The {d} is closed\";\n            locked(d) :: \"The {d} is locked\";\n            link(r, d, r') :: \"\";  # No equivalent in Inform7.\n        }\n\n        commands {\n            open/d :: \"open {d}\" :: \"opening {d}\";\n            close/d :: \"close {d}\" :: \"closing {d}\";\n\n            unlock/d :: \"unlock {d} with {k}\" :: \"unlocking {d} with the {k}\";\n            lock/d :: \"lock {d} with {k}\" :: \"locking {d} with the {k}\";\n\n            examine/d :: \"examine {d}\" :: \"examining {d}\";\n        }\n    }\n}\n\n# container\ntype c : t {\n    predicates {\n        open(c);\n        closed(c);\n        locked(c);\n\n        in(o, c);\n    }\n\n    rules {\n        lock/c   :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & closed(c) -> locked(c);\n        unlock/c :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & locked(c) -> closed(c);\n\n        open/c  :: $at(P, r) & $at(c, r) & closed(c) -> open(c);\n        close/c :: $at(P, r) & $at(c, r) & open(c) -> closed(c);\n    }\n\n    reverse_rules {\n        lock/c :: unlock/c;\n        open/c :: close/c;\n    }\n\n    constraints {\n        c1 :: open(c)   & closed(c) -> fail();\n        c2 :: open(c)   & locked(c) -> fail();\n        c3 :: closed(c) & locked(c) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"container\";\n            definition :: \"containers are openable, lockable and fixed in place. containers are usually closed.\";\n        }\n\n        predicates {\n            open(c) :: \"The {c} is open\";\n            closed(c) :: \"The {c} is closed\";\n            locked(c) :: \"The {c} is locked\";\n\n            in(o, c) :: \"The {o} is in the {c}\";\n        }\n\n        commands {\n            open/c :: \"open {c}\" :: \"opening the {c}\";\n            close/c :: \"close {c}\" :: \"closing the {c}\";\n\n            lock/c :: \"lock {c} with {k}\" :: \"locking the {c} with the {k}\";\n            unlock/c :: \"unlock {c} with {k}\" :: \"unlocking the {c} with the {k}\";\n        }\n    }\n}\n\n# key\ntype k : o {\n    predicates {\n        match(k, c);\n        match(k, d);\n    }\n\n    constraints {\n        k1 :: match(k, c) & match(k', c) -> fail();\n        k2 :: match(k, c) & match(k, c') -> fail();\n        k3 :: match(k, d) & match(k', d) -> fail();\n        k4 :: match(k, d) & match(k, d') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"key\";\n        }\n\n        predicates {\n            match(k, c) :: \"The matching key of the {c} is the {k}\";\n            match(k, d) :: \"The matching key of the {d} is the {k}\";\n        }\n    }\n}\n\n# food\ntype f : o {\n    predicates {\n        edible(f);\n        eaten(f);\n    }\n\n    rules {\n        eat :: in(f, I) -> eaten(f);\n    }\n\n    constraints {\n        eaten1 :: eaten(f) & in(f, I) -> fail();\n        eaten2 :: eaten(f) & in(f, c) -> fail();\n        eaten3 :: eaten(f) & on(f, s) -> fail();\n        eaten4 :: eaten(f) & at(f, r) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"food\";\n            definition :: \"food is edible.\";\n        }\n\n        predicates {\n            edible(f) :: \"The {f} is edible\";\n            eaten(f) :: \"The {f} is nowhere\";\n        }\n\n        commands {\n            eat :: \"eat {f}\" :: \"eating the {f}\";\n        }\n    }\n}\n\n# Player\ntype P {\n    rules {\n        look :: at(P, r) -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        look :: look;\n    }\n\n    inform7 {\n        commands {\n            look :: \"look\" :: \"looking\";\n        }\n    }\n}\n\n# supporter\ntype s : t {\n    predicates {\n        on(o, s);\n    }\n\n    inform7 {\n        type {\n            kind :: \"supporter\";\n            definition :: \"supporters are fixed in place.\";\n        }\n\n        predicates {\n            on(o, s) :: \"The {o} is on the {s}\";\n        }\n    }\n}\n\n# room\ntype r {\n    predicates {\n        at(P, r);\n        at(t, r);\n\n        north_of(r, r);\n        west_of(r, r);\n\n        north_of/d(r, d, r);\n        west_of/d(r, d, r);\n\n        free(r, r);\n\n        south_of(r, r') = north_of(r', r);\n        east_of(r, r') = west_of(r', r);\n\n        south_of/d(r, d, r') = north_of/d(r', d, r);\n        east_of/d(r, d, r') = west_of/d(r', d, r);\n    }\n\n    rules {\n        go/north :: at(P, r) & $north_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/south :: at(P, r) & $south_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/east  :: at(P, r) & $east_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/west  :: at(P, r) & $west_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n    }\n\n    reverse_rules {\n        go/north :: go/south;\n        go/west :: go/east;\n    }\n\n    constraints {\n        r1 :: at(P, r) & at(P, r') -> fail();\n        r2 :: at(s, r) & at(s, r') -> fail();\n        r3 :: at(c, r) & at(c, r') -> fail();\n\n        # An exit direction can only lead to one room.\n        nav_rr1 :: north_of(r, r') & north_of(r'', r') -> fail();\n        nav_rr2 :: south_of(r, r') & south_of(r'', r') -> fail();\n        nav_rr3 :: east_of(r, r') & east_of(r'', r') -> fail();\n        nav_rr4 :: west_of(r, r') & west_of(r'', r') -> fail();\n\n        # Two rooms can only be connected once with each other.\n        nav_rrA :: north_of(r, r') & south_of(r, r') -> fail();\n        nav_rrB :: north_of(r, r') & west_of(r, r') -> fail();\n        nav_rrC :: north_of(r, r') & east_of(r, r') -> fail();\n        nav_rrD :: south_of(r, r') & west_of(r, r') -> fail();\n        nav_rrE :: south_of(r, r') & east_of(r, r') -> fail();\n        nav_rrF :: west_of(r, r')  & east_of(r, r') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"room\";\n        }\n\n        predicates {\n            at(P, r) :: \"The player is in {r}\";\n            at(t, r) :: \"The {t} is in {r}\";\n            free(r, r') :: \"\";  # No equivalent in Inform7.\n\n            north_of(r, r') :: \"The {r} is mapped north of {r'}\";\n            south_of(r, r') :: \"The {r} is mapped south of {r'}\";\n            east_of(r, r') :: \"The {r} is mapped east of {r'}\";\n            west_of(r, r') :: \"The {r} is mapped west of {r'}\";\n\n            north_of/d(r, d, r') :: \"South of {r} and north of {r'} is a door called {d}\";\n            south_of/d(r, d, r') :: \"North of {r} and south of {r'} is a door called {d}\";\n            east_of/d(r, d, r') :: \"West of {r} and east of {r'} is a door called {d}\";\n            west_of/d(r, d, r') :: \"East of {r} and west of {r'} is a door called {d}\";\n        }\n\n        commands {\n            go/north :: \"go north\" :: \"going north\";\n            go/south :: \"go south\" :: \"going south\";\n            go/east :: \"go east\" :: \"going east\";\n            go/west :: \"go west\" :: \"going west\";\n        }\n    }\n}\n\n", "text_grammars_path": "/home/lennard/miniconda3/envs/env/lib/python3.12/site-packages/textworld/generator/data/text_grammars"}, "metadata": {"walkthrough": ["go west", "go south", "go south", "go west", "go west", "go west", "go north", "go east", "go east", "open spherical chest"], "uuid": "tw-mlhnSDF0cDcOFZc8Fy-house-GP-n5JpcjnXUmEbs30x"}, "objective": "I hope you're ready to go into rooms and interact with objects, because you've just entered TextWorld! Here is your task for today. First step, head west. After that, go to the south. After that, go to the south. Then, go west. And then, venture west. Once you do that, make an attempt to take a trip west. After that, take a trip north. Okay, and then, attempt to take a trip east. And then, venture east. Then, ensure that the spherical chest inside the lounge is open. That's it!"}